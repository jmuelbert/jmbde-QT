---
# version format
version: "0.5.{build}"


# branches to build
branches:
  # whitelist
  only:
    - master
    - production
    - /v\d*\.\d*\.\d*/
  # blacklist
  except:
    - gh-pages


# Do not build feature branch with open Pull Requests
pull_requests:
  do_not_increment_build_number: true

# Maximum number of concurrent jobs for the project
max_jobs: 1

image:
  - Visual Studio 2019
  - Ubuntu
  - macOS

configuration:
  - release-fastbuild
  - Release
#  - debug

platform:
  # Disable x86 builds since we only get one concurrent build on AppVeyor and x86
  # failures will be caught by Jenkins.
  # - x86
  - x64

nuget:
  disable_publish_on_pr: true

environment:
  global:
    my_secret:
    secure: NuyAKQY3nsfYHO6P59pRQCWMFPBYGuShNyCwrBWLuqK7jQ/CmRNZeuWuVRUvy/xU
    APPVEYOR_YML_DISABLE_PS_LINUX: true
    Appveyor: true
    QT_PPA: beineri/opt-qt-5.14.1-bionic
    QT_VER: 514
    QT_VERSION: 5.14.1
    ENV_SETUP_BAT: C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\Tools\VsDevCmd.bat
    ENV_SETUP_ARG: -host_arch=amd64
    PATH: C:\Python37-x64\bin:%PATH%

matrix:
  exclude:
    # Ubuntu doesn't support "release-fastbuild".
    - image: Ubuntu
      configuration: release-fastbuild
    - image: macos
      configuration: release-fastbuild
    # We only want "release-fastbuild" for Windows since "release" consumes too
    # much memory due to link-time code generation / whole-program optimization.
    - image: Visual Studio 2019
      configuration: release

skip_branch_with_pr: true
skip_commits:

  files:
    - "**/*.md"
    - docs/*
    - LICENSE
    - README
    - CHANGELOG
    - COPYING
    - .travis.yml

for:
  ########## macOS SPECIFIC CONFIGURATION ##########
  - matrix:
      only:
        - image: macOS

    clone_folder: /Users/appveyor/projects/jmbde-QT
    cache:
      - ccache

    install:
      - brew install ninja
      - brew install qt
      - brew install quazip
      - brew install ccache
      - brew upgrade
      - brew link --force qt5
      - export PATH="$(brew --prefix qt)/bin:$PATH"
      - sudo ln -s "/usr/local/Cellar/qt/${QT_VERSION}/mkspecs /usr/local/mkspecs"
      - sudo ln -s "/usr/local/Cellar/qt/${QT_VERSION}/plugins /usr/local/plugins"

      # Install vcpkg
      - git clone https://github.com/Microsoft/vcpkg.git
      - cd vcpkg
      - ./bootstrap-vcpkg.sh
      - ./vcpkg integrate install
      - ./vcpkg install ecm
      - export VCPKGToolChainFile=$APPVEYOR_BUILD_FOLDER/vcpkg/scripts/buildsystems/vcpkg.cmake
      - cd ..

    before_build:
      - mkdir -p build; cd build
      - cmake -GNinja -DCMAKE_BUILD_TYPE=$CONFIGURATION -DCMAKE_PREFIX_PATH="$(brew --prefix qt)" -DCMAKE_INSTALL_PREFIX:PATH=. -DCMAKE_TOOLCHAIN_FILE="$VCPKGToolChainFile" -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=ON ..


    build_script:
      - sudo cmake --build . --target install

    after_build:
      - sudo cpack .
      - if [ -z "$VERSION" ]; then
          export VERSION=$APPVEYOR_BUILD_VERSION;
        fi
      # prepare jmbde
      - sudo macdeployqt jmbde.app -verbose=2
      - sudo chown -R $(id -nu) jmbde.app
      - mkdir -p dmgdir/jmbde.app
      - cp -r jmbde.app/* dmgdir/jmbde.app/
      # prepare jmbdequick
      - sudo macdeployqt jmbdequick.app -verbose=2
      - sudo chown -R $(id -nu) jmbdequick.app
      - mkdir -p dmgdir/jmbdequick.app
      - cp -r jmbdequick.app/* dmgdir/jmbdequick.app/
      # build dmg
      - ln -s /Applications dmgdir/Applications
      - hdiutil create -volname jmbde-$VERSION -srcfolder dmgdir -ov -format UDZO jmbde-$VERSION.dmg;

    test_script:
      - ctest -C $CONFIGURATION -VV

    artifacts:
      - path: build/jmbde*.(dmg|sh|tar.gz)
        name: jmbde

    deploy:
      - provider: GitHub
        auth_token:
          secure: NuyAKQY3nsfYHO6P59pRQCWMFPBYGuShNyCwrBWLuqK7jQ/CmRNZeuWuVRUvy/xU
        artifact: /.*\.(dmg)/
        draft: false
        prerelease: false
        on:
          branch: master            # release from master branch only
          APPVEYOR_REPO_TAG: true   # deploy on tag push only


  ########## END macOS SPECIFIC CONFIGURATION ##########

  ########## UBUNTU SPECIFIC CONFIGURATION ##########
  - matrix:
      only:
        - image: Ubuntu

    clone_folder: /home/appveyor/projects/jmbde-QT
    cache: ccache

    install:
      # Add Repostories
      - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
      - sudo add-apt-repository --yes ppa:${QT_PPA}
      - sudo apt-get update -qq
      - sudo apt remove
      - sudo apt-get -y install apt-transport-https ca-certificates
      - sudo apt-get -y install gnupg software-properties-common
      - sudo apt-get -y install curl
      - sudo apt-get -y install ninja-build
      - sudo apt-get -y install libquazip-dev zlib1g-dev libssl-dev
      - sudo apt-get -y install libffi-dev libx11-dev
      - sudo apt-get -y install binutils
      - sudo apt-get -y install ccache
      - sudo apt-get -y install libgl1-mesa-dev
      - sudo apt-get -y install zlib1g-dev
      # Qt 514 on Linux
      - sudo apt-get -y install qt${QT_VER}base
      - sudo apt-get -y install qt${QT_VER}script
      - sudo apt-get -y install qt${QT_VER}svg
      - sudo apt-get -y install qt${QT_VER}imageformats
      - sudo apt-get -y install qt${QT_VER}translations
      - sudo apt-get -y install qt${QT_VER}tools
      - source /opt/qt${QT_VER}/bin/qt${QT_VER}-env.sh

      # Install vcpkg
      - git clone https://github.com/Microsoft/vcpkg.git
      - cd vcpkg
      - ./bootstrap-vcpkg.sh
      - ./vcpkg integrate install
      - ./vcpkg install ecm
      - export VCPKGToolChainFile=$APPVEYOR_BUILD_FOLDER/vcpkg/scripts/buildsystems/vcpkg.cmake
      - cd ..

    before_build:
      - set -e # Exit immediately if anything fails
      - mkdir -p build
      - mkdir -p appbuild
      - mkdir -p appdir

    build_script:
      - cd build
      - cmake -DCMAKE_BUILD_TYPE="$CONFIGURATION"  -DCMAKE_INSTALL_PREFIX:PATH=../appdir/usr -DBUILD_SHARED_LIBS=ON -DBUILD_TESTING=ON -DCMAKE_TOOLCHAIN_FILE="$VCPKGToolChainFile" -DBUILD_SHARED_LIBS=ON ..
      - make
      - ctest -V

    after_build:
      #
      # Create AppImage
      - make install
      - cd ..
      - export LD_LIBRARY_PATH=$APPVEYOR_BUILD_FOLDER/appdir/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
      - if [ -z "$VERSION" ]; then
        export VERSION=$APPVEYOR_BUILD_VERSION;
        fi
      - wget -c "https://github.com/jimevins/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
      - chmod a+x linuxdeployqt*.AppImage
      - wget -c -nv "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
      - chmod a+x appimagetool-x86_64.AppImage
      - ./linuxdeployqt*.AppImage $APPVEYOR_BUILD_FOLDER/appdir/usr/share/applications/*.desktop -bundle-non-qt-libs -extra-plugins=imageformats/libqsvg.so -exclude-libs=libpython3.54m.so.1.0 -verbose=2 -appimage
      - find appdir -executable -type f -exec ldd {} \; | grep " => /usr" | cut -d " " -f 2-3 | sort | uniq
      - # sudo cpack .
      - ls -la

    test_script:
      - ctest -C $CONFIGURATION -VV

    artifacts:
      - name: "Linux-Debian"
        path: build/*.deb
      - name: "Linux-Archive"
        path: build/*.tar.gz
      - name: "Linux-AppImage"
        path: jmbde*.AppImage

    deploy:
      - provider: GitHub
        auth_token:
          secure: NuyAKQY3nsfYHO6P59pRQCWMFPBYGuShNyCwrBWLuqK7jQ/CmRNZeuWuVRUvy/xU
        artifact: /.*\.(msi|7z|deb|exe)/
        draft: true
        prerelease: false
        on:
          branch: master            # release from master branch only
          APPVEYOR_REPO_TAG: true   # deploy on tag push only

  ########## END UBUNTU SPECIFIC CONFIGURATION ##########

  ########## WINDOWS SPECIFIC CONFIGURATION ##########

  - matrix:
      only:
        - image: Visual Studio 2019
          TOOLCHAIN: "Visual Studio 2019 Clang/LLVM 9.0.0"
          GENERATOR: Visual Studio 16 2019
          PATH: C:\Program Files\LLVM\bin;%PATH%
          CMAKE_ARGS: -DCMAKE_C_COMPILER=clang-cl.exe -DCMAKE_CXX_COMPILER=clang-cl.exe -DCMAKE_LINKER="lld-link.exe"
          CLANG_URL: https://releases.llvm.org/9.0.0/LLVM-9.0.0-win64.exe

      fast_finish: false # set this flag to true to immediately finish build once one of the jobs fails.

    cache:
      - C:\tools\vcpkg\installed -> .appveyor.yml
      - C:\Users\appveyor\clcache -> .appveyor.yml, build_msvc\**, **\Makefile.am, **\*.vcxproj.in

    init:
      - git config --global core.autocrlf input
      # Uncomment the following line to show RDP info at beginning of job
      #    - ps: iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
      - call set ENVIRONMENT_NAME=%%ENVIRONMENT_NAME:PLATFORM=%platform%%%
      - call set ENVIRONMENT_NAME=%%ENVIRONMENT_NAME:CONFIGURATION=%configuration%%%
      - ps: $ENV:PLATFORM="x64"
      # MSVC
      - ps: $ENV:QTDIR="C:\Qt\5.14\msvc2017_64"
      - ps: $ENV:VCPKGROOT="C:\tools\vcpkg"
      - ps: $ENV:VCPKGDir="C:\Tools\vcpkg"
      - ps: $ENV:VCPKGToolChainFile = "C:/Tools/vcpkg/scripts/buildsystems/vcpkg.cmake"
      - ps: $ENV:VCPKG_BUILD_TYPE=$ENV:CONFIGURATION
      - ps: $ENV:VCREDIST_CRT_DIR="${ENV:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Community\VC\Redist\MSVC\%RedistVersion%\x64\Microsoft.VC141.CRT"
      - ps: $ENV:VCREDIST_CXXAMP_DIR="${ENV:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Community\VC\Redist\MSVC\%RedistVersion%\x64\Microsoft.VC141.CXXAMP"
      - ps: $ENV:VCREDIST_OPENMP_DIR="${ENV:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Community\VC\Redist\MSVC\%RedistVersion%\x64\Microsoft.VC141.OpenMP"
      - ps: $ENV:REDIST="${ENV:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Community\VC\Redist\MSVC\%RedistVersion%\vcredist_%PLATFORM%.exe"
      - ps: $ENV:VCVARSALL="C${ENV:ProgramFiles(x86)}\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat"
      - call set /p RedistVersion=<"%ProgramFiles(x86)%\\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\Microsoft.VCRedistVersion.default.txt"
      - ps: $ENV:Path += ";" + $ENV:VCPKDIR
      # MINGW
      # - ps: $ENV:MINGW="C:\mingw-w64\x86_64-7.3.0-posix-seh-rt_v5-rev0"
      # - ps: $ENV:QTDIR="C:\Qt\5.14\mingw73_64"
      # - ps: $ENV:PATH += ";" + $ENV:MINGW + ";"
      - ps: $ENV:INNO="C:\Program Files (x86)\Inno Setup 6"
      - ps: $ENV:NSIS="C:\Program Files (x86)\NSIS"
      - ps: $ENV:CMAKE_GENERATOR="Ninja"
      - ps: $ENV:Path += ";" + $ENV:QTDIR + "\bin"
      - ps: $ENV:Path += ";" + $ENV:INNO + ";" + $ENV:NSIS
      - echo QTDIR=%QTDIR%

    clone_folder: c:\projects\jmbde-QT

    install:
      # Windows
      - cinst png2ico
      - nuget install secure-file -ExcludeVersion
      # Install ECM
      - cmd: vcpkg integrate install
      - cmd: vcpkg install ecm
      - cmd: vcpkg upgrade
      - cmd: vcpkg list
      # - cmd: echo set(VCPKG_BUILD_TYPE release) >> C:\tools\vcpkg\triplets\%PLATFORM%-windows-static.cmake
      - cmd: vcpkg remove --outdated --recurse
      - echo "Downloading conan"
      - python -m pip install -U pip
      - conan user
      - if defined CLANG_URL appveyor DownloadFile %CLANG_URL% -FileName llvm-installer.exe
      - if defined CLANG_URL START /WAIT llvm-installer.exe /S /D=C:\"Program Files\LLVM"
      - cmake --version

    before_build:
      - call "%ProgramFiles(x86)%\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" %PLATFORM%
      - call "%QTDIR%\bin\qtenv2.bat"
      - ps: Set-Location "$ENV:APPVEYOR_BUILD_FOLDER"
      - ps: New-Item -itemtype directory -path ./build
      - ps: Set-Location "build"
      - ps: Write-Host "Generate the Project with the $ENV:CMAKE_GENERATOR gnerator and the configuration $ENV:CONFIGURATION and $ENV:VCPKGToolChainFile"

      - ps: Get-ChildItem "C:\tools\vcpkg\triplets"

    build_script:
      - call "%ENV_SETUP_BAT%" %ENV_SETUP_ARG%
      - ps: New-Item -itemtype directory -path ./program
      - ps: cmake -G "$ENV:CMAKE_GENERATOR"  -DCMAKE_BUILD_TYPE="$ENV:CONFIGURATION"  -DCMAKE_PREFIX_PATH="$ENV:QTDIR" -DCMAKE_INSTALL_PREFIX:PATH=./program -DBUILD_SHARED_LIBS=ON ..
      - ps: cmake --build . --config $ENV:CONFIGURATION --target install
      - set CC=clang-cl.exe
      - set CXX=clang-cl.exe
      - cmake %CMAKE_ARGS% --configure -DCMAKE_BUILD_TYPE=%CONFIGURATION% -G "%GENERATOR%" c:\projects\source
      - cmake --build . --config %CONFIGURATION%

    after_build:
      - ps: Set-Location "$ENV:APPVEYOR_BUILD_FOLDER/build/program"
      - ps: Write-Host "$ENV:APPVEYOR_REPO_TAG_NAME"
      - ps: Get-ChildItem
      - ps: windeployqt bin/jmbde.exe bin/jmbdewidgets.dll bin/jmbdemodels.dll
      - ps: Get-ChildItem bin
      - cp %APPVEYOR_BUILD_FOLDER%/packaging/win/installer_%PLATFORM%.iss .
      - ps: $installerfile="installer_" + $ENV:PLATFORM + ".iss"
      - ps: iscc $installerfile
      - ps: Get-ChildItem
      - ps: Get-ChildItem ../

    test_script:
      - ctest -C "$ENV:CONFIGURATION" -VV

    artifacts:
      - name: Windows-Installer_x64
        path: "build/program/jmbde*.exe"
      - name: Windows-Archive
        path: "build/jmbde*.zip"

    deploy:
      - provider: GitHub
        auth_token:
          secure: NuyAKQY3nsfYHO6P59pRQCWMFPBYGuShNyCwrBWLuqK7jQ/CmRNZeuWuVRUvy/xU
        artifact: /.*\.(exe)/
        draft: false
        prerelease: false
        on:
          branch: master            # release from master branch only
          APPVEYOR_REPO_TAG: true   # deploy on tag push only

      - provider: NuGet
        server: https://www.nuget.org
        api_key: oy2k6l6mbqzqz4yxasnarz3dwqvesbpefewkyg4bi5uqz4
        secure: m49OJ7+Jdt9an3jPcTukHA==
        artifact: /.*\.nupkg/
        draft: false
        prerelease: false
        force_update: true
        on:
          appveyor_repo_tag: true


    on_finish:
      # Uncomment the following line if you don't want the build VM to be destroyed
      # and be able to RDP on it until a special “lock” file on VM desktop is deleted
      # The RDP session is limited by overall build time (60 min).
      # - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))

########## END WINDOWS SPECIFIC CONFIGURATION ##########

on_success:
  - echo "*** SUCCESS ***"

on_failure:
  - echo "*** FAILURE ***"

on_finish:
  - echo "*** DONE ***"
