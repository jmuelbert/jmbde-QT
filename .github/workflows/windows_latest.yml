name: Installer Windows

on:
    push:
    release:
        types: [prereleased]

env:
    CMAKE_VERSION: 3.18.0
    NINJA_VERSION: 1.10.0
    BUILD_TYPE: Release
    CCACHE_VERSION: 3.7.11

jobs:
    build:
        strategy:
            matrix:
                qt_version: [5.12.9, 5.15.0]
                platform: [windows-latest]
                arch: [x86, x64]
                include:
                    - platform: windows-latest
                      arch: x86
                      qtarch: win32_msvc2019
                    - platform: windows-latest
                      arch: x64
                      qtarch: win64_msvc2019_64
            fail-fast: false

        name: "${{ matrix.config.os }} Qt ${{ matrix.qt_version }}"
        runs-on: ${{ matrix.platform }}

        env:
            _JMBDE_QT_BUILD_INFO_: "jmbde-QT built from Github Action"
            _JMBDE_QT_BUILD_EXTRA_INFO_: "qt${{ matrix.qt_version }}-${{ github.sha }}-ci.${{ matrix.platform }}"

        steps:
            - name: Get the version
              id: get_version
              shell: bash
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

            - uses: actions/checkout@v2
            - name: Checkout submodules
              run: git submodule update --init --recursive

            - name: Install Python 3.8
              uses: actions/setup-python@v1
              with:
                  python-version: "3.8"
                  architecture: ${{ matrix.arch }}

            - name: Cache Qt
              id: cache-qt
              uses: actions/cache@v1
              with:
                  path: ../Qt
                  key: QtCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.qt_version }}

            - name: Installing Qt - ${{ matrix.arch }}
              uses: jurplel/install-qt-action@v2
              with:
                  cached: ${{ steps.cache-qt.outputs.cache-hit }}
                  version: ${{ matrix.qt_version }}
                  arch: ${{ matrix.qtarch }}

            # =========================================================================================================
            - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Build preparation - Download Dependencies
              shell: bash
              run: |
                  choco install -y ninja
                  pip install conan
                  conan user
                  conan create conan/ecm

            - name: Install MSVC compiler
              uses: ilammy/msvc-dev-cmd@v1
              with:
                  # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from Qv2ray-deps repo
                  toolset: 14.2
                  arch: ${{ matrix.arch }}

            # ========================================================================================================= Generate MakeFile and Build
            - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Generate Dependencies and Build
              shell: bash
              env:
                  CC: cl.exe
                  CXX: cl.exe
              run: |
                  mkdir build
                  cd build
                  conan install ..
                  cmake .. -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_NSIS=ON
                  cmake --build . --target package --parallel $(nproc)

            - name: Windows - Get package name
              shell: bash
              id: get_package
              run: |
                  echo ::set-output name=NAME::$(basename build/jmbde-*.exe)

            - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - uploading artifact
              uses: actions/upload-artifact@master
              with:
                  name: ${{ steps.get_package.outputs.NAME }}
                  path: build/${{ steps.get_package.outputs.NAME }}

            - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Upload binaries to release
              uses: svenstaro/upload-release-action@v1-release
              if: github.event_name == 'release'
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file: build/${{ steps.get_package.outputs.NAME }}
                  asset_name: ${{ steps.get_package.outputs.NAME }}
                  tag: ${{ github.ref }}
                  overwrite: true
