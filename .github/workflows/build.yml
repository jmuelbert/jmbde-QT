---
name: Build

on:
  push:
    branches: [master, improve_build-workflow]
    paths:
      - cmake/**
      - src/**
      - CMakeLists.txt
      - '.github/workflows/build.yml'
      - 'snap/**'
      - 'packaging/flatpak/*.yml'
    tags:
      - '*'
  pull_request:
    branches:
      - 'master'
    types: [opened, reopened]
    paths:
      - cmake/**
      - src/**
      - CMakeLists.txt'
      - '.github/workflows/build.yml'
      - 'snap/**'
      - 'packaging/flatpak/*.yml'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  TARGET_NAME: jmbde
  BUILD_TYPE: RelWithDebInfo
  DISPLAY: ':99'
  CTEST_OUTPUT_ON_FAILURE: 1
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  QT5_VERSION: '5.15.2'
  QT6_VERSION: '6.2.0'
  TEST_QT_TARGET: 'desktop'
  TEST_QT_VERSION: '6.2.0'
  TEST_QT_ARCH: 'gcc_64'
  TEST_ARCH: 'amd_64'
  TEST_ARTIFACT: 'Ubuntu-gcc'
  TEST_CC: 'clang'
  TEST_CXX: 'clang++'
  TEST_BUILD_TYPE: Debug

jobs:
  appimage-build:
    name: Build appimage on ${{ matrix.config.name }} for ${{ matrix.config.qt_version }}

    runs-on: ${{ matrix.config.os }}
    needs: [tests, getVersion]

    strategy:
      matrix:
        qt_target: [desktop]
        config:
          - {
              os: ubuntu-20.04,
              name: 'Ubuntu-20.04 gcc-10',
              qt_version: 6.2.0,
              qt_arch: gcc_64,
              arch: amd64,
              artifact: 'Ubuntu-gcc',
              generator: "-G\
                \ 'Ninja'",
              cc: 'clang',
              cxx: 'clang++',
              image_repo: jmuelbert/ci-building-images,
            }
      fail-fast: false

    # container:
    #   image: ${{ matrix.config.image_repo }}:${{ matrix.config.os }}-${{ matrix.config.symbol }}
    #   options: --cap-add SYS_ADMIN --device /dev/fuse --security-opt apparmor:unconfined
    steps:
      - name: Checkout Source Code
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: master
      - name: Checkout Source code
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Dependencies
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
            python3 \
            python3-pip \
            fuse \
            patchelf \
            extra-cmake-modules \
            build-essential \
            appstream \
            hicolor-icon-theme \
            fcitx-frontend-qt5 \
            openssl \
            ca-certificates

      - name: Get latest CMake
        uses: lukka/get-cmake@latest

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.config.qt_version }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.config.qt_arch }}
          dir: '${{ github.workspace }}/build/'
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Get conan
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Get go-appimage tool
        # Will not use linuxdeployqt anymore, because it suopprts currently still-supported mainstream distribution,
        # which is glibc 2.23. For more information, please see https://github.com/probonopd/linuxdeployqt/issues/340.
        # Will try new tool https://github.com/probonopd/go-appimage written in golang by probonopd.
        run: |
          wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases -O - \
          | grep "appimagetool-.*-${APPIMAGETOOL_ARCH}.AppImage" | head -n 1 | cut -d '"' -f 2) -O appimagetool
          chmod +x appimagetool
        env:
          APPIMAGETOOL_ARCH: x86_64

      - name: Packaging appimage
        run: |
          APPIMAGE_DST_PATH=$GITHUB_WORKSPACE/${TARGET_NAME}.AppDir
          mkdir -p ${APPIMAGE_DST_PATH}
          cd $GITHUB_WORKSPACE
          cmake ${{matrix.config.generator}} \
              -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
              -DCMAKE_INSTALL_PREFIX:PATH="${APPIMAGE_DST_PATH}/usr" \
              -DBUILD_TESTING=OFF \
              -DBUILD_TRANSLATIONS=ON
          cmake --build . --config $BUILD_TYPE -j2 --target install
          $GITHUB_WORKSPACE/appimagetool -s deploy ${APPIMAGE_DST_PATH}/usr/share/applications/io.github.jmuelbert.jmbde.desktop
          mkdir -p ${APPIMAGE_DST_PATH}/usr/plugins/platforminputcontexts
          cp \
            $GITHUB_WORKSPACE/assets/icons/256-apps-jmbde.png \
            ${APPIMAGE_DST_PATH}/
          if [ -f "${APPIMAGE_DST_PATH}/lib/x86_64-linux-gnu/libxcb-glx.so.0" ]; then
            rm ${APPIMAGE_DST_PATH}/lib/x86_64-linux-gnu/libxcb-glx.so.0
          fi
          chmod +x ${APPIMAGE_DST_PATH}/usr/lib64/ld-*.so.*
          VERSION=${VERSION} $GITHUB_WORKSPACE/appimagetool ${APPIMAGE_DST_PATH}
          ls $GITHUB_WORKSPACE
          mv $GITHUB_WORKSPACE/jmbde-*-x86_64.AppImage $GITHUB_WORKSPACE/JMBDE-${VERSION}-qt${{matrix.qt_version}}.x86_64.AppImage
      - name: SHA256Sum of appimage package(daily build)
        run: |
          sha256sum $GITHUB_WORKSPACE/JMBDE-${VERSION}-qt${{matrix.qt_version}}.x86_64.AppImage
          sha256sum $GITHUB_WORKSPACE/JMBDE-${VERSION}-qt${{matrix.qt_version}}.x86_64.AppImage >$GITHUB_WORKSPACE/JMBDE-${VERSION}-qt${{matrix.qt_version}}.x86_64.AppImage.sha256sum
          echo "================appimage sha256sum download link==============="
          echo $(sh $GITHUB_WORKSPACE/scripts/upload_services/${UPLOAD_SERVICE}.sh $GITHUB_WORKSPACE/JMBDE-${VERSION}-qt${{matrix.qt_version}}.x86_64.AppImage.sha256sum)
          echo "======no operation for you can see link in the log console====="
      - name: Upload appimage package for daily build
        run: |
          echo "====================appimage download link====================="
          echo $(sh $GITHUB_WORKSPACE/scripts/upload_services/${UPLOAD_SERVICE}.sh $GITHUB_WORKSPACE/JMBDE-${VERSION}-qt${{matrix.qt_version}}.x86_64.AppImage)
          echo "======no operation for you can see link in the log console====="
      - name: Artifact Upload
        uses: actions/upload-artifact@v2
        with:
          name: Linux-distribution-artifact
          path: |
            ${{ github.workspace }}/JMBDE-*.x86_64.AppImage
            ${{ github.workspace }}/JMBDE-*.x86_64.AppImage.sha256sum

  flatpak-build:
    name: Build flatpak on ubuntu-20.04
    runs-on: ubuntu-20.04
    needs: [tests, getVersion]

    steps:
      - name: Checkout Source Code
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: master
      - name: Checkout Source code
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup flatpak
        run: |
          sudo apt-get -y -qq update
          sudo apt-get install -y flatpak flatpak-builder
      - name: Setup Flathub
        run: |
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak install -y --noninteractive flathub org.kde.Sdk//5.15 org.kde.Platform//5.15
      - name: Packaging flatpak
        run: |
          BUNDLE="org.jmuelbert.jmbde-QT.flatpak"
          MANIFEST_PATH=$GITHUB_WORKSPACE/packaging/flatpak/org.jmuelbert.jmbde-QT.yml
          RUNTIME_REPO="https://flathub.org/repo/flathub.flatpakrepo"
          APP_ID="org.jmuelbert.jmbde_QT"
          BRANCH="master"

          flatpak-builder --user --disable-rofiles-fuse --repo=repo --force-clean flatpak_app ${MANIFEST_PATH} --install-deps-from=flathub
          flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${APP_ID} ${BRANCH}
          mv $GITHUB_WORKSPACE/org.jmuelbert.jmbde-QT.flatpak $GITHUB_WORKSPACE/org.jmuelbert.jmbde-QT_${VERSION}.x86_64.flatpak

      - name: SHA256Sum of jmbde package(daily build)
        run: |
          sha256sum $GITHUB_WORKSPACE/org.jmuelbert.jmbde-QT_${VERSION}.x86_64.flatpak
          sha256sum $GITHUB_WORKSPACE/org.jmuelbert.jmbde-QT_${VERSION}.x86_64.flatpak > $GITHUB_WORKSPACE/org.jmuelbert.jmbde-QT_${VERSION}.x86_64.flatpak.sha256sum
          echo "================flatpak sha256sum download link===================="
          echo $(sh $GITHUB_WORKSPACE/scripts/upload_services/${UPLOAD_SERVICE}.sh $GITHUB_WORKSPACE/org.jmuelbert.jmbde-QT_${VERSION}.x86_64.flatpak.sha256sum)
          echo "========no operation for you can see link in the log console======="
      - name: Upload flatpak package(daily build)
        run: |
          echo "=====================flatpak download link====================="
          echo $(sh $GITHUB_WORKSPACE/scripts/upload_services/${UPLOAD_SERVICE}.sh $GITHUB_WORKSPACE/org.jmuelbert.jmbde-QT_${VERSION}.x86_64.flatpak)
          echo "======no operation for you can see link in the log console====="
      - name: Artifact Upload
        uses: actions/upload-artifact@v2
        with:
          name: Linux-distribution-artifact
          path: |
            ${{ github.workspace }}/org.jmuelbert.jmbde-QT_*.x86_64.flatpak
            ${{ github.workspace }}/org.jmuelbert.jmbde-QT_*.x86_64.flatpak.sha256sum

  snap-build:
    name: Build snap on ubuntu-20.04
    runs-on: ubuntu-20.04
    needs: [tests, getVersion]
    steps:
      - name: Checkout Source Code
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: master
      - name: Checkout Source code
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Packaging snap
        uses: snapcore/action-build@v1
        id: snapcraft
        with:
          snapcraft-args: --enable-experimental-extensions
      - name: Rename snap name
        shell: bash
        run: |
          mkdir -p $GITHUB_WORKSPACE/build
          cp ${{ steps.snapcraft.outputs.snap }} $GITHUB_WORKSPACE/build/${TARGET_NAME}-${VERSION}-${RELEASE}.amd64.snap
      - name: SHA256Sum of snap package(daily build)
        run: |
          sha256sum $GITHUB_WORKSPACE/build/${TARGET_NAME}-${VERSION}-${RELEASE}.amd64.snap
          sha256sum $GITHUB_WORKSPACE/build/${TARGET_NAME}-${VERSION}-${RELEASE}.amd64.snap > $GITHUB_WORKSPACE/build/${TARGET_NAME}-${VERSION}-${RELEASE}.amd64.snap.sha256sum
          echo "================snap sha256sum download link=================="
          echo $(sh $GITHUB_WORKSPACE/scripts/upload_services/${UPLOAD_SERVICE}.sh $GITHUB_WORKSPACE/build/${TARGET_NAME}-${VERSION}-${RELEASE}.amd64.snap.sha256sum)
          echo "=====no operation for you can see link in the log console====="
      - name: Upload snap package(daily build)
        run: |
          echo "=======================snap download link======================"
          echo $(sh $GITHUB_WORKSPACE/scripts/upload_services/${UPLOAD_SERVICE}.sh $GITHUB_WORKSPACE/build/${TARGET_NAME}-${VERSION}-${RELEASE}.amd64.snap)
          echo "======no operation for you can see link in the log console====="
      - name: Artifact Upload
        uses: actions/upload-artifact@v2
        with:
          name: Linux-distribution-artifact
          path: |
            ${{ github.workspace }}/build/${{ env.TARGET_NAME }}-*-${{ env.RELEASE }}.amd64.snap
            ${{ github.workspace }}/build/${{ env.TARGET_NAME }}-*-${{ env.RELEASE }}.amd64.snap.sha256sum

  macos-build:
    name: ${{ matrix.os }} -${{ matrix.qt_version}}-${{matrix.build_type}}

    strategy:
      matrix:
        qt_version: [5.15.2, 6.2.0]
        qt_target: [desktop]
        os: [macos-latest]
        build_type: [Release, RelWithDebInfo]
        name: [macos-12.0-x86_64]
        macos_target: [10.15]
        qt_arch: [clang_64]
        arch: [clang_64]
        cc: [clang]
        cxx: [clang++']
        generator: [-G 'Ninja']

      fail-fast: false

    runs-on: ${{ matrix.os }}
    needs: [tests]

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: macOS - ${{ matrix.qt_version }} - Build preparation - Install Packages
        run: |
          brew upgrade cmake
          cmake --version
          brew install ninja pkg-config

      - name: Get conan
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake $GITHUB_WORKSPACE \
            ${{matrix.generator}} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.macos_target }} \
            -DUSE_LAUNCHER_ABSOLUTE_PATH:BOOL=OFF \
            -DCMAKE_INSTALL_PREFIX:PATH=./app \
            -DBUILD_TESTING=OFF  \
            -DBUILD_TRANSLATIONS=ON \

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --target install --parallel $(sysctl -n hw.logicalcpu)

      - name: Package Qt
        working-directory: ${{runner.workspace}}/build
        run: |
          macdeployqt ./app/${{env.TARGET_NAME}}.app -qmldir=. -appstore-compliant -libpath=./app/${{env.TARGET_NAME}}.app/Contents/Frameworks -verbose=1 -dmg
          cp ./app/${{env.TARGET_NAME}}.dmg ./${{env.TARGET_NAME}}.dmg

      - name: Upload artifact for macOS - ${{ matrix.qt_version }}-${{matrix.build_type}}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TARGET_NAME }}-Qt${{ matrix.qt_version}}-${{matrix.build-type}}.dmg
          path: ${{ env.TARGET_NAME }}.dmg

      - name: Upload release for  macOS - ${{ matrix.qt_version }}-${{matrix.build_type}}
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{env.TARGET_NAME}}.dmg
          asset_name: ${{env.TARGET_NAME}}-Qt${{ matrix.qt_version}}-${{matrix.build_type}}.dmg
          tag: ${{ github.ref }}
          overwrite: true

  windows-build:
    name: ${{ matrix.platform }} ${{matrix.qt_version}}-${{ matrix.build_type}}
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        qt_version: [5.15.2, 6.2.0]
        build_type: [Release, RelWithDebInfo]
        qt_target: [desktop]
        platform: [windows-latest]
        name: [Windows 2019 MS Visual C]
        qt_arch: [win64_msvc2019_64]
        arch: [x64]
        artifact: [Windows-MSVC]
        pak_arch: [win64]
        cc: [cl]
        cxx: [cl]
      fail-fast: false
    needs: [tests]

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo GITHUB_REF | cut -d / -f 3)

      - name: Checkout Source Code
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Restoring submodules
        run: git submodule update --init

      - name: Install MSVC compiler
        uses: ilammy/msvc-dev-cmd@v1.10.0
        with:
          # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from Qv2ray-deps repo
          toolset: 14.2
          arch: ${{ matrix.pak_arch }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          dir: '${{ github.workspace }}/build/'
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Get conan
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Install Build deps
        run: |
          cinst png2ico

      - name: Configure
        shell: pwsh
        working-directory: build
        run: |
          cmake $env:GITHUB_WORKSPACE `
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}  `
            -DUSE_LAUNCHER_ABSOLUTE_PATH:BOOL=OFF  `
            -DCMAKE_INSTALL_PREFIX:PATH=./app `
            -DBUILD_TESTING=OFF  `
            -DBUILD_TRANSLATIONS=ON

      - name: Compile
        shell: pwsh
        working-directory: build
        run: cmake --build . --config ${{ matrix.build_type}} --target install --parallel $(nproc)

      - name: package
        working-directory: build
        env:
          archiveName: $TARGET_NAME.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory ${{ env.TARGET_NAME}}
          Copy-Item -PATH ./app/ -Destination ${{ env.archiveName }} -Recurse
          windeployqt --qmldir . ${{ env.archiveName }}/${{ env.TARGET_NAME}} ${{ env.archiveName }}/*.dll
          Compress-Archive -Path ${{ env.archiveName}} ${{ env.archiveName}}'.zip'

      - name: Upload Zip archive
        uses: actions/upload-artifact@v2
        env:
          archiveName: $TARGET_NAME.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        with:
          name: $TARGET_NAME-win-${{matrix.qt_version}}-${{matrix.arch}}-${{ matrix.build_type }}.zip
          path: ${{ env.archiveName}}.zip

      - name: uploadZipRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v1-release
        env:
          archiveName: $TARGET_NAME.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.archiveName }}.zip
          asset_name: $TARGET_NAME-win-${{matrix.qt_version}}-${{matrix.arch}}-${{ matrix.build_type }}.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: build ISS-Installer
        working-directory: build
        shell: bash
        run: |
          mkdir -p $GITHUB_WORKSPACE/build/Package
          mkdir -p $GITHUB_WORKSPACE/build/Package/${TARGET_NAME}.${VERSION}.Windows-${CONFIG_ARCH}
          cp -rv ./app/* ./Package/${TARGET_NAME}.${VERSION}.Windows-${CONFIG_ARCH}
          windeployqt --qmldir . ./Package/${TARGET_NAME}.${VERSION}.Windows-${CONFIG_ARCH}/bin/${TARGET_NAME}.exe ./Package/${TARGET_NAME}.${VERSION}.Windows-${CONFIG_ARCH}/bin/${TARGET_NAME}models.dll ./Package/${TARGET_NAME}.${VERSION}.Windows-${CONFIG_ARCH}/bin/${TARGET_NAME}quick.dll ./Package/${TARGET_NAME}.${VERSION}.Windows-${CONFIG_ARCH}/bin/${TARGET_NAME}widgets.dll
          if [ "${QT_MAIN_VER6}" = true ]; then
            iscc $GITHUB_WORKSPACE/packaging/win/installer_Qt6_x64.iss -DMyAppVersion=${VERSION} -DMyProjectRoot=$(pwd) -DMyOutRoot=$GITHUB_WORKSPACE/build/${TARGET_NAME}
          else
            iscc $GITHUB_WORKSPACE/packaging/win/installer_Qt5_x64.iss -DMyAppVersion=${VERSION} -DMyProjectRoot=$(pwd) -DMyOutRoot=$GITHUB_WORKSPACE/build/${TARGET_NAME}
          fi

      - name: Upload ISS archive
        uses: actions/upload-artifact@v2
        env:
          archiveName: $TARGET_NAME.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        with:
          name: $TARGET_NAME-win-${{matrix.qt_version}}-${{matrix.arch}}-${{ matrix.build_type }}.exe
          path: ${{ env.archiveName}}.exe

      - name: upload ISS Release
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v1-release
        env:
          archiveName: $TARGET_NAME.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.archiveName }}.exe
          asset_name: $TARGET_NAME-win-${{matrix.qt_version}}-${{matrix.arch}}-${{ matrix.build_type }}.exe
          tag: ${{ github.ref }}
          overwrite: true

      - name: CPack
        env:
          TYPE: ${{matrix.build_type}}
          QT_MAIN_VER6: ${{ contains(matrix.qt_version, '6')}}
          CONFIG_ARCH: ${{matrix.arch}}
          ARCHIVE_NAME: $GITHUB_WORKSPACE/build/Package/${TARGET_NAME}.${VERSION}.Windows-${CONFIG_ARCH}
        working-directory: build
        shell: bash
        run: |
          if [ "${TYPE}" = "installer" ]; then
            cpack -G WIX -B "$env:GITHUB_WORKSPACE\build\Package"
            #
            mkdir -p $GITHUB_WORKSPACE/build/Package
            mkdir -p $GITHUB_WORKSPACE/build/Package/${TARGET_NAME}.${VERSION}.Windows-${CONFIG_ARCH}
            cp -rv ./app/* ./Package/${TARGET_NAME}.${VERSION}.Windows-${CONFIG_ARCH}
            windeployqt --qmldir . ./Package/${TARGET_NAME}.${VERSION}.Windows-${CONFIG_ARCH}/bin/${TARGET_NAME}.exe ./Package/${TARGET_NAME}.${VERSION}.Windows-${CONFIG_ARCH}/bin/${TARGET_NAME}models.dll ./Package/${TARGET_NAME}.${VERSION}.Windows-${CONFIG_ARCH}/bin/${TARGET_NAME}quick.dll ./Package/${TARGET_NAME}.${VERSION}.Windows-${CONFIG_ARCH}/bin/${TARGET_NAME}widgets.dll
            if [ "${QT_MAIN_VER6}" = true ]; then
              echo "---------------------"
              cat ./Package/_CPack_Packages/win64/WIX/wix.log
              echo "---------------------"
            else
              cpack -G WIX -B "$env:GITHUB_WORKSPACE\build\Package" --verbose
              echo "---------------------"
              cat ./Package/_CPack_Packages/win64/WIX/wix.log
              echo "---------------------"
            fi
            mkdir -p ./Package/_CPack_Packages
          else
            cpack -G ZIP -B $GITHUB_WORKSPACE/build/Package
          fi

      - name: SHA256Sum of Windows installer(daily build)
        if: matrix.type == 'installer'
        shell: bash
        run: |
          sha256sum $GITHUB_WORKSPACE/build/Package/installer/jmbde-${VERSION}-${{ matrix.pak_arch }}-Qt${{matrix.qt_version}}.exe
          sha256sum $GITHUB_WORKSPACE/build/Package/installer/jmbde-${VERSION}-${{ matrix.pak_arch }}-Qt${{matrix.qt_version}}.exe > $GITHUB_WORKSPACE/build/Package/installer/jmbde-${VERSION}-${{ matrix.pak_arch }}-Qt${{matrix.qt_version}}.exe.sha256sum
          python -m pip install -U -q requests
          echo "============Windows installer sha256sum download link============"
          echo "=======no operation for you can see link in the log console====="

      - name: Upload Windows installer(daily build)
        if: matrix.type == 'installer'
        shell: bash
        run: |
          python -m pip install -U -q requests
          echo "================Windows installer download link================"
          echo "=====no operation for you can see link in the log console====="

  build_GH_Pages:
    name: Build GH Pages
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 2
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      - name: Set up Python
        uses: actions/setup-python@v2.3.1
        with:
          python-version: '3.10'

      - name: Install sphinx
        run: |
          pip install -r docs/requirements.txt
      - name: Running the Sphinx to gh-pages Action
        run: |
          sphinx-build docs docs/_build

      - name: Upload documentation
        uses: actions/upload-artifact@v2.2.4
        with:
          name: docs
          path: docs/_build

  tests:
    name: Tests on ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.4.0

      - name: Install Dependencies for ${{ runner.os }}
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
            python3 \
            python3-pip \
            fuse \
            patchelf \
            build-essential \
            extra-cmake-modules \
            appstream \
            hicolor-icon-theme \
            fcitx-frontend-qt5 \
            openssl \
            ca-certificates

      - name: Xvfb install and run for ${{ runner.os }}
        run: |
          sudo apt-get install -y xvfb
          Xvfb -ac ${{ env.DISPLAY }} -screen 0 1280x780x24 &

      - name: Get latest CMake
        uses: lukka/get-cmake@latest

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ env.TEST_QT_VERSION }}
          target: ${{ env.TEST_QT_TARGET }}
          arch: ${{ env.TEST_QT_ARCH }}
          dir: '${{ github.workspace }}/build/'
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Get conan
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake $GITHUB_WORKSPACE \
            ${{matrix.config.generator}} \
            -DCMAKE_BUILD_TYPE=$TEST_BUILD_TYPE \
            -DCMAKE_INSTALL_PREFIX:PATH=./app \
            -DBUILD_TESTING=OFF  \
            -DBUILD_TRANSLATIONS=ON \

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE -j2 --target install

      # Linux
      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -VV -C $TEST_BUILD_TYPE

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repository
        uses: actions/checkout@v2.4.0

      # - name: Download coverage data
      # uses: actions/download-artifact@v2.1.0
      #  with:
      #   name: coverage-data

      - name: Combine coverage data and dispay human readable report
        run: |
          echo "Build report"

      - name: Create coverage report
        run: echo "Create coverage report"

  releaseNotes:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Build Releasenotes
        id: github_releasenotes
        uses: release-drafter/release-drafter@v5.15.0
        with:
          publish: "${{ steps.check-version.outputs.tag != '' }}"
          tag: '${{ steps.check-version.outputs.tag }}'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

  changeLog:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Build ChangeLog
        id: github_changelog
        uses: mikepenz/release-changelog-builder-action@v2.7.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.check-version.outputs }}
        env:
          GITHUB_TOKEN: $${{ secrets.GITHUB_TOKEN }}

  deployGHPages:
    runs-on: ubuntu-latest
    needs: build_GH_Pages
    steps:
      - name: Download Artifact with Pages
        uses: actions/download-artifact@v2.1.0
        with:
          name: docs
          path: docs/_build

      - name: Deploy to GitHub Pages
        uses: Cecilapp/GitHub-Pages-deploy@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          email: juergen.muelbert@gmail.com
          build_dir: docs/_build

  deployPrereleases:
    name: Deploy Pre-Release
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-20.04
    environment: PreRelease
    needs:
      - tests
      - appimage-build
      - flatpak-build
      - snap-build
      - macos-build
      - windows-build
      - deployGHPages

    steps:
      - name: Restore Builds
        uses: actions/download-artifact@v2.1.0
        with:
          name: appimageqt6
          path: dist

      - name: Publish
        run: |
          echo "Publish Pre-Release"

  deploy:
    name: Deploy Release on PyPi
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    environment: Release
    needs:
      - tests
      - appimage-build
      - flatpak-build
      - macos-build
      - snap-build
      - windows-build
      - changeLog
      - releaseNotes
      - deployGHPages

    steps:
      - name: Restore Builds
        uses: actions/download-artifact@v2.1.0
        with:
          name: appimageqt6
          path: dist

      - name: Publish
        run: |
          echo "Publish Pre-Release"
