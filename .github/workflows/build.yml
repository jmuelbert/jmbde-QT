---
name: Build

on:
  push:
    branches: [master, improve_build-workflow]
    paths:
      - cmake/**
      - src/**
      - CMakeLists.txt
      - '.github/workflows/build.yml'
      - 'snap/**'
      - 'packaging/flatpak/*.yml'
    tags:
      - '*'
  pull_request:
    branches:
      - 'master'
    types: [opened, reopened]
    paths:
      - cmake/**
      - src/**
      - CMakeLists.txt'
      - '.github/workflows/build.yml'
      - 'snap/**'
      - 'packaging/flatpak/*.yml'
  release:
    types: [published]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  TARGET_NAME: jmbde
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: '${{ github.workspace }}/conan-cache'
  CONAN_USER_HOME_SHORT: '${{ github.workspace }}/conan-cache/short'

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: 'üêß Ubuntu 18.04',
              os: ubuntu-18.04,
              conan_home: '/home/runner/work/conan/release',
              conan_home_short: '/home/runner/work/conan/release/short',
              platform: ubuntu-latest,
              qt_version: 6.2.2,
              qt_target: desktop,
              qt_arch: gcc_64,
              arch: amd64,
              artifact: Ubuntu-gcc,
              cc: gcc-9,
              cxx: g++-9,
              cmake_generator: Ninja,
            }
          - {
              name: 'üêß Ubuntu 20.04',
              os: ubuntu-20.04,
              conan_home: '/home/runner/work/conan/release',
              conan_home_short: '/home/runner/work/conan/release/short',
              platform: ubuntu-latest,
              qt_version: 6.2.2,
              qt_target: desktop,
              qt_arch: gcc_64,
              arch: amd64,
              artifact: Ubuntu-gcc,
              cc: clang-10,
              cxx: clang-10++,
              cmake_generator: Ninja,
            }
          - {
              name: 'üßä Windows 2019',
              os: windows-2019,
              conan_home: "C:\\release",
              conan_home_short: "C:\\release\\short",
              platform: windows-latest,
              qt_version: 6.2.2,
              qt_target: desktop,
              qt_arch: win64_msvc2019_64,
              arch: x64,
              artifact: Windows-MSVC,
              pak_arch: win64,
              cc: cl,
              cxx: cl,
              cmake_generator: Ninja,
            }
          - {
              name: 'üçé MacOS 10.15',
              os: macos-10.15,
              conan_home: '/Users/runner/work/conan/release',
              conan_home_short: '/Users/runner/work/conan/release/short',
              platform: macos-latest,
              macos_target: 10.15,
              qt_version: 6.2.2,
              qt_target: desktop,
              qt_arch: clang_64,
              arch: clang_64,
              cc: clang,
              cxx: clang++,
              cmake_generator: Ninja,
            }
          - {
              name: 'üçé MacOS 11',
              os: macos-11,
              conan_home: '/Users/runner/work/conan/release',
              conan_home_short: '/Users/runner/work/conan/release/short',
              platform: macos-latest,
              macos_target: 10.15,
              qt_version: 6.2.2,
              qt_target: desktop,
              qt_arch: clang_64,
              arch: clang_64,
              cc: clang,
              cxx: clang++,
              cmake_generator: Ninja,
            }

    needs: [tests]
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    env:
      CONAN_SYSREQUIRES_MODE: enabled
      CONAN_USER_HOME: '${{ matrix.config.conan_home }}'
      CONAN_USER_HOME_SHORT: '${{ matrix.config.conan_home_short }}'
      INSTALL_DIR: ${{ github.workspace }}/install/

    steps:
      - name: 'üß∞ Checkout Source Code'
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 10

      - name: 'üß∞ Checkout Source Code'
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 'üß∞ Restoring submodules'
        run: git submodule update --init

      - name: '‚öôÔ∏è Get the version'
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      # Check if GitHub Cache has it, because that's free
      - name: '‚öôÔ∏è Using the builtin GitHub Cache Action for .conan'
        id: github-cache-conan
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-index-modules
        with:
          path: ${{ env.CONAN_USER_HOME }}
          key: host-${{ runner.os }}-target-${{ runner.os }}-${{ matrix.config.os }}-${{ hashFiles('conanfile.py') }}

      - name: 'üçé ‚öôÔ∏è Install dependencies for macos'
        if: startsWith(matrix.config.os,'macos')
        run: |
          brew install ninja ccache

      - name: 'üßä ‚öôÔ∏è Install dependencies for windows'
        if: startsWith(matrix.config.os,'windows')
        run: |
          choco install png2ico
          choco install ninja

      - name: 'üêß ‚öôÔ∏è Install dependencies for ubuntu'
        if: startsWith(matrix.config.os, 'ubuntu')
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
            ninja-build patchelf ccache

      - name: 'üêß ‚öôÔ∏è Install go-appimage tool for ubuntu'
        if: startsWith(matrix.config.os, 'ubuntu')
        # Will not use linuxdeployqt anymore, because it suopprts currently still-supported mainstream distribution,
        # which is glibc 2.23. For more information, please see https://github.com/probonopd/linuxdeployqt/issues/340.
        # Will try new tool https://github.com/probonopd/go-appimage written in golang by probonopd.
        run: |
          wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases -O - \
          | grep "appimagetool-.*-${APPIMAGETOOL_ARCH}.AppImage" | head -n 1 | cut -d '"' -f 2) -O appimagetool
          chmod +x appimagetool
        env:
          APPIMAGETOOL_ARCH: x86_64

      # MacOS 10.15 - XCode version 11.7
      # MacOS 11.1  - XCode version 12.4
      # MacOS 11.3  - XCode version 12.5
      # MacOS 12.0  - XCode version 13.0
      - name: 'üçé ‚öôÔ∏è Get right SDK for MacOS 11'
        if: startsWith(matrix.config.os, 'macos-11')
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '12.5'

      - name: 'üßä ‚öôÔ∏è Configure MSVC'
        if: startsWith(matrix.config.os,'windows')
        uses: ilammy/msvc-dev-cmd@v1
        with:
          # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build
          toolset: 14.2
          arch: ${{ matrix.config.pak_arch }}

      - name: '‚öôÔ∏è Install Conan'
        uses: turtlebrowser/get-conan@main

      - name: '‚öôÔ∏è Check Tool Versions'
        run: |
          echo "${{ steps.conan.outputs.version }}"
          conan    --version
          cmake    --version
          c++      --version

      - name: '‚öôÔ∏è Cache Qt'
        id: cache-qt
        uses: actions/cache@v1 # not v2!
        with:
          path: '${{ github.workspace }}/Qt'
          key: QtCache-${{ matrix.config.platform }}-${{ matrix.config.qt_arch }}-${{ matrix.config.qt_version }}

      - name: '‚öôÔ∏è Install Qt'
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.config.qt_version }}
          target: ${{ matrix.config.qt_target }}
          arch: ${{ matrix.config.qt_arch }}
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: '‚öôÔ∏è CMake Configure'
        run: cmake --preset=default

      - name: '‚öôÔ∏è Create Build Environment'
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: 'üçé üöß Configure cmake build'
        if: startsWith(matrix.config.os,'macos')
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake $GITHUB_WORKSPACE \
            -G ${{matrix.config.cmake_generator}} \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.config.macos_target }} \
            -DUSE_LAUNCHER_ABSOLUTE_PATH:BOOL=OFF \
            -DCMAKE_INSTALL_PREFIX:PATH=./app \
            -DBUILD_TESTING=OFF  \
            -DBUILD_TRANSLATIONS=ON \

      - name: 'üßä üöß Configure cmake build'
        if: startsWith(matrix.config.os,'windows')
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake $GITHUB_WORKSPACE \
            -G ${{ matrix.cmake_generator }} \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}  \
            -DCMAKE_INSTALL_PREFIX:PATH=./programs \
            -DBUILD_TESTING=OFF  \
            -DBUILD_TRANSLATIONS=ON

      - name: 'üêß üöß Configure cmake build'
        if: startsWith(matrix.config.os, 'ubuntu')
        shell: bash
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx}}
        run: |
          APPIMAGE_DST_PATH=$GITHUB_WORKSPACE/${TARGET_NAME}.AppDir
          mkdir -p ${APPIMAGE_DST_PATH}
          cd $GITHUB_WORKSPACE
          cmake -G ${{matrix.config.cmake_generator}} \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} \
              -DCMAKE_INSTALL_PREFIX:PATH="${APPIMAGE_DST_PATH}/usr" \
              -DBUILD_TESTING=OFF \
              -DBUILD_TRANSLATIONS=ON

      - name: 'üçé üöß Build and Install'
        if: startsWith(matrix.config.os,'macos')
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --target install --parallel $(sysctl -n hw.logicalcpu)

      - name: 'üßä üöß Build and Install'
        if: startsWith(matrix.config.os,'windows')
        shell: pwsh
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --config ${{ env.BUILD_TYPE }} --target install --parallel $(nproc)

      - name: 'üêß üöß Build and Install'
        if: startsWith(matrix.config.os, 'ubuntu')
        shell: bash
        run: |
          cmake --build . --config ${{env.BUILD_TYPE}} --target install --parallel $(sysctl -n hw.logicalcpu)

      - name: 'üçé üì¶ Package application (macdeployqt and zipfile)'
        if: startsWith(matrix.config.os,'macos')
        working-directory: ${{runner.workspace}}/build
        run: |
          macdeployqt ./app/${{env.TARGET_NAME}}.app -qmldir=. -appstore-compliant -libpath=./app/${{env.TARGET_NAME}}.app/Contents/Frameworks -verbose=1 -dmg
          cp ./app/${{env.TARGET_NAME}}.dmg ${{runner.workspace}}/${{env.TARGET_NAME}}.dmg

          # ZIP application "%AppName%-%Version%-macOS.zip"
          ditto -c -k --sequesterRsrc --keepParent "bin/${{env.TARGET_NAME}}.app" ${{env.TARGET_NAME}}.zip
          cp ./${{env.TARGET_NAME}}.zip ${{runner.workspace}}/${{env.TARGET_NAME}}.zip

      - name: 'üçé üì§ Upload dmg artifact for macOS - ${{ matrix.qt_version }}'
        if: startsWith(matrix.config.os,'macos')
        uses: actions/upload-artifact@v2
        with:
          name: ${env.TARGET_NAME}-dmg
          path: ${{runner.workspace}}/${{ env.TARGET_NAME }}.dmg

      - name: 'üçé üì§ Upload zip artifact for macOS - ${{ matrix.qt_version }}-${env.BUILD_TYPE}}'
        if: startsWith(matrix.config.os,'macos')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TARGET_NAME }}-macos-zip
          path: ${{runner.workspace}}/${{ env.TARGET_NAME }}*.zip

      # Copy Qt DLLs, compiler runtime & application icon
      - name: 'üßä üì¶ Package application (windeployqt)'
        if: startsWith(matrix.config.os, 'windows')
        working-directory: ${{runner.workspace}}/build
        shell: pwsh
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.qt_arch }}
        run: |
          New-Item -ItemType Directory ${{ env.archiveName }}
          Copy-Item -PATH ./programs/* -Destination ${{ env.archiveName }} -Recurse
          Get-ChildItem ${{ env.archiveName }}/bin
          windeployqt --qmldir . ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}.exe ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}models.dll ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}widgets.dll

      - name: 'üßä Compress Zip Archive'
        if: startsWith(matrix.config.os,'windows')
        working-directory: ${{runner.workspace}}/build
        shell: pwsh
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.qt_arch }}
        run: |
          Compress-Archive -Path ${{ env.archiveName}}/bin -DestinationPath ${{runner.workspace}}/${{ env.archiveName}}.'zip'

      - name: 'üßä üì§ Upload Zip archive'
        if: startsWith(matrix.config.os,'windows')
        uses: actions/upload-artifact@v2
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.qt_arch }}
        with:
          name: ${{ env.TARGET_NAME}}-win-zip
          path: ${{ runner.workspace}}/${{ env.archiveName}}.zip

      - name: 'üßä üì¶ Make ISS-Installer for ${{ matrix.qt_version }}'
        if: startsWith(matrix.config.os,'windows')
        shell: bash
        working-directory: ${{runner.workspace}}/build
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.qt_arch }}
        run: |
          cp $GITHUB_WORKSPACE/packaging/win/installer_Qt6_x64.iss .
          cp $GITHUB_WORKSPACE/packaging/win/License.rtf .
          cp $GITHUB_WORKSPACE/assets/jmbde-icon.ico .
          cp $GITHUB_WORKSPACE/README.md .
          cp $GITHUB_WORKSPACE/README_en.md .
          cp $GITHUB_WORKSPACE/AUTHORS .
          cp $GITHUB_WORKSPACE/LICENSE .
          ls -la
          ls -la ${archiveName}
          iscc ./installer_Qt6_x64.iss -DMyAppVersion=${{ steps.get_version.outputs.VERSION }} -DMyProjectRoot=$(pwd) -DMyOutRoot=${archiveName}/bin

      - name: 'üßä üì§ Upload artifact: ISS Installer'
        if: startsWith(matrix.config.os,'windows' )
        uses: actions/upload-artifact@v2
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.qt_arch }}
        with:
          name: ${{ env.TARGET_NAME}}-win
          path: ${{runner.workspace}}/${{ env.archiveName}}.exe

      - name: 'üêß üì¶ Create AppImage'
        if: startsWith(matrix.config.os, 'ubuntu')
        shell: bash
        run: |
          APPIMAGE_DST_PATH=$GITHUB_WORKSPACE/${TARGET_NAME}.AppDir

          cd $GITHUB_WORKSPACE

          $GITHUB_WORKSPACE/appimagetool -s deploy ${APPIMAGE_DST_PATH}/usr/share/applications/io.github.jmuelbert.jmbde.desktop
          mkdir -p ${APPIMAGE_DST_PATH}/usr/plugins/platforminputcontexts

          if [ -f "${APPIMAGE_DST_PATH}/lib/x86_64-linux-gnu/libxcb-glx.so.0" ]; then
            rm ${APPIMAGE_DST_PATH}/lib/x86_64-linux-gnu/libxcb-glx.so.0
          fi
          chmod +x ${APPIMAGE_DST_PATH}/usr/lib64/ld-*.so.*
          $GITHUB_WORKSPACE/appimagetool ${APPIMAGE_DST_PATH}
          cp $GITHUB_WORKSPACE/jmbde-*-x86_64.AppImage ${{runner.workspace}}/${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.x86_64.AppImage
          ls ${{runner.workspace}}

      - name: 'üêß üì§ Upload artifact: AppImage'
        if: startsWith(matrix.config.os, 'ubuntu')
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.TARGET_NAME}}.AppImage
          path: |
            ${{runner.workspace}}/${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.x86_64.AppImage

  flatpak-build:
    name: 'üêß Build flatpak on ubuntu-20.04'
    runs-on: ubuntu-20.04
    needs: [tests]

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: 'üß∞ Checkout Source Code'
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: master

      - name: 'üß∞ Checkout Source Code'
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: '‚öôÔ∏è Setup flatpak'
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
              elfutils flatpak flatpak-builder ccache

      - name: '‚öôÔ∏è Setup Flathub'
        run: |
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak install -y --noninteractive flathub org.kde.Sdk//5.15 org.kde.Platform//5.15

      - name: 'üì¶ Create flatpak'
        run: |
          BUNDLE="org.jmuelbert.jmbde-QT.flatpak"
          MANIFEST_PATH=$GITHUB_WORKSPACE/packaging/flatpak/org.jmuelbert.jmbde-QT.yml
          RUNTIME_REPO="https://flathub.org/repo/flathub.flatpakrepo"
          APP_ID="org.jmuelbert.jmbde_QT"
          BRANCH="master"

          flatpak-builder --user --disable-rofiles-fuse --repo=repo --force-clean flatpak_app ${MANIFEST_PATH} --install-deps-from=flathub
          flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${APP_ID} ${BRANCH}
          cp $GITHUB_WORKSPACE/org.jmuelbert.jmbde-QT.flatpak ${{runner.workspace}}/org.jmuelbert.jmbde-QT_${{ steps.get_version.outputs.VERSION }}.x86_64.flatpak

      - name: 'üì§ Upload artifact: FlatPak'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TARGET_NAME }}.flatpak
          path: |
            ${{runner.workspace}}/org.jmuelbert.jmbde-QT_${{ steps.get_version.outputs.VERSION }}.x86_64.flatpak

  snap-build:
    name: 'üêß Build snap on ubuntu-20.04'
    runs-on: ubuntu-20.04
    needs: [tests]

    steps:
      - name: '‚öôÔ∏è Get the version'
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: 'üß∞ Checkout Source Code'
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: master

      - name: 'üß∞ Checkout Source Code'
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 'üì¶ Create snap'
        uses: snapcore/action-build@v1
        id: snapcraft
        with:
          snapcraft-args: --enable-experimental-extensions

      - name: '‚öôÔ∏è Rename snap name'
        shell: bash
        run: |
          mkdir -p $GITHUB_WORKSPACE/build
          cp ${{ steps.snapcraft.outputs.snap }} ${{runner.workspace}}/${{ env.TARGET_NAME }}-${{ steps.get_version.outputs.VERSION }}.amd64.snap
          pwd
          ls ${{runner.workspace}}

      - name: 'üì§ Upload artifact: SnapPack'
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.TARGET_NAME}}.snap
          path: |
            ${{runner.workspace}}/${{ env.TARGET_NAME }}-${{ steps.get_version.outputs.VERSION }}.amd64.snap

  source-archive:
    name: All Source Files
    runs-on: ubuntu-latest
    needs: tests

    steps:
      - name: 'üß∞ Checkout Source Code'
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: 'üß∞ Restoring submodules'
        run: git submodule update --init

      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Create 7z source-archive
        uses: DuckSoft/create-7z-action@v1.0
        with:
          pathSource: ./
          pathTarget: ./jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: source-files
          path: jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z

  tests:
    name: Tests on ubuntu-latest
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # Path to the CMake build directory.
      build: '${{ github.workspace }}/build'
      CONAN_SYSREQUIRES_MODE: 'enabled'
      SONAR_SCANNER_VERSION: 4.6.2.2472
      SONAR_SERVER_URL: 'https://sonarcloud.io'
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed

    strategy:
      matrix:
        os: [ubuntu-latest]
        platform: [ubuntu-latest]
        name: [Ubuntu-20.04 gcc-10]
        qt_version: [6.2.2]
        qt_target: [desktop]
        qt_arch: [gcc_64]
        arch: [amd64]
        artifact: [Ubuntu-gcc]
        cmake_generator: [Ninja]
        cc: [clang-10]
        cxx: [clang++-10]
        build_type: [Debug]
        coverage: [OFF]
        display: [':99']
      fail-fast: true

    steps:
      - name: 'üß∞ Checkout Source Code'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: '‚öôÔ∏è Install dependencies'
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
                  lcov ccache libtbb-dev tree

      - name: Install gcovr
        run: pip3 install gcovr

      - name: '‚öôÔ∏è Set up JDK 11'
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: '‚öôÔ∏è Cache Conan packages'
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-modules
        with:
          path: |
            ${{ env.CONAN_USER_HOME }}
            ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.BUILD_TYPE }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/Conan.cmake') }}

      - name: '‚öôÔ∏è Cache SonarCloud packages'
        uses: actions/cache@v2
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v2
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

      - name: Install GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 11
          platform: x64

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v1.12
        with:
          cmake-version: '3.22.x'

      - name: '‚öôÔ∏è Cache Qt'
        id: cache-qt
        uses: actions/cache@v1 # not v2!
        with:
          path: '${{ github.workspace }}/Qt'
          key: QtCache-${{ matrix.platform }}-${{ matrix.qt_arch }}-${{ matrix.qt_version }}

      - name: '‚öôÔ∏è Install Qt'
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: '‚öôÔ∏è Get conan'
        uses: turtlebrowser/get-conan@main

      - name: Xvfb run for ${{ runner.os }}
        run: |
          Xvfb -ac ${{ matrix.display }} -screen 0 1280x780x24 &

      - name: Check Tool Versions
        run: |
          conan    --version
          cmake    --version
          c++      --version

      - name: Configure Conan
        run: |
          conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: CMake Configure
        run: cmake --preset=default

      - name: CMake Build
        run: build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build --preset=default

      - name: CTest
        run: ctest --preset=default
        continue-on-error: true

      - name: Allow failures
        run: true # https://github.com/actions/toolkit/issues/399#issuecomment-1058231820

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.host.url="${{ env.SONAR_SERVER_URL }}" --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"

      - name: View Source Tree
        run: tree

      - name: CodeCoverage
        if: ${{ matrix.coverage == 'ON' && matrix.build_type == 'Debug' && matrix.cxx != 'clang-10++'}}
        # working-directory: ${{runner.workspace}}/build
        shell: bash
        run: |
          ls -la $GITHUB_WORKSPACE
          lcov -d $GITHUB_WORKSPACE -c -o $GITHUB_WORKSPACE/coverage.info
          lcov -r $GITHUB_WORKSPACE/coverage.info "*Qt*.framework*" "*Xcode.app*" "*.moc" "*moc_*.cpp" "*/test/*" "*Qt*" "*v1*" -o $GITHUB_WORKSPACE/coverage.info 
          lcov --list $GITHUB_WORKSPACE/coverage.info
          bash <(curl -s https://codecov.io/bash) -f $GITHUB_WORKSPACE/coverage.info || echo "Codecov did not collect coverage reports"

  releaseNotes:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: Build Releasenotes
        id: github_releasenotes
        uses: release-drafter/release-drafter@v5
        with:
          publish: "${{ steps.check-version.outputs.tag != '' }}"
          tag: '${{ steps.check-version.outputs.tag }}'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

  changeLog:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: Build ChangeLog
        id: github_changelog
        uses: mikepenz/release-changelog-builder-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.check-version.outputs }}
        env:
          GITHUB_TOKEN: $${{ secrets.GITHUB_TOKEN }}

  build_GH_Pages:
    name: Build GH Pages
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: 'üß∞ Checkout Source Code'
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: 'üß∞ Fetch all history for all tags and branches'
        run: git fetch --prune --unshallow

      - name: Install sphinx
        run: |
          pip3 install -r docs/requirements.txt
      - name: Running the Sphinx to gh-pages Action
        run: |
          sphinx-build docs docs/_build

      - name: Upload documentation
        uses: actions/upload-artifact@v2
        with:
          name: docs
          path: docs/_build

  deployGHPages:
    runs-on: ubuntu-latest
    needs: build_GH_Pages
    steps:
      - name: Download Artifact with Pages
        uses: actions/download-artifact@v2
        with:
          name: docs
          path: docs/_build

      - name: Deploy to GitHub Pages
        uses: Cecilapp/GitHub-Pages-deploy@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          email: juergen.muelbert@gmail.com
          build_dir: docs/_build

  # Upload continous build
  upload-prereleases:
    name: 'üóÇ Create pre-release and upload artifacts'
    environment: PreRelease
    needs:
      - flatpak-build
      - snap-build
      - build
      - source-archive

    runs-on: ubuntu-latest

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: 'üì• Download artifacts'
        uses: actions/download-artifact@v2

      - name: 'üóÇ Inspect directory after downloading artifacts'
        run: ls -alFR

      - name: 'üì§ Upload Release: AppImage'
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.appimage
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.appimage
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: FlatPak'
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.flatpak
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.flatpak
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: snap'
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.amd64.snap
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.amd64.snap
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: macOS-zip'
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}${env.TARGET_NAME}-zip/${{env.TARGET_NAME}}.zip
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}-macos.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: macOS'
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}${env.TARGET_NAME}-dmg/${{env.TARGET_NAME}}.dmg
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: windows'
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.TARGET_NAME }}.exe
          asset_name: ${{ env.TARGET_NAME}}${{ steps.get_version.outputs.VERSION }}-win64.exe
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: zip for windows'
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.archiveName }}-win.zip
          asset_name: ${{ env.TARGET_NAME}}-win-${{ steps.get_version.outputs.VERSION }}-win.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload source archive
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z
          asset_name: jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z
          tag: ${{ github.ref }}
          overwrite: true

  # Upload continous build
  upload:
    name: 'üóÇ Create release and upload artifacts'
    environment: Release
    needs:
      - flatpak-build
      - snap-build
      - build
      - source-archive

    runs-on: ubuntu-latest
    steps:
      - name: 'üì• Download artifacts'
        uses: actions/download-artifact@v2
      - name: 'üóÇ Inspect directory after downloading artifacts'
        run: ls -alFR

      - name: 'üì§ Upload Release: AppImage'
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.appimage
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.appimage
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: FlatPak'
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.flatpak
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.flatpak
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: snap'
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.amd64.snap
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.amd64.snap
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: macOS-zip'
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}${env.TARGET_NAME}-zip/${{env.TARGET_NAME}}.zip
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}-macos.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: macOS'
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}${env.TARGET_NAME}-dmg/${{env.TARGET_NAME}}.dmg
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: windows'
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.TARGET_NAME }}.exe
          asset_name: ${{ env.TARGET_NAME}}${{ steps.get_version.outputs.VERSION }}-win64.exe
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: zip for windows'
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.archiveName }}-win.zip
          asset_name: ${{ env.TARGET_NAME}}-win-${{ steps.get_version.outputs.VERSION }}-win.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload source archive
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z
          asset_name: jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z
          tag: ${{ github.ref }}
          overwrite: true
