---
name: Building(CMake)

on:
  push:
    branches: [master]
    paths:
      - cmake/**
      - src/**
      - CMakeLists.txt
      - '.github/workflows/build.yml'
  pull_request:
    branches: [master]
    paths:
      - cmake/**
      - src/**
      - CMakeLists.txt'
      - '.github/workflows/build.yml'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug
  DISPLAY: ':99'
  CTEST_OUTPUT_ON_FAILURE: 1
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

jobs:
  build:
    name: ${{ matrix.config.name }}-Qt${{matrix.qt_version}}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        qt_version: [5.15.2, 6.1.0]
        qt_target: [desktop]
        config:
          - {
              os: windows-latest,
              name: 'Windows Latest MSVC',
              qt_arch: win64_msvc2019_64,
              arch: x64,
              artifact: 'Windows-MSVC',
              # generator: "-G'Visual Studio 16 2019' -A x64",
              generator: "-G 'Ninja'",
              pak_arch: win64,
              cc: 'cl',
              cxx: 'cl',
            }
          # - {
          #     os: windows-2019,
          #     artifact: 'Windows-MinGW',
          #     arch: x86,
          #     generator: "-G 'MinGW Makefiles'",
          #     qt_arch: win64_mingw81,
          #     qt_arch_install: msvc2019,
          #     pak_arch: win64,
          #     cc: 'gcc',
          #     cxx: 'g++',
          #   }
          - {
              os: ubuntu-latest,
              name: 'Ubuntu Latest clang',
              qt_arch: gcc_64,
              arch: amd64,
              artifact: 'Ubuntu-gcc',
              generator: "-G 'Ninja'",
              cc: 'clang',
              cxx: 'clang++',
              image_repo: jmuelbert/ci-building-images,
            }
          - {
              os: macos-latest,
              name: 'macos-12.0-x86_64',
              qt_arch: clang_64,
              arch: clang_64,
              cc: 'clang',
              cxx: 'clang++',
              generator: "-G 'Ninja'",
            }

      fail-fast: false

    steps:
      - name: Checkout Source Code
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      #          ref: master

      - name: Checkout Source Code
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      # Linux
      - name: Install Dependencies for ${{ runner.os }}
        if: runner.os == 'Linux'
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
            python3 \
            python3-pip \
            fuse \
            patchelf \
            build-essential \
            extra-cmake-modules \
            appstream \
            hicolor-icon-theme \
            fcitx-frontend-qt5 \
            openssl \
            ca-certificates

      - name: Xvfb install and run for ${{ runner.os }}
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y xvfb
          Xvfb -ac ${{ env.DISPLAY }} -screen 0 1280x780x24 &

      - name: Get latest CMake
        uses: lukka/get-cmake@latest

      # Windows
      - name: Install MSVC compiler for ${{ runner.os }}
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1.10.0
        with:
          # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from repo
          toolset: 14.2
          arch: x64

      - name:
          Build preparation for ${{ runner.os }} - ${{ matrix.config.qt_version }}  -
          Install Packages
        if: runner.os == 'Windows'
        run: |
          cinst png2ico

      - name:
          Build preparation for  ${{ runner.os }} - ${{ matrix.config.qt_version }} -
          Install Packages
        if: ${{ runner.os == 'macOS' }}
        run: |
          brew install ninja pkg-config

      # # Common
      # - name: Cache Qt
      #   id: cache-qt
      #   uses: actions/cache@v2.1.6
      #   with:
      #     path:
      #       ${{ runner.workspace}}/build/Qt/${{ matrix.qt_version }}/${{
      #       matrix.config.qt_arch }}
      #     key:
      #       ${{ runner.os }}-QtCache/${{ matrix.qt_version }}/${{ matrix.config.qt_arch
      #       }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.config.qt_arch }}
          dir: '${{ github.workspace }}/build/'
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Get conan
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake $GITHUB_WORKSPACE \
            ${{matrix.config.generator}} \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_INSTALL_PREFIX:PATH=./app \
            -DBUILD_TESTING=OFF  \
            -DBUILD_TRANSLATIONS=ON \

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE -j2 --target install

      # Linux
      - name: Test
        if: runner.os == 'Linux'
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -VV -C $BUILD_TYPE
