---
name: Building(CMake)

on:
  push:
    branches: [master]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    branches: [master]
    paths-ignore:
      - 'README.md'
      - 'LICENSE'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  linux-build:
    name: Ubuntu-Latest(Build)

    strategy:
      matrix:
        qt_version: [5.15.2, 6.1.0]
        config:
          - {
              name: ubuntu-20.04,
              os: ubuntu-latest,
              symbol: focal,
              arch: amd64,
              qt_arch: gcc_64,
              image_repo: jmuelbert/ci-building-images,
            }

      fail-fast: false

    runs-on: ${{ matrix.config.os }}

    steps:
      - name: Checkout Source code
        if: github.event_name == 'push'
        uses: actions/checkout@v2

      - name: Checkout Source code
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install Dependencies
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
            python3 \
            python3-pip \
            fuse \
            patchelf \
            cmake \
            extra-cmake-modules \
            build-essential \
            appstream \
            hicolor-icon-theme \
            fcitx-frontend-qt5 \
            openssl \
            ca-certificates
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2.1.5
        with:
          path: ../Qt
          key: QtCache-${{ matrix.config.name }}-${{ matrix.config.arch }}-${{matrix.qt_version }}

      - name: Installing Qt - ${{ matrix.config.name }}-${{ matrix.config.arch }}-v${{matrix.qt_version }}
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{  matrix.qt_version }}
          arch: ${{ matrix.config.qt_arch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Get conan
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Add Bincrafters Remote
        run: conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        #
        # We need to source the profile file to make sure conan is in PATH
        run: |
          cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE
      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C $BUILD_TYPE

  windows-build:
    env:
      VCINSTALLDIR: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/
      # Qt5_DIR: ${{ github.workspace }}\build\Qt\${{ matrix.qt_version }}\${{ matrix.config.qt_arch_install }}\lib\cmake\Qt5\
      # QTDIR: ${{ github.workspace }}\build\Qt\${{ matrix.qt_version }}\${{ matrix.config.qt_arch_install }}\
      # 2020.07
      VCPKG_VERSION: 56fffbe49dfb4dd8fae0940f272c5fd2b86be991
      VCPKG_PACKAGES: openssl-windows
      OPENSSL_ROOT_DIR: ${{ github.workspace }}\vcpkg\installed\${{ matrix.config.vcpkg_triplet }}\
    strategy:
      matrix:
        qt_version: [5.15.2, 6.1.0]
        qt_target: [desktop]
        config:
          - {
              os: windows-latest,
              arch: x64,
              generator: "-G'Visual Studio 16 2019' -A x64",
              vcpkg_triplet: x64-windows,
              qt_arch: win64_msvc2019_64,
              qt_arch_install: msvc2019_64,
              artifact: 'Windows-MSVC.tar.xz',
              pak_arch: win64,
              cc: 'cl',
              cxx: 'cl',
            }
          - {
              name: 'Windows 2019 MinGW',
              artifact: 'Windows-MinGW.tar.xz',
              os: windows-2019,
              cc: 'gcc',
              cxx: 'g++',
            }

      fail-fast: false

    runs-on: ${{ matrix.config.os }}

    steps:
      - name: Checkout Source Code
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      #          ref: master

      - name: Checkout Source Code
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install MSVC compiler
        uses: ilammy/msvc-dev-cmd@v1.9.0
        with:
          # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from repo
          toolset: 14.2
          arch: x64

      - name: Restore from cache and run vcpkg
        uses: lukka/run-vcpkg@v4
        with:
          vcpkgArguments: ${{env.VCPKG_PACKAGES}}
          vcpkgDirectory: '${{ github.workspace }}\vcpkg'
          appendedCacheKey: ${{ matrix.config.vcpkg_triplet }}
          vcpkgGitCommitId: ${{ env.VCPKG_VERSION }}
          vcpkgTriplet: ${{ matrix.config.vcpkg_triplet }}

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2.1.6
        with:
          path: ./build/Qt/${{ matrix.qt_version }}/${{ matrix.config.qt_arch_install }}
          key: ${{ runner.os }}-QtCache/${{ matrix.qt_ver }}/${{ matrix.config.qt_arch }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.config.qt_arch }}
          dir: '${{ github.workspace }}/build/'
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Get conan
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Add Bincrafters Remote
        shell: pwsh
        run: conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan

      - name: Install Build deps
        run: |
          cinst png2ico

      - name: Configure
        working-directory: build
        shell: pwsh
        run: |
          cmake ..  ${{matrix.config.generator}}  `
          -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"  `
          -DENABLE_OPENSSL=ON `
          -DCMAKE_BUILD_TYPE=$env:BUILD_TYPE  `
          -DRUN_IN_PLACE=${{ contains(matrix.type, 'portable') }}

      - name: Compile
        working-directory: build
        shell: pwsh
        run: cmake --build . --config $env:BUILD_TYPE
