---
name: Build

on:
  push:
    branches: [master, improve_build-workflow]
    paths:
      - cmake/**
      - src/**
      - CMakeLists.txt
      - '.github/workflows/build.yml'
      - 'snap/**'
      - 'packaging/flatpak/*.yml'
    tags:
      - '*'
  pull_request:
    branches:
      - 'master'
    types: [opened, reopened]
    paths:
      - cmake/**
      - src/**
      - CMakeLists.txt'
      - '.github/workflows/build.yml'
      - 'snap/**'
      - 'packaging/flatpak/*.yml'
  release:
    types: [published]
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  TARGET_NAME: jmbde
  BUILD_TYPE: RelWithDebInfo
  DISPLAY: ':99'
  CTEST_OUTPUT_ON_FAILURE: 1
  CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  QT5_VERSION: '5.15.2'
  QT6_VERSION: '6.2.0'
  TEST_QT_TARGET: 'desktop'
  TEST_QT_VERSION: '6.2.0'
  TEST_QT_ARCH: 'gcc_64'
  TEST_ARCH: 'amd_64'
  TEST_ARTIFACT: 'Ubuntu-gcc'
  TEST_CC: 'clang'
  TEST_CXX: 'clang++'
  TEST_BUILD_TYPE: Debug

jobs:
  appimage-build:
    name: 'üêß Build appimage on ${{ matrix.os }} for ${{ matrix.qt_version }}'

    runs-on: ${{ matrix.os }}
    needs: [tests]

    strategy:
      matrix:
        qt_target: [desktop]
        os: [ubuntu-latest]
        qt_version: [6.2.0]
        qt_arch: [gcc_64]
        arch: [amd64]
        artifact: [Ubuntu-gcc]
        cmake_generator: [Ninja]
        cc: [clang]
        cxx: [clang++]
      fail-fast: true

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: 'üß∞ Checkout Source Code'
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: '‚öôÔ∏è Install dependencies'
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
            python3 \
            python3-pip \
            fuse \
            patchelf \
            extra-cmake-modules \
            build-essential \
            appstream \
            hicolor-icon-theme \
            fcitx-frontend-qt5 \
            openssl \
            ca-certificates

      - name: Get latest CMake
        uses: lukka/get-cmake@latest

      - name: '‚öôÔ∏è Install Qt'
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Get conan
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: '‚öôÔ∏è Install go-appimage tool'
        # Will not use linuxdeployqt anymore, because it suopprts currently still-supported mainstream distribution,
        # which is glibc 2.23. For more information, please see https://github.com/probonopd/linuxdeployqt/issues/340.
        # Will try new tool https://github.com/probonopd/go-appimage written in golang by probonopd.
        run: |
          wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases -O - \
          | grep "appimagetool-.*-${APPIMAGETOOL_ARCH}.AppImage" | head -n 1 | cut -d '"' -f 2) -O appimagetool
          chmod +x appimagetool
        env:
          APPIMAGETOOL_ARCH: x86_64

      - name: 'üöß Compile application'
        shell: bash
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx}}
        run: |
          APPIMAGE_DST_PATH=$GITHUB_WORKSPACE/${TARGET_NAME}.AppDir
          mkdir -p ${APPIMAGE_DST_PATH}
          cd $GITHUB_WORKSPACE
          cmake -G ${{matrix.cmake_generator}} \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} \
              -DCMAKE_INSTALL_PREFIX:PATH="${APPIMAGE_DST_PATH}/usr" \
              -DBUILD_TESTING=OFF \
              -DBUILD_TRANSLATIONS=ON
          cmake --build . --config ${{env.BUILD_TYPE}} --target install --parallel $(sysctl -n hw.logicalcpu)

      - name: 'üì¶ Create AppImage'
        shell: bash
        run: |
          APPIMAGE_DST_PATH=$GITHUB_WORKSPACE/${TARGET_NAME}.AppDir
          cd $GITHUB_WORKSPACE

          $GITHUB_WORKSPACE/appimagetool -s deploy ${APPIMAGE_DST_PATH}/usr/share/applications/io.github.jmuelbert.jmbde.desktop
          mkdir -p ${APPIMAGE_DST_PATH}/usr/plugins/platforminputcontexts
          cp \
            $GITHUB_WORKSPACE/assets/icons/256-apps-jmbde.png \
            ${APPIMAGE_DST_PATH}/
          if [ -f "${APPIMAGE_DST_PATH}/lib/x86_64-linux-gnu/libxcb-glx.so.0" ]; then
            rm ${APPIMAGE_DST_PATH}/lib/x86_64-linux-gnu/libxcb-glx.so.0
          fi
          chmod +x ${APPIMAGE_DST_PATH}/usr/lib64/ld-*.so.*
          $GITHUB_WORKSPACE/appimagetool ${APPIMAGE_DST_PATH}
          mv $GITHUB_WORKSPACE/jmbde-*-x86_64.AppImage $GITHUB_WORKSPACE/${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}}.x86_64.AppImage

      - name: 'üì§ Upload artifact: AppImage'
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}-qt${{matrix.qt_version}}-Linux.AppImage
          path: |
            $GITHUB_WORKSPACE/${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}}.x86_64.AppImage

  flatpak-build:
    name: 'üêß Build flatpak on ubuntu-20.04'
    runs-on: ubuntu-20.04
    needs: [tests]

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: 'üß∞ Checkout Source Code'
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: master

      - name: 'üß∞ Checkout Source Code'
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup flatpak
        run: |
          sudo apt-get -y -qq update
          sudo apt-get install -y flatpak flatpak-builder

      - name: Setup Flathub
        run: |
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak install -y --noninteractive flathub org.kde.Sdk//5.15 org.kde.Platform//5.15

      - name: 'üì¶ Create flatpak'
        run: |
          BUNDLE="org.jmuelbert.jmbde-QT.flatpak"
          MANIFEST_PATH=$GITHUB_WORKSPACE/packaging/flatpak/org.jmuelbert.jmbde-QT.yml
          RUNTIME_REPO="https://flathub.org/repo/flathub.flatpakrepo"
          APP_ID="org.jmuelbert.jmbde_QT"
          BRANCH="master"

          flatpak-builder --user --disable-rofiles-fuse --repo=repo --force-clean flatpak_app ${MANIFEST_PATH} --install-deps-from=flathub
          flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${APP_ID} ${BRANCH}
          mv $GITHUB_WORKSPACE/org.jmuelbert.jmbde-QT.flatpak $GITHUB_WORKSPACE/org.jmuelbert.jmbde-QT_${{ steps.get_version.outputs.VERSION }}.x86_64.flatpak

      - name: 'üì§ Upload artifact: FlatPak'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TARGET_NAME }}-Qt${{ matrix.qt_version}}-${{matrix.build-type}}.flatpak
          path: |
            $GITHUB_WORKSPACE/org.jmuelbert.jmbde-QT_${{ steps.get_version.outputs.VERSION }}.x86_64.flatpak

  snap-build:
    name: 'üêß Build snap on ubuntu-20.04'
    runs-on: ubuntu-20.04
    needs: [tests]

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: 'üß∞ Checkout Source Code'
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: master

      - name: 'üß∞ Checkout Source Code'
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 'üì¶ Create snap'
        uses: snapcore/action-build@v1
        id: snapcraft
        with:
          snapcraft-args: --enable-experimental-extensions

      - name: Rename snap name
        shell: bash
        run: |
          ls
          mkdir -p $GITHUB_WORKSPACE/build
          cp ${{ steps.snapcraft.outputs.snap }} $GITHUB_WORKSPACE/build/${TARGET_NAME}-${{ steps.get_version.outputs.VERSION }}.amd64.snap

      - name: 'üì§ Upload artifact: SnapPack'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TARGET_NAME }}-$GITHUB_WORKSPACE/build/${TARGET_NAME}-${{ steps.get_version.outputs.VERSION }}.amd64.snap.amd64.snap
          path: |
            $GITHUB_WORKSPACE/build/${TARGET_NAME}-${{ steps.get_version.outputs.VERSION }}.amd64.snap

  macos-build:
    name: 'üçé ${{ matrix.os }} -${{ matrix.qt_version}}'
    strategy:
      matrix:
        qt_version: [6.2.0]
        qt_target: [desktop]
        os: [macos-latest]
        name: [macos-12.0-x86_64]
        macos_target: [10.15]
        qt_arch: [clang_64]
        arch: [clang_64]
        cc: [clang]
        cxx: [clang++]
        cmake_generator: [Ninja]

      fail-fast: true

    runs-on: ${{ matrix.os }}
    needs: [tests]

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: 'üß∞ Checkout Source Code'
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: '‚öôÔ∏è Install Qt'
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: '‚öôÔ∏è Install dependencies'
        run: |
          brew upgrade cmake
          cmake --version
          brew install ninja pkg-config

      - name: '‚öôÔ∏è Get conan'
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: 'üöß Compile application'
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake $GITHUB_WORKSPACE \
            -G ${{matrix.cmake_generator}} \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.macos_target }} \
            -DUSE_LAUNCHER_ABSOLUTE_PATH:BOOL=OFF \
            -DCMAKE_INSTALL_PREFIX:PATH=./app \
            -DBUILD_TESTING=OFF  \
            -DBUILD_TRANSLATIONS=ON \

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --target install --parallel $(sysctl -n hw.logicalcpu)

      - name: 'üì¶ Package application (macdeployqt and zipfile)'
        working-directory: ${{runner.workspace}}/build
        run: |
          macdeployqt ./app/${{env.TARGET_NAME}}.app -qmldir=. -appstore-compliant -libpath=./app/${{env.TARGET_NAME}}.app/Contents/Frameworks -verbose=1 -dmg
          cp ./app/${{env.TARGET_NAME}}.dmg ${{runner.workspace}}/${{env.TARGET_NAME}}.dmg

          # ZIP application "%AppName%-%Version%-macOS.zip"
          ditto -c -k --sequesterRsrc --keepParent "bin/${{env.TARGET_NAME}}.app" ${{env.TARGET_NAME}}.zip
          cp ./${{env.TARGET_NAME}}.zip ${{runner.workspace}}/${{env.TARGET_NAME}}.zip

      - name: Upload dmg artifact for macOS - ${{ matrix.qt_version }}
        uses: actions/upload-artifact@v2
        with:
          name: ${TARGET_NAME}-${{ steps.get_version.outputs.VERSION }}.dmg
          path: ${{runner.workspace}}/${{ env.TARGET_NAME }}.dmg

      - name: Upload zip artifact for macOS - ${{ matrix.qt_version }}-${env.BUILD_TYPE}}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TARGET_NAME }}-${{ steps.get_version.outputs.VERSION }}-macos.zip
          path: ${{runner.workspace}}/${{ env.TARGET_NAME }}*.zip

  windows-build:
    name: 'üßä ${{ matrix.platform }} ${{matrix.qt_version}}'
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        qt_version: [6.2.0]
        qt_target: [desktop]
        platform: [windows-latest]
        name: [Windows 2019 MS Visual C]
        qt_arch: [win64_msvc2019_64]
        arch: [x64]
        artifact: [Windows-MSVC]
        pak_arch: [win64]
        cc: [cl]
        cxx: [cl]
        cmake_generator: [Ninja]
      fail-fast: true
    needs: [tests]

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Checkout Source Code
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Restoring submodules
        run: git submodule update --init

      - name: '‚öôÔ∏è Configure MSVC'
        uses: ilammy/msvc-dev-cmd@v1.10.0
        with:
          # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from Qv2ray-deps repo
          toolset: 14.2
          arch: ${{ matrix.pak_arch }}

      - name: '‚öôÔ∏è Install Qt'
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          dir: '${{ github.workspace }}/build/'
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Get conan
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Install Build deps
        run: |
          cinst png2ico

      - name: 'üöß Compile application'
        shell: pwsh
        working-directory: build
        run: |
          cmake $env:GITHUB_WORKSPACE `
            -G ${{ matrix.cmake_generator }} `
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}  `
            -DUSE_LAUNCHER_ABSOLUTE_PATH:BOOL=OFF  `
            -DCMAKE_INSTALL_PREFIX:PATH=./app `
            -DBUILD_TESTING=OFF  `
            -DBUILD_TRANSLATIONS=ON

      - name: Run CMake Install
        shell: pwsh
        working-directory: build
        run: cmake --build . --config ${{ env.BUILD_TYPE }} --target install --parallel $(nproc)

      # Copy Qt DLLs, compiler runtime & application icon
      - name: 'üì¶ Package application (windeployqt)'
        working-directory: build
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory ${{ env.archiveName }}
          Copy-Item -PATH ./app/* -Destination ${{ env.archiveName }} -Recurse
          Get-ChildItem ${{ env.archiveName }}/bin
          windeployqt --qmldir . ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}.exe ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}models.dll ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}quick.dll ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}widgets.dll

      - name: Compress Zip Archive
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        shell: pwsh
        run: |
          Compress-Archive -Path $ENV:GITHUB_WORKSPACE/build/${{ env.archiveName}}/bin -DestinationPath ${{ env.archiveName}}'.zip'

      - name: Upload Zip archive
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TARGET_NAME}}-win.zip
          path: ${{ env.archiveName}}.zip

      - name: 'üì¶ Make ISS-Installer for ${{ matrix.qt_version }}'
        working-directory: build
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        shell: bash
        run: |
          iscc $GITHUB_WORKSPACE/packaging/win/installer_Qt6_x64.iss -DMyAppVersion=${{ steps.get_version.outputs.VERSION }} -DMyProjectRoot=$(pwd) -DMyOutRoot=$GITHUB_WORKSPACE/build//${archiveName}/bin

      - name: 'üì§ Upload artifact: ISS Installer'
        uses: actions/upload-artifact@v2
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        with:
          name: ${{ env.TARGET_NAME}}-win-${{ steps.get_version.outputs.VERSION }}.exe
          path: ${{ env.archiveName}}.exe

  tests:
    name: Tests on ubuntu-latest
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_SCANNER_VERSION: 4.6.1.2450
      SONAR_SERVER_URL: 'https://sonarcloud.io'
      BUILD_WRAPPER_OUT_DIR: bw_output # Directory where build-wrapper output will be placed

    strategy:
      matrix:
        qt_target: [desktop]
        os: [ubuntu-latest]
        name: [Ubuntu-20.04 gcc-10]
        qt_version: [6.2.0]
        qt_arch: [gcc_64]
        arch: [amd64]
        artifact: [Ubuntu-gcc]
        cmake_generator: [Ninja]
        build_type: [Debug]
      fail-fast: true

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2

      - name: Install Dependencies for ${{ runner.os }}
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
            python3 \
            python3-pip \
            fuse \
            patchelf \
            build-essential \
            extra-cmake-modules \
            appstream \
            hicolor-icon-theme \
            fcitx-frontend-qt5 \
            openssl \
            ca-certificates

      - name: Xvfb install and run for ${{ runner.os }}
        run: |
          sudo apt-get install -y xvfb
          Xvfb -ac ${{ env.DISPLAY }} -screen 0 1280x780x24 &

      - name: Get latest CMake
        uses: lukka/get-cmake@latest

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Get conan
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build

        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake $GITHUB_WORKSPACE \
            -G ${{matrix.cmake_generator}} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type}} \
            -DCMAKE_INSTALL_PREFIX:PATH=./app \
            -DBUILD_TESTING=ON  \
            -DBUILD_TRANSLATIONS=ON

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build . --config Debug -j$(nproc)

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -VV -C ${{ matrix.build_type}}

  releaseNotes:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: Build Releasenotes
        id: github_releasenotes
        uses: release-drafter/release-drafter@v5.16.1
        with:
          publish: "${{ steps.check-version.outputs.tag != '' }}"
          tag: '${{ steps.check-version.outputs.tag }}'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

  changeLog:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: Build ChangeLog
        id: github_changelog
        uses: mikepenz/release-changelog-builder-action@v2.7.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.check-version.outputs }}
        env:
          GITHUB_TOKEN: $${{ secrets.GITHUB_TOKEN }}

  build_GH_Pages:
    name: Build GH Pages
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 2
      - name: Fetch all history for all tags and branches
        run: git fetch --prune --unshallow

      - name: Install sphinx
        run: |
          pip3 install -r docs/requirements.txt
      - name: Running the Sphinx to gh-pages Action
        run: |
          sphinx-build docs docs/_build

      - name: Upload documentation
        uses: actions/upload-artifact@v2.2.4
        with:
          name: docs
          path: docs/_build

  deployGHPages:
    runs-on: ubuntu-latest
    needs: build_GH_Pages
    steps:
      - name: Download Artifact with Pages
        uses: actions/download-artifact@v2.1.0
        with:
          name: docs
          path: docs/_build

      - name: Deploy to GitHub Pages
        uses: Cecilapp/GitHub-Pages-deploy@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          email: juergen.muelbert@gmail.com
          build_dir: docs/_build

  # Upload continous build
  upload:
    name: 'üóÇ Create release and upload artifacts'
    needs:
      - appimage-build
      - flatpak-build
      - snap-build
      - macos-build
      - windows-build

    runs-on: ubuntu-latest
    steps:
      - name: 'üì• Download artifacts'
        uses: actions/download-artifact@v2
      - name: 'üóÇ Inspect directory after downloading artifacts'
        run: ls -alFR

      - name: 'üì§ Upload Release: AppImage'
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.appimage
          asset_name: ${{env.TARGET_NAME}}.appimage
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: FlatPak'
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.flatpak
          asset_name: ${{env.TARGET_NAME}}.flatpak
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: snap'
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.amd64.snap
          asset_name: ${{env.TARGET_NAME}}.amd64.snap
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: macOS'
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.dmg
          asset_name: ${{env.TARGET_NAME}}.dmg
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: windows'
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.TARGET_NAME }}.exe
          asset_name: ${{ env.TARGET_NAME}}-win.exe
          tag: ${{ github.ref }}
          overwrite: true

      - name: 'üì§ Upload Release: zip for windows'
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.archiveName }}-win.zip
          asset_name: ${{ env.TARGET_NAME}}-win-${{ steps.get_version.outputs.VERSION }}.zip
          tag: ${{ github.ref }}
          overwrite: true
