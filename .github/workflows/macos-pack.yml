---
name: Packaging(macOS)

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'docker/**'
      - '**.md'
      - '!docs/building-cmake.md'
      - 'changelog.txt'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/macos-pack.yml'
      - 'snap/**'
      - 'build/**'
      - 'assets/**'
      - 'Docker/**'
      - 'report/**'
      - 'resources/**'
  pull_request:
    branches:
      - 'master'
    types: [opened, reopened]
    paths-ignore:
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'docker/**'
      - '**.md'
      - '!docs/building-cmake.md'
      - 'changelog.txt'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/macos-pack.yml'
      - 'snap/**'
      - 'build/**'
      - 'assets/**'
      - 'Docker/**'
      - 'report/**'
      - 'resources/**'

env:
  PRODUCT: jmbde
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  catalina:
    name: macOS Catalina 10.15

    strategy:
      matrix:
        qt_version: [5.15.2, 6.1.2]
        config:
          - {
              os: macos-10.15,
              macos_target: 10.15,
              qt_arch: clang_64,
              arch: clang_64,
              generator: "-G 'Ninja'",
            }

      fail-fast: false

    runs-on: ${{ matrix.config.os }}

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v1

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2.1.6
        with:
          path: ../Qt/${{matrix.config.qt_version}}/${{matrix.qt_arch}}
          key: ${{ runner.os }}-Qt/${{matrix.config.qt_version}}/${{matrix.qt_arch}}

      - name: Installing Q${{ matrix.qt_version }} -  ${{ matrix.config.arch }}
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          arch: ${{ matrix.config.arch }}
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          setup-python: 'false'

      - name: macOS - ${{ matrix.qt_version }} - Build preparation - Install Packages
        run: |
          brew upgrade cmake
          cmake --version
          brew install ninja pkg-config

      - name: Get conan
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Add Bincrafters Remote
        run: conan remote add bincrafters https://api.bintray.com/conan/bincrafters/public-conan

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake $GITHUB_WORKSPACE \
            ${{matrix.config.generator}} \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.config.macos_target }} \
            -DBUILD_TRANSLATIONS=ON \
            -DCMAKE_INSTALL_PREFIX:PATH=./app

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE -j2 --target install

      - name: Package Qt
        working-directory: ${{runner.workspace}}/build
        run: |
          macdeployqt ./app/${{env.targetName}}.app -qmldir=. -appstore-compliant -libpath=./app/jmbde.app/Contents/Frameworks -verbose=1 -dmg
          cp ./app/${{env.targetName}}.dmg ./${{env.targetName}}-Qt${{ matrix.qt_version }}.dmg
          ls .

      - name: macOS - ${{ matrix.config.qt_version }} - Uploading artifact
        if: >
          ${{ github.event.workflow_run.event == 'pull_request' &&
                github.event.workflow_run.conclusion == 'success' }}
        uses: actions/upload-artifact@v2.2.4
        with:
          name: ${{ env.targetName}}-Qt${{ matrix.config.qt_version
            }}-${{matrix.config.build_type}}.dmg
          path: ${{runner.workspace}}/build/${{ env.targetName }}-Qt${{
            matrix.config.qt_version }}.dmg

      - name: macOS - ${{ matrix.qt_version }} - Upload binaries to release
        if: >
          ${{ github.event.workflow_run.event == 'pull_request' &&
          github.event.workflow_run.conclusion == 'success' }}
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/build/${{ env.targetName }}-Qt${{
            matrix.config.qt_version }}.dmg
          asset_name: ${{ env.targetName }}-${{
            steps.get_version.outputs.VERSION}}-Qt${{ matrix.config.qt_version
            }}-${{matrix.config.build_type}}.dmg
          tag: ${{ github.ref }}
          overwrite: true
