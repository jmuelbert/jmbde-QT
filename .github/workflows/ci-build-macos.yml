name: "CI Build for macos"

on:
    push:
        branches:
            - master
            - develop
        paths-ignore:
            - "README.md"
            - "LICENSE"

    pull_request:
        paths-ignore:
            - "README.md"
            - "LICENSE"
    release:
        types: [published]

jobs:
    check_commit_msg:
        outputs:
            commit_message: ${{ steps.get_message.outputs.message }}
        name: Check if the workflow has been disabled.
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get commit message
              id: get_message
              run: |
                  echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
                  echo "::set-env name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
    build:
        needs: check_commit_msg
        if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_MAIN') }}

        strategy:
            matrix:
                qt_version: [5.12.9, 5.15.1]
                platform: [macos-latest]
                arch: [x64]
                build_type: [Release]
                mac_target: [10.14]

            fail-fast: false

        runs-on: ${{ matrix.platform }}

        steps:
            - name: Get the version
              id: get_version
              shell: bash
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

            - name: Checking out sources
              uses: actions/checkout@v2

            - name: Restoring submodules
              run: git submodule update --init

            - name: Install Python 3.x
              uses: actions/setup-python@v2.1.3
              with:
                  python-version: "3.*"
                  architecture: ${{ matrix.arch }}

            - name: Cache Qt-mac-${{ matrix.platform }}-${{  matrix.qt_version }}
              id: cache-qt
              uses: actions/cache@v2.1.1
              with:
                  path: ../Qt
                  key: QtCache-${{ matrix.platform }}-${{  matrix.qt_version }}

            - name: Installing Qt - ${{  matrix.qt_version }}
              uses: jurplel/install-qt-action@v2
              with:
                  version: ${{  matrix.qt_version }}
                  arch: ${{ matrix.qtarch }}
                  mirror: "http://mirrors.ocf.berkeley.edu/qt/"
                  cached: ${{ steps.cache-qt.outputs.cache-hit }}

            - name: macOS - ${{  matrix.qt_version }} - Build preparation - Install Packages
              run: |
                  brew install pkg-config ninja

            - name: conan_and_ecm
              id: conan_and_ecm
              run: |
                  python -m pip install conan
                  conan user
                  conan create ./conan/ecm

            # === MacOS Build =====================================
            - name: macOS - Install Node
              id: install_node
              if: matrix.platform == 'macos-latest'
              uses: actions/setup-node@v2.1.1
              with:
                  node-version: "12.x"
            - name: macOS - Install appdmg
              id: install_appdmg
              if: matrix.platform == 'macos-latest'
              run: npm install -g appdmg

            - name: macOS - ${{  matrix.qt_version }} - Generate Dependencies and Build
              if: matrix.platform == 'macos-latest'
              shell: bash
              run: |
                  mkdir build
                  cd build
                  conan install ..
                  cmake .. -GNinja -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.mac_target }} -DCMAKE_INSTALL_PREFIX=./Applications
                  cmake --build . --parallel $(sysctl -n hw.logicalcpu)
                  sudo cmake --install .
                  appdmg ./src/app/package_dmg.json ./jmbde.dmg
            - name: macOS - ${{  matrix.qt_version }} - Uploading Artifact
              if: matrix.platform == 'macos-latest'
              uses: actions/upload-artifact@master
              with:
                  name: jmbde-${{ github.sha }}.macOS-${{ matrix.arch }}.qt${{  matrix.qt_version }}.dmg
                  path: ./build/jmbde.dmg
            - name: macOS - ${{  matrix.qt_version }} - Upload binaries to release
              uses: svenstaro/upload-release-action@v1-release
              if: github.event_name == 'release' && matrix.platform == 'macos-latest' &&  matrix.qt_version == '5.15.0'
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file: jmbde.dmg
                  asset_name: jmbde-${{ steps.get_version.outputs.VERSION }}.macOS-${{ matrix.arch }}.dmg
                  tag: $${{ github.ref }}

            - name: Pack to dmg on Mac
              run: |
                  cd build
                  ../../Qt/*/*/bin/macdeployqt jmbde.app
                  cp ./src/app/APP_ICON.icns jmbde.app/Contents/Resources
                  hdiutil create -volname jmbde-${{ steps.get_version.outputs.VERSION }}-x64 -srcfolder jmbde.app -ov -format UDZO jmbde-${{ steps.get_version.outputs.VERSION }}-x64.dmg
            - name: Release on Mac
              if: matrix.config.os == 'macos-latest' # && ( matrix.qt_version == '5.15.0') #  && startsWith(github.ref, 'refs/tags')
              uses: softprops/action-gh-release@v1
              with:
                  draft: true
                  prerelease: ${{ steps.get_version.outputs.ISBETA }}
                  files: build/jmbde-${{ steps.get_version.outputs.VERSION }}-x64.dmg
                  name: JMBDE  ${{ steps.get_version.outputs.VERSION }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
