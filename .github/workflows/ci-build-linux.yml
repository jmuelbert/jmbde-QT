name: "CI Build Linux"

on:
    push:
        branches:
            - master
            - develop
        paths-ignore:
            - "README.md"
            - "LICENSE"

    pull_request:
        paths-ignore:
            - "README.md"
            - "LICENSE"
    release:
        types: [published]
env:
    CMAKE_VERSION: 3.18.3
    NINJA_VERSION: 1.10.0

jobs:
    check_commit_msg:
        outputs:
            commit_message: ${{ steps.get_message.outputs.message }}
        name: Check if the workflow has been disabled.
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get commit message
              id: get_message
              run: |
                  echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
                  echo "::set-env name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
    build:
        needs: check_commit_msg
        if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_MAIN') }}

        strategy:
            matrix:
                qt_version: [5.12.9, 5.15.1]
                platform: [ubuntu-latest]
                arch: [x64]
                build_type: [Release]

            fail-fast: false

        runs-on: ${{ matrix.platform }}

        steps:
            - name: Get the version
              id: get_version
              shell: bash
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

            - name: Checking out sources
              uses: actions/checkout@v2

            - name: Restoring submodules
              run: git submodule update --init

            - name: Install Python 3.x
              uses: actions/setup-python@v2.1.3
              with:
                  python-version: "3.*"
                  architecture: ${{ matrix.arch }}
            - name: Cache Qt-mac/linux-${{ matrix.platform }}-${{  matrix.qt_version }}
              id: cache-qt-mac-linux
              uses: actions/cache@v2.1.1
              with:
                  path: ../Qt
                  key: QtCache-${{ matrix.platform }}-${{  matrix.qt_version }}

            - name: Installing Qt - ${{  matrix.qt_version }}
              uses: jurplel/install-qt-action@v2
              with:
                  version: ${{  matrix.qt_version }}
                  arch: ${{ matrix.qtarch }}
                  mirror: "http://mirrors.ocf.berkeley.edu/qt/"
                  cached: ${{ steps.cache-qt.outputs.cache-hit }}

            # === Linux =====================================
            - name: Linux - ${{  matrix.qt_version }} - Build preparation - Install Packages
              run: |
                  sudo apt update
                  sudo apt-get install libxcb-icccm4
                  sudo apt-get install libxcb-image0
                  sudo apt-get install libxcb-keysyms1
                  sudo apt-get install libxcb-render-util0
                  sudo apt-get install libxcb-xinerama0
                  # sudo apt-get upgrade

            # === CMake and Ninja =====================================
            - name: Download Ninja and CMake
              id: cmake_and_ninja
              shell: cmake -P {0}
              run: |
                  set(cmake_version $ENV{CMAKE_VERSION})
                  set(ninja_version $ENV{NINJA_VERSION})
                  message(STATUS "Using host CMake version: ${CMAKE_VERSION}")
                  if ("${{ runner.os }}" STREQUAL "Windows")
                    set(ninja_suffix "win.zip")
                    set(cmake_suffix "win64-x64.zip")
                    set(cmake_dir "cmake-${cmake_version}-win64-x64/bin")
                  elseif ("${{ runner.os }}" STREQUAL "Linux")
                    set(ninja_suffix "linux.zip")
                    set(cmake_suffix "Linux-x86_64.tar.gz")
                    set(cmake_dir "cmake-${cmake_version}-Linux-x86_64/bin")
                  endif()
                  set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
                  file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
                  execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)
                  set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
                  file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
                  execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)
                  # Save the path for other steps
                  file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
                  message("::set-output name=cmake_dir::${cmake_dir}")
                  if (NOT "${{ runner.os }}" STREQUAL "Windows")
                    execute_process(
                      COMMAND chmod +x ninja
                      COMMAND chmod +x ${cmake_dir}/cmake
                    )
                  endif()

            - name: conan_and_ecm
              id: conan_and_ecm
              run: |
                  python -m pip install conan
                  conan user
                  conan create ./conan/ecm

            # === Linux Build =====================================
            - name: Linux - ${{  matrix.qt_version }} - Generate Dependencies and Build
              shell: bash
              env:
                  CC: /usr/bin/gcc-7
                  CXX: /usr/bin/g++-7
                  CMAKE_MAKE_PROGRAM: ninja
              run: |
                  mkdir build
                  cd build
                  conan install ..
                  cmake .. -DCMAKE_INSTALL_PREFIX=./appdir/usr -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
                  cmake --build . --parallel $(nproc)
                  cmake --install .
            - name: Linux - ${{  matrix.qt_version }} - Generating AppImage
              run: |
                  cd build
                  export LD_LIBRARY_PATH=appdir/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
                  wget -c "https://github.com/jimevins/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
                  chmod a+x linuxdeployqt*.AppImage
                  wget -c -nv "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage"
                  chmod a+x appimagetool-x86_64.AppImage
                  ./linuxdeployqt*.AppImage appdir/usr/share/applications/io.github.jmuelbert.jmbde.desktop -bundle-non-qt-libs -extra-plugins=imageformats/libqsvg.so -exclude-libs=libpython3.54m.so.1.0 -verbose=2 -appimage
                  find appdir -executable -type f -exec ldd {} \; | grep " => /usr" | cut -d " " -f 2-3 | sort | uniq
                  mv ./jmbde*.AppImage ./jmbde.AppImage
            - name: Linux - ${{  matrix.qt_version }} - Uploading artifact
              uses: actions/upload-artifact@master
              with:
                  name: jmbde-${{ github.sha }}.linux-qt${{  matrix.qt_version }}.AppImage
                  path: build/jmbde.AppImage
            - name: Linux - ${{  matrix.qt_version }} - Upload binaries to release
              uses: svenstaro/upload-release-action@v1-release
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file: build/jmbde.AppImage
                  asset_name: jmbde.${{ steps.get_version.outputs.VERSION }}-qt${{  matrix.qt_version }}-${{  matrix.arch }}.AppImage
                  tag: ${{ github.ref}}
                  overwrite: true
