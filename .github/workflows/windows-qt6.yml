name: "CD: Windows Qt6"
on:
  push:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - 'BUILD.md'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
      - 'BUILD.md'
  release:
    types: [published]

jobs:
  check_commit_msg:
    outputs:
      commit_message: ${{ steps.get_message.outputs.message }}
    name: Check if the workflow has been disabled.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get commit message
        id: get_message
        run: |
          echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
  build:
    needs: check_commit_msg
    if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_MAIN') }}
    strategy:
      matrix:
        qt_version: [6.0.0]
        build_type: [Release, RelWithDebInfo]
        platform: [windows-latest]
        include:
          - platform: windows-latest
            arch: x64
            qtarch: win64_msvc2019_64
      fail-fast: false

    runs-on: ${{ matrix.platform }}
    env:
      targetName: jmbde.exe
    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
      - name: Checking out sources
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Install Python 3.9 version
        uses: actions/setup-python@v1
        with:
          python-version: '3.9'
          architecture: x64
      - name: Restoring submodules
        run: git submodule update --init

# =========================================================================================================
      - name: Install MSVC compiler
        uses: ilammy/msvc-dev-cmd@v1
        with:
          # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from Qv2ray-deps repo
          toolset: 14.2
          arch: x64
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: QtCache-${{ matrix.platform }}-x64-${{ matrix.qt_version }}
      - name: Installing Qt - x64
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          arch: ${{ matrix.qtarch }}
          mirror: 'http://mirrors.ocf.berkeley.edu/qt/'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          setup-python: 'false'

      - name: conan_and_ecm
        id: conan_and_ecm
        shell: bash
        env:
          CC: cl.exe
          CXX: cl.exe
        run: |
            python -m pip install conan
            conan user
            conan create ./conan/ecm
            mkdir build
            cd build
            conan install ..
            cd ..

      - name: Win-x64 - ${{ matrix.qt_version }} - Generate Dependencies and Build
        shell: bash
        env:
          CC: cl.exe
          CXX: cl.exe
        run: |
          cd build
          cmake .. \
            -GNinja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DJMBDE_QT6=ON \
            -DJMBDE_BUILD_INFO="Build for Windows" \
            -DJMBDE_BUILD_EXTRA_INFO="Build on Windows x64" \
            -DCMAKE_INSTALL_PREFIX:PATH=./app
          cmake --build . --parallel $(nproc)

      - name: package
        env:
          archiveName: jmbde.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.arch }}
        shell: pwsh
        run: |
          New-Item -ItemType Directory ${env:archiveName}
          Copy-Item -Path build\app\ -Destination ${env:archiveName}\ -recurse -Force -Verbose
          windeployqt --qmldir . ${env:archiveName}\bin\${env:targetName}
          Compress-Archive -Path ${env:archiveName} ${env:archiveName}'.zip'
          $name = ${env:archiveName}
          echo "packageName=\"$name\"" >> $GITHUB_ENV
          Write-Host 'packageName:'${env:packageName}
      - name: Upload artifact
        uses: actions/upload-artifact@v2-preview
        with:
          name: jmbde-win-qt5-x64-${{ matrix.build_type }}.zip
          path: ${{ env.packageName }}.zip
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.packageName }}.zip
          asset_name: jmbde-win-qt5-x64-${{ matrix.build_type }}.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v1-release
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.packageName }}.zip
          asset_name: jmbde-win-qt6-x64-${{ matrix.build_type }}.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: Gather dependencies on Windows
        shell: bash
        run: |
            ../Qt/*/*/bin/windeployqt.exe build/app/bin/jmbde.exe
            cd "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC"
            echo ::set-env name=VC_REDIST_VERSION::$(ls -dr *.* | head -n1)

      - name: Pack to installer on Windows
        shell: bash
        run: |
            mkdir build/app/bin/Redist
            cp "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Redist/MSVC/$VC_REDIST_VERSION/vc_redist.x64.exe" build/app/bin/Redist
            iscc packaging/win/installer_x64.iss -DMyAppVersion=${{ steps.get_version.outputs.VERSION }} -DMyProjectRoot=$(pwd) -DMyOutRoot=$(pwd)/build/app/bin -DVC_REDIST_VERSION=$VC_REDIST_VERSION
            mv jmbde-${{ steps.get_version.outputs.VERSION }}-x64-setup.exe jmbde-${{ steps.get_version.outputs.VERSION }}-windows-Qt${{env.QT_VERSION}}-x64.exe

      - name: Release on Windows
        uses: softprops/action-gh-release@v1
        with:
            draft: true
            prerelease: ${{ steps.get_version.outputs }}
            files:
                jmbde-${{ steps.get_version.outputs.VERSION }}-windows-Qt${{env.QT_VERSION}}-x64.exe
            name: jmbde ${{ steps.get_version.outputs.VERSION }}
