name: Windows Installer Innosetup

on:
    push:
        branches:
            - master
            - develop
        paths-ignore:
            - "README.md"
            - "LICENSE"

    pull_request:
        paths-ignore:
            - "README.md"
            - "LICENSE"
    release:
        types: [published]

env:
    QT_VERSION: 5.15.0
    CMAKE_VERSION: 3.18.0
    NINJA_VERSION: 1.10.0
    CCACHE_VERSION: 3.7.11
    GOOGLE_TEST_VERSION: 1.10.0
    BUILD_TYPE: Release
    TARGETNAME: deployment

jobs:
    build:
        name: Build
        strategy:
            matrix:
                qt_version: [5.15.0]
                platform: [windows-latest]
                arch: [x86, x64]
                build_type: [Release]
                include:
                    - platform: windows-latest
                      arch: x86
                      qtarch: win32_msvc2019
                      build_type: Release
                    - platform: windows-latest
                      arch: x64
                      qtarch: win64_msvc2019_64
                      build_type: Release
            fail-fast: false

        runs-on: ${{ matrix.platform }}
        env:
            targetName: jmbde.exe
        steps:
            - name: Get the version
              id: get_version
              shell: bash
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

            - name: Checking out sources
              uses: actions/checkout@v2
              with:
                  submodules: "recursive"

            - name: Install Python 3.8 version
              uses: actions/setup-python@v1
              with:
                  python-version: "3.8"
                  architecture: ${{ matrix.arch }}

            - name: Restoring submodules
              run: git submodule update --init

            # =========================================================================================================
            - name: Install MSVC compiler
              uses: ilammy/msvc-dev-cmd@v1
              with:
                  # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from Qv2ray-deps repo
                  toolset: 14.2
                  arch: ${{ matrix.arch }}

            - name: Cache Qt
              id: cache-qt
              uses: actions/cache@v1
              with:
                  path: ../Qt
                  key: QtCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.qt_version }}

            - name: Installing Qt - ${{ matrix.arch }}
              uses: jurplel/install-qt-action@v2
              with:
                  version: ${{ matrix.qt_version }}
                  arch: ${{ matrix.qtarch }}
                  mirror: "http://mirrors.ocf.berkeley.edu/qt/"
                  cached: ${{ steps.cache-qt.outputs.cache-hit }}

            # === Winodws =====================================
            - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Build preparation - Download Dependencies
              shell: bash
              run: |
                  choco install -y ninja
                  choco install -y png2ico
                  choco install -y innosetup

            - name: conan_and_ecm
              id: conan_and_ecm
              run: |
                  python -m pip install conan
                  conan user
                  conan create ./conan/ecm

            - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Generate Dependencies and Build
              shell: pwsh
              env:
                  CC: cl.exe
                  CXX: cl.exe
              run: |
                  New-Item -Path "." -Name "build" -ItemType "directory"
                  Set-Location "build"
                  New-Item -Path "." -Name "deployment" -ItemType "directory"
                  if ($matrix.arch -EQ 'x64') {
                    $conan_arch = 'x86_64'
                  }Â else {
                    $conan_arch = 'x86'
                  }
                  conan install .. -s arch=$conan_arch
                  cmake .. -GNinja -DCMAKE_INSTALL_PREFIX=./${{env.packageName}} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
                  cmake --build . --parallel $(nproc)
                  cmake --install .

            - name: package
              env:
                  archiveName: jmbde.${{ steps.get_version.outputs.VERSION }}.Windows-INNO-${{ matrix.arch }}
              shell: pwsh
              run: |
                  New-Item -ItemType Directory ${env:archiveName}
                  Copy-Item ${env:targetName} ${env:archiveName}\
                  windeployqt --qmldir . ${env:archiveName}\${env:targetName}
                  Compress-Archive -Path ${env:archiveName} ${env:archiveName}'.zip'
                  iscc ../packing/win/win/installer_${{ matrix.arch }}.iss -DMyAppVersion=${{ steps.get_version.outputs.VERSION }} -DMyProjectRoot=$(pwd) -DMyOutRoot=$(pwd)/build/out
                  $name = ${env:archiveName}
                  echo "::set-env name=packageName::$name"
                  Write-Host 'packageName:'${env:packageName}

            - name: Upload artifact
              uses: actions/upload-artifact@v2-preview
              with:
                  name: jmbde-win-${{matrix.arch}}.zip
                  path: ${{ env.packageName }}'.zip'

            - name: uploadRelease
              if: startsWith(github.event.ref, 'refs/tags/')
              uses: svenstaro/upload-release-action@v1-release
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file: ./${{ env.packageName }}.zip
                  asset_name: jmbde-win-${{matrix.arch}}.zip
                  tag: ${{ github.ref }}
                  overwrite: true
