---
name: "CI: Build Test Qt6"

on:
    push:
        branches:
            - "master"
        paths-ignore:
            - 'docs/**'
            - '.github/ISSUE_TEMPLATE/**'
            - 'docker/**'
            - '**.md'
            - '!docs/building-cmake.md'
            - 'changelog.txt'
            - 'LICENSE'
            - '.github/**'
            - '!.github/workflows/build_test-qt6.yml'
            - 'snap/**'
            - 'build/**'
            - 'assets/**'
            - 'Docker/**'
            - 'report/**'
            - 'resources/**'
    pull_request:
        branches:
            - "master"
        types: [opened, reopened]
        paths-ignore:
            - 'docs/**'
            - '.github/ISSUE_TEMPLATE/**'
            - 'docker/**'
            - '**.md'
            - '!docs/building-cmake.md'
            - 'changelog.txt'
            - 'LICENSE'
            - '.github/**'
            - '!.github/workflows/build_test-qt6.yml'
            - 'snap/**'
            - 'build/**'
            - 'assets/**'
            - 'Docker/**'
            - 'report/**'
            - 'resources/**'

env:
    QT_VERSION: 6.1.0
    # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
    BUILD_TYPE: Debug
    PRODUCT: jmbde
    targetName: jmbde

jobs:
    check_commit_msg:
        outputs:
            commit_message: ${{ steps.get_message.outputs.message }}
        name: Check if the workflow has been disabled.
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get commit message
              id: get_message
              run: |
                  echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"

    build:
        needs: check_commit_msg
        if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_MAIN') }}
        name: ${{ matrix.config.os }}

        strategy:
            matrix:
                config:
                    - {
                          os: windows-latest,
                          qt_arch: win64_msvc2019_64,
                          qt_target: desktop,
                          arch: x64,
                          generator: "-G'Visual Studio 16 2019' -A x64",
                      }
                      # portable-option: Off ? On
                      # portable-name: -setup.exe ?  -portable.zip
                    - {
                          os: macos-latest,
                          qt_arch: clang_64,
                          qt_target: desktop,
                          arch: clang_64,
                          generator: "-G 'Ninja'",
                      }
            fail-fast: false

        runs-on: ${{ matrix.config.os }}

        steps:
            - name: Get the version
              id: get_version
              shell: bash
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

            - name: Checkout Source code
              if: github.event_name == 'push'
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0
            #          ref: master

            - name: Checkout Source code
              if: github.event_name == 'pull_request'
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0
                  ref: ${{ github.event.pull_request.head.sha }}

            - name: Set env & Print jmbde-QT version
              shell: bash
              run: |
                  last_committed_tag=$(git tag -l --sort=-v:refname | head -1)
                  git_revno=$(git rev-list $(git describe --tags --abbrev=0)..HEAD --count)
                  git_hash=$(git rev-parse --short HEAD)
                  echo "=======jmbde-QT VERSION========"
                  echo ${last_committed_tag:1}
                  echo "Details: ${last_committed_tag}+git${git_revno}.${git_hash}"
                  echo "================================"
                  # This will allow to build pre-preleases without git tag
                  # echo "VERSION=${last_committed_tag:1}" >> $GITHUB_ENV
                  echo "VERSION=$(cat CMakeLists.txt |grep 'set.*(.*JMBDE_QT_VERSION' | sed 's/[^0-9.]*//' |sed 's/)//g')" >> $GITHUB_ENV

            # - name: Restore from cache and run vcpkg
            #  uses: lukka/run-vcpkg@v4
            #  with:
            #      vcpkgArguments: ${{env.VCPKG_PACKAGES}}
            #      vcpkgDirectory: '${{ github.workspace }}\vcpkg'
            #      appendedCacheKey: ${{ matrix.config.vcpkg_triplet }}
            #      vcpkgGitCommitId: ${{ env.VCPKG_VERSION }}
            #      vcpkgTriplet: ${{ matrix.config.vcpkg_triplet }}

            - name: Install Python 3.x version
              uses: actions/setup-python@v2.2.2
              with:
                  python-version: "3.x"
                  architecture: ${{ matrix.arch }}

            - name: Restore Qt from cache
              id: cache-qt
              uses: actions/cache@v2.1.6
              with:
                  path: ../Qt
                  key: Qt-${{ matrix.config.os }}-${{ env.QT_VERSION }}

            - name:
                  Installing Qt${{ env.QT_VERSION }} - ${{ matrix.config.qt_arch }} on
                  ${{ matrix.config.os }}
              uses: jurplel/install-qt-action@v2
              with:
                  version: ${{ env.QT_VERSION }}
                  target: ${{ matrix.config.qt_target }}
                  arch: ${{ matrix.config.qt_arch }}
                  cached: ${{ steps.cache-qt.outputs.cache-hit }}

            - name:
                  ${{ matrix.config.os }} - ${{ matrix.config.qt_version }} - Build
                  preparation - Install Packages
              if: runner.os == 'macOS'
              run: |
                  brew install ninja pkg-config

            - name: Install conan
              id: conan
              run: |
                  pip3 install --upgrade pip
                  pip3 install conan
                  conan user

            - name: Create Build Environment
              # Some projects don't allow in-source building, so create a separate build directory
              # We'll use this as our working directory for all subsequent commands
              run: cmake -E make_directory ${{runner.workspace}}/build

            - name: Configure CMake
              # Use a bash shell so we can use the same syntax for environment variable
              # access regardless of the host operating system
              shell: bash
              working-directory: ${{runner.workspace}}/build
              # Note the current convention is to use the -S and -B options here to specify source
              # and build directories, but this is only available with CMake 3.13 and higher.
              # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
              run: |
                  cmake $GITHUB_WORKSPACE \
                    ${{matrix.config.generator}} \
                    -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                    -DBUILD_TRANSLATIONS=ON \
                    -DENABLE_TESTING=OFF \
                    -DCMAKE_INSTALL_PREFIX:PATH=./app

            - name: Build
              working-directory: ${{runner.workspace}}/build
              shell: bash
              # Execute the build.  You can specify a specific target with "--target <NAME>"
              run: cmake --build . --config ${{ env.BUILD_TYPE }} -j2 --target install
