---
name: "CI: Build Test Qt6"

on:
    push:
        paths-ignore:
            - "README.md"
            - "LICENSE"
            - "BUILD.md"
    pull_request:
        paths-ignore:
            - "README.md"
            - "LICENSE"
            - "BUILD.md"

env:
    QT_VERSION: 6.1
    # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
    BUILD_TYPE: Debug

jobs:
    check_commit_msg:
        outputs:
            commit_message: ${{ steps.get_message.outputs.message }}
        name: Check if the workflow has been disabled.
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get commit message
              id: get_message
              run: |
                  echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
    build:
        needs: check_commit_msg
        if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_MAIN') }}
        name: ${{ matrix.config.os }}
        runs-on: ${{ matrix.config.os }}
        strategy:
            fail-fast: false
            matrix:
                config:
                    - { os: ubuntu-latest, portable-option: Off }
                    - {
                          os: windows-latest,
                          portable-option: Off,
                          portable-name: -setup.exe,
                      }
                    - {
                          os: windows-latest,
                          portable-option: On,
                          portable-name: -portable.zip,
                      }
                    - { os: macos-latest, portable-option: Off }

        steps:
            - uses: actions/checkout@v2
              with:
                  submodules: "recursive"

            - name: Install Python 3.9
              uses: actions/setup-python@v2.1.4
              with:
                  python-version: 3.9

            - name: Restore Qt from cache
              id: cache-qt
              uses: actions/cache@v2.1.3
              with:
                  path: ../Qt
                  key: Qt-${{ matrix.config.os }}-${{ env.QT_VERSION }}

            - name: Set up Qt environment
              uses: jurplel/install-qt-action@v2
              with:
                  cached: ${{ steps.cache-qt.outputs.cache-hit }}
                  version: ${{ env.QT_VERSION }}

            - name: Install conan
              id: conan
              run: |
                  pip3 install conan
                  conan user

            - name: Create Build Environment
              # Some projects don't allow in-source building, so create a separate build directory
              # We'll use this as our working directory for all subsequent commands
              run: cmake -E make_directory ${{runner.workspace}}/build

            - name: Configure CMake
              # Use a bash shell so we can use the same syntax for environment variable
              # access regardless of the host operating system
              shell: bash
              working-directory: ${{runner.workspace}}/build
              # Note the current convention is to use the -S and -B options here to specify source
              # and build directories, but this is only available with CMake 3.13 and higher.
              # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
              run: |
                  cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE  -DPORTABLE_VERSION=${{ matrix.config.portable-option }} -DCMAKE_INSTALL_PREFIX:PATH=./app

            - name: Build
              working-directory: ${{runner.workspace}}/build
              shell: bash
              # Execute the build.  You can specify a specific target with "--target <NAME>"
              run: cmake --build . --config $BUILD_TYPE -j2 --target install

            - name: Test
              working-directory: ${{runner.workspace}}/build
              shell: bash
              # Execute tests defined by the CMake configuration.
              # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
              run: ctest -C $BUILD_TYPE
