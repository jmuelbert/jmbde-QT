---
name: "CD: Windows"
on:
    pull_request:
        paths-ignore:
            - "README.md"
            - "LICENSE"
            - "BUILD.md"
    release:
        types: [published]

jobs:
    check_commit_msg:
        outputs:
            commit_message: ${{ steps.get_message.outputs.message }}
        name: Check if the workflow has been disabled.
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get commit message
              id: get_message
              run: |
                  echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
    build:
        needs: check_commit_msg
        if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_MAIN') }}
        strategy:
            matrix:
                qt_version: [5.15.2]
                build_type: [Release, RelWithDebInfo]
                platform: [windows-latest]
                include:
                    - platform: windows-latest
                      arch: x64
                      qtarch: win64_msvc2019_64
            fail-fast: false

        runs-on: ${{ matrix.platform }}
        env:
            targetName: jmbde.exe
        steps:
            - name: Get the version
              id: get_version
              shell: bash
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
            - name: Checking out sources
              uses: actions/checkout@v2
              with:
                  submodules: "recursive"
            - name: Install Python 3.9 version
              uses: actions/setup-python@v1
              with:
                  python-version: "3.9"
                  architecture: x64
            - name: Restoring submodules
              run: git submodule update --init

            # =========================================================================================================
            - name: Install MSVC compiler
              uses: ilammy/msvc-dev-cmd@v1
              with:
                  # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from Qv2ray-deps repo
                  toolset: 14.2
                  arch: x64
            - name: Cache Qt
              id: cache-qt
              uses: actions/cache@v2.1.3
              with:
                  path: ../Qt
                  key: QtCache-${{ matrix.platform }}-x64-${{ matrix.qt_version }}
            - name: Installing Qt - x64
              uses: jurplel/install-qt-action@v2
              with:
                  version: ${{ matrix.qt_version }}
                  arch: ${{ matrix.qtarch }}
                  mirror: "http://mirrors.ocf.berkeley.edu/qt/"
                  cached: ${{ steps.cache-qt.outputs.cache-hit }}
                  setup-python: "false"

            - name: Install conan
              id: conan
              run: |
                  pip3 install --upgrade pip
                  pip3 install conan
                  conan user

            - name: Create Build Environment
              # Some projects don't allow in-source building, so create a separate build directory
              # We'll use this as our working directory for all subsequent commands
              run: cmake -E make_directory ${{runner.workspace}}/build

            - name: Configure CMake
              # Use a bash shell so we can use the same syntax for environment variable
              # access regardless of the host operating system
              shell: bash
              working-directory: ${{runner.workspace}}/build
              # Note the current convention is to use the -S and -B options here to specify source
              # and build directories, but this is only available with CMake 3.13 and higher.
              # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
              run: |
                  cmake .. \
                  -GNinja \
                  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                  -DJMBDE_QT6=ON \
                  -DJMBDE_BUILD_INFO="Build for Windows" \
                  -DJMBDE_BUILD_EXTRA_INFO="Build on Windows x64" \
                  -DBUILD_TRANSLATIONS=ON \
                  -DCMAKE_INSTALL_PREFIX:PATH=./app

            - name: Build
              working-directory: ${{runner.workspace}}/build
              shell: bash
              # Execute the build.  You can specify a specific target with "--target <NAME>"
              run: cmake --build . --config $BUILD_TYPE -j2 --target install

            - name: ZIP package
              env:
                  archiveName: jmbde.${{ steps.get_version.outputs.VERSION
                      }}.Windows-${{matrix.arch }}
              shell: pwsh
              run: |
                  New-Item -ItemType Directory ${env:archiveName}
                  Copy-Item -Path build\app\* -Destination ${env:archiveName}\ -recurse -Force
                  windeployqt --qmldir . ${env:archiveName}\bin\${env:targetName} ${env:archiveName}\bin\jmbdemodels.dll ${env:archiveName}\bin\jmbdequick.dll ${env:archiveName}\bin\jmbdewidgets.dll
                  Compress-Archive -Path ${env:archiveName}/bin ${env:archiveName}'.zip'
                  $name = ${env:archiveName}
                  Write-Host 'Name: ' $name
                  echo "packageName=$name" >> $GITHUB_ENV
                  Write-Host 'packageName:' ${env:packageName}

            - name: Inno package
              env:
                  archiveName:
                      jmbde.${{ steps.get_version.outputs.VERSION }}.Windows-${{
                      matrix.arch }}
              shell: bash
              run: |
                  iscc packaging/win/installer_Qt5_x64.iss  -DMyAppVersion=${{ steps.get_version.outputs.VERSION }} -DMyProjectRoot=$(pwd) -DMyOutRoot=$(pwd)/$archiveName/bin
                  cp jmbde-setup.exe jmbde-${{ steps.get_version.outputs.VERSION}}-windows-${{matrix.arch}}-Qt${{matrix.qt_version}}-${{ matrix.build_type }}.exe

            - name: MSI package
              env:
                  archiveName:
                      jmbde.${{ steps.get_version.outputs.VERSION }}.Windows-${{
                      matrix.arch }}
              shell: bash
              run: |
                  echo "Hello msi installer"

            - name: Windows - ${{ matrix.qt_version }} - Uploading artifact
              env:
                  archiveName:
                      jmbde.${{ steps.get_version.outputs.VERSION }}.Windows-${{
                      matrix.arch }}
              uses: actions/upload-artifact@v2.2.2
              with:
                  name: jmbde-win-${{matrix.arch}}.qt${{ matrix.qt_version
                      }}-${{matrix.build_type}}.zip
                  path: ${{ env.archiveName }}.zip

            - name:
                  Windows - ${{ matrix.qt_version }}.${{matrix.arch}}. - Upload binaries
                  to release
              uses: svenstaro/upload-release-action@v2
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file: ./jmbde-${{
                      steps.get_version.outputs.VERSION}}-windows-${{matrix.arch}}-Qt${{matrix.qt_version}}-${{
                      matrix.build_type }}.exe
                  asset_name: jmbde-${{
                      steps.get_version.outputs.VERSION}}-windows-${{matrix.arch}}-Qt${{matrix.qt_version}}-${{
                      matrix.build_type }}.exe
                  tag: ${{ github.ref }}
                  overwrite: true
