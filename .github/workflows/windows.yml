---
name: "CD: Windows"

on:
    push:
        paths-ignore:
            - '.github/ISSUE_TEMPLATE/**'
            - 'docker/**'
            - 'CONTRIBUTING.md'
            - "README.md"
            - "LICENSE"
            - "BUILD.md"
    pull_request_target:
        types: [labeled]
        paths-ignore:
            - '.github/ISSUE_TEMPLATE/**'
            - 'docker/**'
            - 'CONTRIBUTING.md'
            - "README.md"
            - "LICENSE"
            - "BUILD.md"
    release:
        types: [published]

    workflow_dispatch:

env:
    PRODUCT: jmbde
    targetName: jmbde

jobs:
    check_commit_msg:
        outputs:
            commit_message: ${{ steps.get_message.outputs.message }}
        name: Check if the workflow has been disabled.
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get commit message
              id: get_message
              run: |
                  echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"

    build:
        needs: check_commit_msg
        if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_MAIN') }}
        env:
            targetName: jmbde.exe
            # VCINSTALLDIR:
            #    C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/
            # 2020.07
            # VCPKG_VERSION: 56fffbe49dfb4dd8fae0940f272c5fd2b86be991

        strategy:
            matrix:
                platform: [windows-latest]
                build_type: [Release, RelWithDebInfo]
                qt_version: [5.15.2]
                qt_arch: [win64_msvc2019_64]
                qt_target: [desktop]
                arch: [x64]
                generator: ["-G'Visual Studio 16 2019' -A x64"]
            fail-fast: false

        runs-on: ${{ matrix.platform }}

        steps:
            - name: Get the version
              id: get_version
              shell: bash
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

            - name: Checkout Source code
              if: github.event_name == 'push'
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0
            #          ref: master

            - name: Checkout Source code
              if: github.event_name == 'pull_request'
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0
                  ref: ${{ github.event.pull_request.head.sha }}

            - name: Set env & Print jmbde-QT version
              shell: bash
              run: |
                  last_committed_tag=$(git tag -l --sort=-v:refname | head -1)
                  git_revno=$(git rev-list $(git describe --tags --abbrev=0)..HEAD --count)
                  git_hash=$(git rev-parse --short HEAD)
                  echo "=======jmbde-QT VERSION========"
                  echo ${last_committed_tag:1}
                  echo "Details: ${last_committed_tag}+git${git_revno}.${git_hash}"
                  echo "================================"
                  # This will allow to build pre-preleases without git tag
                  # echo "VERSION=${last_committed_tag:1}" >> $GITHUB_ENV
                  echo "VERSION=$(cat CMakeLists.txt |grep 'set.*(.*JMBDE_QT_VERSION' | sed 's/[^0-9.]*//' |sed 's/)//g')" >> $GITHUB_ENV

            # - name: Restore from cache and run vcpkg
            #  uses: lukka/run-vcpkg@v4
            #  with:
            #      vcpkgArguments: ${{env.VCPKG_PACKAGES}}
            #      vcpkgDirectory: '${{ github.workspace }}\vcpkg'
            #      appendedCacheKey: ${{ matrix.config.vcpkg_triplet }}
            #      vcpkgGitCommitId: ${{ env.VCPKG_VERSION }}
            #      vcpkgTriplet: ${{ matrix.config.vcpkg_triplet }}

            - name: Install Python 3.9 version
              uses: actions/setup-python@v2.2.2
              with:
                  python-version: "3.9.1"
                  architecture: ${{ matrix.arch }}

            # =========================================================================================================
            - name: Install MSVC compiler
              uses: ilammy/msvc-dev-cmd@v1.8.1
              with:
                  # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from repo
                  toolset: 14.2
                  arch: x64

            - name: Cache Qt
              id: cache-qt
              uses: actions/cache@v2.1.6
              with:
                  path: ../Qt
                  key: QtCache-${{ matrix.platform }}-x64-${{ matrix.qt_version }}

            - name: Installing Qt${{ matrix.qt_version }} - ${{ matrix.qt_arch }}
              uses: jurplel/install-qt-action@v2
              with:
                  version: ${{ matrix.qt_version }}
                  target: ${{ matrix.qt_target }}
                  arch: ${{ matrix.qt_arch }}
                  mirror: "http://mirrors.ocf.berkeley.edu/qt/"
                  cached: ${{ steps.cache-qt.outputs.cache-hit }}

            - name: Install conan
              id: conan
              run: |
                  pip3 install --upgrade pip
                  pip3 install conan
                  conan user

            - name: Create Build Environment
              # Some projects don't allow in-source building, so create a separate build directory
              # We'll use this as our working directory for all subsequent commands
              run: cmake -E make_directory ${{runner.workspace}}/build

            - name: Configure CMake
              # Use a bash shell so we can use the same syntax for environment variable
              # access regardless of the host operating system
              shell: bash
              working-directory: ${{runner.workspace}}/build
              # Note the current convention is to use the -S and -B options here to specify source
              # and build directories, but this is only available with CMake 3.13 and higher.
              # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
              # By using vcpkg add this line
              # -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"  `
              run: |
                  cmake $GITHUB_WORKSPACE \
                  ${{matrix.generator}} \
                  -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                  -DJMBDE_QT6=ON \
                  -DBUILD_TRANSLATIONS=ON \
                  -DCMAKE_INSTALL_PREFIX:PATH=./app \
                  -DRUN_IN_PLACE=${{ contains(matrix.type, 'portable') }}

            - name: Build
              working-directory: ${{runner.workspace}}/build
              shell: bash
              # Execute the build.  You can specify a specific target with "--target <NAME>"
              run:
                  cmake --build . --config ${{ matrix.build_type }} -j2 --target install

            - name: ZIP package
              working-directory: ${{runner.workspace}}/build
              env:
                  archiveName:
                      jmbde.${{
                      steps.get_version.outputs.VERSION}}.Windows-${{matrix.arch }}
              shell: pwsh
              run: |
                  New-Item -ItemType Directory ${env:archiveName}
                  Copy-Item -Path .\app\* -Destination ${env:archiveName}\ -recurse -Force
                  windeployqt --qmldir . ${env:archiveName}\bin\${env:targetName} ${env:archiveName}\bin\jmbdemodels.dll ${env:archiveName}\bin\jmbdequick.dll ${env:archiveName}\bin\jmbdewidgets.dll
                  Compress-Archive -Path ${env:archiveName}/bin ${env:archiveName}'.zip'
                  $name = ${env:archiveName}
                  Write-Host 'Name: ' $name
                  echo "packageName=$name" >> $GITHUB_ENV
                  Write-Host 'packageName:' ${env:packageName}

            - name: Inno package
              working-directory: ${{runner.workspace}}/build
              env:
                  archiveName:
                      jmbde.${{steps.get_version.outputs.VERSION}}.Windows-${{matrix.arch
                      }}
              shell: bash
              # Copy and windeplyqt came from ZIP Package
              # New-Item -ItemType Directory ${env:archiveName}
              # Copy-Item -Path .\app\* -Destination ${env:archiveName}\ -recurse -Force
              # windeployqt --qmldir . ${env:archiveName}\bin\${env:targetName} ${env:archiveName}\bin\jmbdemodels.dll ${env:archiveName}\bin\jmbdequick.dll ${env:archiveName}\bin\jmbdewidgets.dll
              run: |
                  iscc $GITHUB_WORKSPACE/packaging/win/installer_Qt5_x64.iss  -DMyAppVersion=${{ steps.get_version.outputs.VERSION }} -DMyProjectRoot=$(pwd) -DMyOutRoot=$(pwd)/$archiveName/bin
                  cp jmbde-setup.exe jmbde-${{ steps.get_version.outputs.VERSION}}-windows-${{matrix.arch}}-Qt${{matrix.qt_version}}-${{ matrix.build_type }}.exe

            - name: cpack
              working-directory: ${{runner.workspace}}/build
              shell: pwsh
              env:
                  TYPE: ${{matrix.type}}
              run: |
                  if ($env:TYPE -eq "installer")
                  {
                      cpack -G WIX -B "$env:GITHUB_WORKSPACE\build\Package"
                  }
                  Elseif($env:TYPE -eq "protable")
                  {
                      cpack -G ZIP -B "$env:GITHUB_WORKSPACE\build\Package"
                  }

            - name: MSI package
              working-directory: ${{runner.workspace}}/build
              env:
                  archiveName:
                      jmbde.${{ steps.get_version.outputs.VERSION
                      }}.Windows-${{matrix.arch }}
              shell: bash
              run: |
                  echo "Hello msi installer"

            - name: Windows - ${{ matrix.qt_version }} - Uploading artifact
              env:
                  archiveName:
                      jmbde.${{ steps.get_version.outputs.VERSION
                      }}.Windows-${{matrix.arch }}
              uses: actions/upload-artifact@v2.2.3
              with:
                  name:
                      jmbde-win-${{matrix.arch}}.qt${{
                      matrix.qt_version}}-${{matrix.build_type}}.zip
                  path: ${{runner.workspace}}/build/${{ env.archiveName }}.zip

            - name:
                  Windows - ${{ matrix.qt_version }}.${{matrix.arch}}. - Upload binaries
                  to release
              uses: svenstaro/upload-release-action@v2
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file:
                      ${{runner.workspace}}/build/jmbde-${{steps.get_version.outputs.VERSION}}-windows-${{matrix.arch}}-Qt${{matrix.qt_version}}-${{
                      matrix.build_type }}.exe
                  asset_name:
                      jmbde-${{steps.get_version.outputs.VERSION}}-windows-${{matrix.arch}}-Qt${{matrix.qt_version}}-${{matrix.build_type
                      }}.exe
                  tag: ${{ github.ref }}
                  overwrite: true
