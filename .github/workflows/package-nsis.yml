name: Windows NSIS Installer

on:
    push:
        branches:
            - master
            - develop
        paths-ignore:
            - "README.md"
            - "LICENSE"

    pull_request:
        paths-ignore:
            - "README.md"
            - "LICENSE"
    release:
        types: [published]

env:
    QT_VERSION: 5.15.0
    CMAKE_VERSION: 3.18.0
    NINJA_VERSION: 1.10.0
    CCACHE_VERSION: 3.7.11
    GOOGLE_TEST_VERSION: 1.10.0
    BUILD_TYPE: Release

jobs:
    check_commit_msg:
        outputs:
            commit_message: ${{ steps.get_message.outputs.message }}
        name: Check if the workflow has been disabled.
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get commit message
              id: get_message
              run: |
                  echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
                  echo "::set-env name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
    build:
        needs: check_commit_msg
        if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_NSIS') }}
        strategy:
            matrix:
                qt_version: [5.15.0]
                platform: [windows-latest]
                arch: [x86, x64]
                include:
                    - platform: windows-latest
                      arch: x86
                      qtarch: win32_msvc2019
                    - platform: windows-latest
                      arch: x64
                      qtarch: win64_msvc2019_64
            fail-fast: false

        runs-on: ${{ matrix.platform }}
        env:
            _QV2RAY_BUILD_INFO_: "Qv2ray built from Github Action"
            _QV2RAY_BUILD_EXTRA_INFO_: "qt${{ matrix.qt_version }}-${{ github.sha }}-ci.${{ matrix.platform }}"

        steps:
            - name: Get the version
              id: get_version
              shell: bash
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)
            - name: Checking out sources
              uses: actions/checkout@v2
            - name: Install Python 3.7 version
              uses: actions/setup-python@v1
              with:
                  python-version: "3.8"
                  architecture: ${{ matrix.arch }}
            - name: Restoring submodules
              run: git submodule update --init
            # =========================================================================================================
            - name: Install MSVC compiler
              uses: ilammy/msvc-dev-cmd@v1
              with:
                  # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from Qv2ray-deps repo
                  toolset: 14.2
                  arch: ${{ matrix.arch }}
            - name: Cache Qt
              id: cache-qt
              uses: actions/cache@v1
              with:
                  path: ../Qt
                  key: QtCache-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.qt_version }}
            - name: Installing Qt - ${{ matrix.arch }}
              uses: jurplel/install-qt-action@v2
              with:
                  version: ${{ matrix.qt_version }}
                  arch: ${{ matrix.qtarch }}
                  mirror: "http://mirrors.ocf.berkeley.edu/qt/"
                  cached: ${{ steps.cache-qt.outputs.cache-hit }}
            # =========================================================================================================
            - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Setup Ninja
              if: matrix.platform == 'windows-latest'
              uses: ashutoshvarma/setup-ninja@master
              with:
                  # ninja version to download. Default: 1.10.0
                  version: 1.10.0

            # === Winodws =====================================
            - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Build preparation - Download Dependencies
              shell: bash
              run: |
                  choco install -y png2ico
                  choco install -y innosetup

            - name: conan_and_ecm
              id: conan_and_ecm
              run: |
                  python -m pip install conan
                  conan user
                  conan create ./conan/ecm

            # ========================================================================================================= Generate MakeFile and Build
            - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Generate Dependencies and Build
              shell: pwsh
              env:
                  CC: cl.exe
                  CXX: cl.exe
              run: |
                  New-Item -Path "." -Name "build" -ItemType "directory"
                  Set-Location "build"
                  New-Item -Path "." -Name "deployment" -ItemType "directory"
                  if ($matrix.arch -EQ 'x64') {
                    $conan_arch = 'x86_64'
                  }Â else {
                    $conan_arch = 'x86'
                  }
                  conan install .. -s arch=$conan_arch
                  cmake .. -GNinja -DCMAKE_INSTALL_PREFIX=./deployment -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
                  cmake --build . --parallel $(nproc)
                  cmake --install .
            - name: Windows - Get package name
              shell: bash
              id: get_package
              run: |
                  echo ::set-output name=NAME::$(basename build/qv2ray-*.exe)
            - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - uploading artifact
              uses: actions/upload-artifact@master
              with:
                  name: Qv2ray-${{ github.sha }}.Windows-${{ matrix.arch }}.qt${{ matrix.qt_version }}.exe
                  path: build/${{ steps.get_package.outputs.NAME }}
            - name: Win-${{ matrix.arch }} - ${{ matrix.qt_version }} - Upload binaries to release
              uses: svenstaro/upload-release-action@v1-release
              if: github.event_name == 'release'
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file: build/${{ steps.get_package.outputs.NAME }}
                  asset_name: ${{ steps.get_package.outputs.NAME }}
                  tag: ${{ github.ref }}
                  overwrite: true
