name: ninja-build AppImage

on:
    push:
        branches:
            - master
            - develop
        paths-ignore:
            - "README.md"
            - "LICENSE"

    pull_request:
        paths-ignore:
            - "README.md"
            - "LICENSE"
    release:
        types: [published]

env:
    QT_VERSION: 5.15.0
    CMAKE_VERSION: 3.18.0
    NINJA_VERSION: 1.10.0
    CCACHE_VERSION: 3.7.11
    GOOGLE_TEST_VERSION: 1.10.0
    BUILD_TYPE: Release

jobs:
    check_commit_msg:
        outputs:
            commit_message: ${{ steps.get_message.outputs.message }}
        name: Check if the workflow has been disabled.
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get commit message
              id: get_message
              run: |
                  echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
                  echo "::set-env name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
    build:
        needs: check_commit_msg
        if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_MAIN') }}
        strategy:
            matrix:
                qt_version: [5.15.0]
                platform: [ubuntu-latest]
                arch: [x86, x64]
            fail-fast: false

        runs-on: ${{ matrix.platform }}
        steps:
            - name: Get the version
              id: get_version
              shell: bash
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

            - name: Checking out sources
              uses: actions/checkout@v2
              with:
                  submodules: "recursive"

            - name: Restoring submodules
              run: git submodule update --init

            - name: Linux - ${{ matrix.qt_version }} - Build preparation - Install Packages
              run: |
                  sudo apt update
                  sudo apt install -y build-essential ninja-build qtbase5-dev qttools5-dev qttools5-dev-tools libqt5help5 cmake pkgconf fcitx-frontend-qt5 python

            - name: conan_and_ecm
              id: conan_and_ecm
              shell: bash
              env:
                  CC: /usr/bin/gcc-7
                  CXX: /usr/bin/g++-7
              run: |
                  python -m pip install conan
                  conan user
                  conan create ./conan/ecm

            # ========================================================================================================= Generate MakeFile and Build
            - name: Linux - ${{ matrix.qt_version }} - Generate Dependencies and Build
              shell: bash
              env:
                  CC: /usr/bin/gcc-7
                  CXX: /usr/bin/g++-7
              run: |
                  mkdir build
                  cd build
                  conan install ..
                  cmake .. -GNinja -DCMAKE_INSTALL_PREFIX=./AppDir/usr -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
                  cmake --build . --parallel $(nproc)
                  cmake --install .

            # ========================================================================================================= Deployments
            - name: Linux - ${{ matrix.qt_version }} - Generating AppImage
              run: |
                  cd build
                  wget https://github.com/probonopd/linuxdeployqt/releases/download/7/linuxdeployqt-7-x86_64.AppImage
                  chmod +x ./linuxdeployqt-7-x86_64.AppImage
                  ./linuxdeployqt-7-x86_64.AppImage --appimage-extract
                  cd AppDir
                  wget -c https://github.com/darealshinji/AppImageKit-checkrt/releases/download/continuous/AppRun-patched-x86_64 -O AppRun
                  chmod a+x AppRun
                  mkdir -p ./usr/{lib,optional}/
                  wget -c https://github.com/darealshinji/AppImageKit-checkrt/releases/download/continuous/exec-x86_64.so -O ./usr/optional/exec.so
                  mkdir -p ./usr/optional/libstdc++/
                  cp -fv /usr/lib/x86_64-linux-gnu/libstdc++.so.6 ./usr/optional/libstdc++/
                  mkdir -p ./usr/optional/libgcc_s/
                  cp -fv /lib/x86_64-linux-gnu/libgcc_s.so.1 ./usr/optional/libgcc_s/
                  cp -fv /usr/lib/x86_64-linux-gnu/{libssl.so.1.1,libcrypto.so.1.1} ./usr/lib/
                  mkdir -p ./usr/plugins/platforminputcontexts/
                  cp -fv /usr/lib/x86_64-linux-gnu/qt5/plugins/platforminputcontexts/libfcitxplatforminputcontextplugin.so ./usr/plugins/platforminputcontexts/
                  cd ..
                  squashfs-root/AppRun AppDir/usr/share/applications/lemon-lime.desktop -appimage -no-strip -always-overwrite -qmake=/usr/lib/x86_64-linux-gnu/qt5/bin/qmake
                  ls .
                  mv ./jmbde*.AppImage ./jmbde.AppImage

            - name: Linux - ${{ matrix.qt_version }} - Uploading artifact
              uses: actions/upload-artifact@v2
              with:
                  name: jmbde-${{ github.sha }}.linux-${{ matrix.arch }}.qt${{ matrix.qt_version }}.AppImage
                  path: build/jmbde.AppImage

            - name: Linux - ${{ matrix.qt_version }} - Upload binaries to release
              uses: svenstaro/upload-release-action@v1-release
              if: github.event_name == 'release' && matrix.platform == 'ubuntu-16.04' && matrix.qt_version == '5.15.0'
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file: build/jmbde.AppImage
                  asset_name: jmbde.${{ steps.get_version.outputs.VERSION }}.linux-${{ matrix.arch }}.AppImage
                  tag: ${{ github.ref }}
                  overwrite: true
