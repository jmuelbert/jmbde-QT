---
name: "CD: appimage Qt5 package"

on:
    push:
        branches:
            - "master"
        paths-ignore:
            - 'docs/**'
            - '.github/ISSUE_TEMPLATE/**'
            - 'docker/**'
            - '**.md'
            - '!docs/building-cmake.md'
            - 'changelog.txt'
            - 'LICENSE'
            - '.github/**'
            - '!.github/workflows/appimage.yml'
            - 'snap/**'
            - 'build/**'
            - 'assets/**'
            - 'Docker/**'
            - 'report/**'
            - 'resources/**'
    pull_request:
        branches:
            - "master"
        types: [opened, reopened]
        paths-ignore:
            - 'docs/**'
            - '.github/ISSUE_TEMPLATE/**'
            - 'docker/**'
            - '**.md'
            - '!docs/building-cmake.md'
            - 'changelog.txt'
            - 'LICENSE'
            - '.github/**'
            - '!.github/workflows/appimage.yml'
            - 'snap/**'
            - 'build/**'
            - 'assets/**'
            - 'Docker/**'
            - 'report/**'
            - 'resources/**'

    release:
        types: [published]

env:
    PRODUCT: jmbde
    targetName: jmbde
    QT_VERSION: 5.15.2

jobs:
    check_commit_msg:
        outputs:
            commit_message: ${{ steps.get_message.outputs.message }}
        name: Check if the workflow has been disabled.
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get commit message
              id: get_message
              run: |
                  echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
    build:
        needs: check_commit_msg
        if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_MAIN') }}
        strategy:
            matrix:
                platform: [ubuntu-16.04]
                build_type: [Release]
                arch: [x64]
            fail-fast: false

        runs-on: ${{ matrix.platform }}
        steps:
            - name: Get the version
              id: get_version
              shell: bash
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

            - name: Checking out sources
              uses: actions/checkout@v2
              with:
                  submodules: "recursive"
            - name: Install Python 3.x version
              uses: actions/setup-python@v2.2.2
              with:
                  python-version: "3.x"
                  architecture: ${{ matrix.arch }}

            - name: Restoring submodules
              run: git submodule update --init

            - name: Cache Qt
              id: cache-qt
              uses: actions/cache@v2.1.5
              with:
                  path: ../Qt
                  key:
                      QtCache-${{ matrix.platform }}-${{ matrix.arch }}-${{
                      env.QT_VERSION }}
            - name: Installing Qt - ${{ matrix.arch }}
              uses: jurplel/install-qt-action@v2
              with:
                  version: ${{  env.QT_VERSION }}
                  arch: ${{ matrix.qtarch }}
                  cached: ${{ steps.cache-qt.outputs.cache-hit }}

            - name:
                  Linux - ${{  env.QT_VERSION }} - Build preparation - Install Packages
              run: |
                  sudo apt update
                  sudo apt install -y build-essential ninja-build cmake pkgconf fcitx-frontend-qt5 libxcb-xinerama0 libgl-dev libx11-dev libxkbcommon-x11-dev libxcb-image0-dev libxcb-icccm4-dev libssl-dev libxcb-keysyms1 libxcb-render-util0

            - name: Install conan
              id: conan
              run: |
                  pip3 install --upgrade pip
                  pip3 install conan
                  conan user

            - name: Create Build Environment
              # Some projects don't allow in-source building, so create a separate build directory
              # We'll use this as our working directory for all subsequent commands
              run: cmake -E make_directory ${{runner.workspace}}/build

            - name: Configure CMake
              # Use a bash shell so we can use the same syntax for environment variable
              # access regardless of the host operating system
              shell: bash
              working-directory: ${{runner.workspace}}/build
              # Note the current convention is to use the -S and -B options here to specify source
              # and build directories, but this is only available with CMake 3.13 and higher.
              # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
              run: |
                  cmake $GITHUB_WORKSPACE \
                    -GNinja \
                    -DCMAKE_INSTALL_PREFIX=./AppDir/usr \
                    -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                    -DJMBDE_BUILD_INFO="Build for AppImage" \
                    -DJMBDE_BUILD_EXTRA_INFO="Build on $(uname -sr)" \
                    -DBUILD_TRANSLATIONS=ON

            - name: Build
              working-directory: ${{runner.workspace}}/build
              shell: bash
              # Execute the build.  You can specify a specific target with "--target <NAME>"
              run:
                  cmake --build . --config ${{ matrix.build_type }} -j2 --target install

            - name: Get go-appimage tool
              working-directory: ${{runner.workspace}}/build
            # Will not use linuxdeployqt anymore, because it suopprts currently still-supported mainstream distribution,
            # which is glibc 2.23. For more information, please see https://github.com/probonopd/linuxdeployqt/issues/340.
            # Will try new tool https://github.com/probonopd/go-appimage written in golang by probonopd.
              run: |
                wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases -O - \
                |Â grep "appimagetool-.*-${APPIMAGETOOL_ARCH}.AppImage" | head -n 1 | cut -d '"' -f 2) -O appimagetool
                chmod +x appimagetool
              env:
                APPIMAGETOOL_ARCH: x86_64

            # ========================================================================================================= Deployments
            - name: Linux - ${{  env.QT_VERSION }} - Generating AppImage
              working-directory: ${{runner.workspace}}/build
              run: |
                  wget https://github.com/probonopd/linuxdeployqt/releases/download/7/linuxdeployqt-7-x86_64.AppImage
                  chmod +x ./linuxdeployqt-7-x86_64.AppImage
                  cd AppDir
                  wget -c https://github.com/darealshinji/AppImageKit-checkrt/releases/download/continuous/AppRun-patched-x86_64 -O AppRun
                  chmod a+x AppRun
                  mkdir -p ./usr/{lib,optional}/
                  wget -c https://github.com/darealshinji/AppImageKit-checkrt/releases/download/continuous/exec-x86_64.so -O ./usr/optional/exec.so
                  mkdir -p ./usr/optional/libstdc++/
                  cp -fv /usr/lib/x86_64-linux-gnu/libstdc++.so.6 ./usr/optional/libstdc++/
                  mkdir -p ./usr/optional/libgcc_s/
                  cp -fv /lib/x86_64-linux-gnu/libgcc_s.so.1 ./usr/optional/libgcc_s/
                  cp -fv /usr/lib/x86_64-linux-gnu/{libssl.so.1.1,libcrypto.so.1.1} ./usr/lib/
                  cd ..
                  cp $GITHUB_WORKSPACE/assets/icons/256-apps-jmbde.png ./AppDir/jmbde.png
                  export LD_LIBRARY_PATH=./AppDir/usr/lib/x86_64-linux-gnu:$LD_LIBRARY_PATH
                  ./linuxdeployqt-7-x86_64.AppImage ./AppDir/usr/share/applications/io.github.jmuelbert.jmbde.desktop -appimage -no-strip -always-overwrite -extra-plugins=iconengines,imageformats,platforminputcontexts -verbose=1
                  mv ./jmbde*.AppImage  ${{runner.workspace}}/build/jmbde.AppImage

            - name: Linux - ${{  env.QT_VERSION }} - Uploading artifact
              uses: actions/upload-artifact@v2.2.3
              with:
                  name:
                      jmbde-${{ github.sha }}-linux-${{ matrix.arch
                      }}-qt${{env.QT_VERSION}}-${{ matrix.build_type }}.AppImage
                  path: ${{runner.workspace}}/build/jmbde.AppImage

            - name: Linux - ${{  env.QT_VERSION }} - Upload binaries to release
              uses: svenstaro/upload-release-action@v2
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file: ${{runner.workspace}}/build/jmbde.AppImage
                  asset_name:
                      jmbde-${{ steps.get_version.outputs.VERSION}}-linux-${{matrix.arch
                      }}-qt${{ env.QT_VERSION }}-${{matrix.build_type }}.AppImage
                  tag: ${{ github.ref }}
                  overwrite: true
