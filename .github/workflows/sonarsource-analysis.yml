---
name: Sonar Cloud Analysis
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  schedule: # This trigger is here only to make sure
    - cron: '17 0 * * SUN' # the example itself doesn't become stale

jobs:
  build:
    name: Sonar Cloud Analysis
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION:
        4.6.1.2450 # Find the latest version in the "Linux" link on this page:
        # https://sonarcloud.io/documentation/analysis/scan/sonarscanner/
      SONAR_SERVER_URL: 'https://sonarcloud.io'
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
      DISPLAY: ':99'

    strategy:
      matrix:
        qt_target: [desktop]
        os: [ubuntu-latest]
        name: [Ubuntu-20.04 gcc-10]
        qt_version: [6.2.0]
        qt_arch: [gcc_64]
        arch: [amd64]
        artifact: [Ubuntu-gcc]
        cmake_generator: [Ninja]
        build_type: [Debug]
      fail-fast: true

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Install Dependencies for ${{ runner.os }}
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
           python3 \
          python3-pip \
          fuse \
          patchelf \
          build-essential \
          extra-cmake-modules \
          appstream \
          hicolor-icon-theme \
          fcitx-frontend-qt5 \
          openssl \
          ca-certificates \
          lcov gcovr

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Download and set up sonar-scanner
        env:
          SONAR_SCANNER_DOWNLOAD_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
        run: |
          mkdir -p $HOME/.sonar
          curl -sSLo $HOME/.sonar/sonar-scanner.zip ${{ env.SONAR_SCANNER_DOWNLOAD_URL }} 
          unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH

      - name: Download and set up build-wrapper
        env:
          BUILD_WRAPPER_DOWNLOAD_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          curl -sSLo $HOME/.sonar/build-wrapper-linux-x86.zip ${{ env.BUILD_WRAPPER_DOWNLOAD_URL }}
          unzip -o $HOME/.sonar/build-wrapper-linux-x86.zip -d $HOME/.sonar/
          echo "$HOME/.sonar/build-wrapper-linux-x86" >> $GITHUB_PATH

      - name: Xvfb install and run for ${{ runner.os }}
        run: |
          sudo apt-get install -y xvfb
          Xvfb -ac ${{ env.DISPLAY }} -screen 0 1280x780x24 &

      - name: Get latest CMake
        uses: lukka/get-cmake@latest

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Get conan
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build

        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake $GITHUB_WORKSPACE \
            -G ${{matrix.cmake_generator}} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type}} \
            -DCMAKE_INSTALL_PREFIX:PATH=$(pwd)/usr \
            -DBUILD_TESTING=ON  \
            -DBUILD_TRANSLATIONS=ON \
            -DBUILD_COVERAGE=YES

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          $GITHUB_PATH/build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build . --config Debug -j$(nproc)

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -VV -C ${{ matrix.build_type}}

      - name: Generate coverage reports
        working-directory: ${{runner.workspace}}/build
        run: |
          lcov -v
          gcov -v 

          lcov --capture --directory . --output-file coverage.info
          lcov --remove coverage.info '/usr/*' '*/usr/include/*' --output-file coverage.info
          lcov --list coverage.info
          gcovr -j $(nproc) --root ../ --keep --delete --sonarqube coverage.xml

      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          files: ${{runner.workspace}}/coverage.info

      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner
            --define sonar.host.url="${{ env.SONAR_SERVER_URL }}"
            --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" 
            --define sonar.coverageReportPaths=${{runner.workspace}}/coverage.xml
