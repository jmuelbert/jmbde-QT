name: "CI Build Windows - MSI"

on:
    push:
        branches:
            - master
            - develop
        paths-ignore:
            - "README.md"
            - "LICENSE"

    pull_request:
        paths-ignore:
            - "README.md"
            - "LICENSE"
    release:
        types: [published]

jobs:
    check_commit_msg:
        outputs:
            commit_message: ${{ steps.get_message.outputs.message }}
        name: Check if the workflow has been disabled.
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get commit message
              id: get_message
              run: |
                  echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
                  echo "::set-env name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"
    build:
        needs: check_commit_msg
        if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_MAIN') }}

        strategy:
            matrix:
                qt_version: [5.15.1]
                platform: [windows-latest]
                arch: [x86, x64]
                build_type: [Release]
                include:
                    - platform: windows-latest
                      arch: x86
                      qtarch: win32_msvc2019
                      build_type: Release
                    - platform: windows-latest
                      arch: x64
                      qtarch: win64_msvc2019_64
                      build_type: Release

            fail-fast: false

        runs-on: ${{ matrix.platform }}

        steps:
            - name: Get the version
              id: get_version
              shell: bash
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

            - name: Checking out sources
              uses: actions/checkout@v2

            - name: Restoring submodules
              run: git submodule update --init

            - name: Install Python 3.x
              uses: actions/setup-python@v2.1.3
              with:
                  python-version: "3.*"
                  architecture: ${{ matrix.arch }}

            # === Windows =====================================
            - name: Install MSVC compiler
              if: matrix.platform == 'windows-latest'
              uses: ilammy/msvc-dev-cmd@v1.4.0
              with:
                  # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from Qv2ray-deps repo
                  toolset: 14.2
                  arch: ${{ matrix.arch }}

            - name: Cache Qt-Windows-${{ matrix.platform }}-${{ matrix.arch }}-${{  matrix.qt_version }}
              id: cache-qt
              uses: actions/cache@v2.1.1
              with:
                  path: ../Qt
                  key: QtCache-${{ matrix.platform }}-${{ matrix.arch }}-${{  matrix.qt_version }}

            - name: Installing Qt - ${{  matrix.qt_version }}
              uses: jurplel/install-qt-action@v2
              with:
                  version: ${{  matrix.qt_version }}
                  arch: ${{ matrix.qtarch }}
                  mirror: "http://mirrors.ocf.berkeley.edu/qt/"
                  cached: ${{ steps.cache-qt.outputs.cache-hit }}

            # === Winodws =====================================
            - name: Win-${{ matrix.arch }} - ${{  matrix.qt_version }} - Build preparation - Download Dependencies
              shell: bash
              run: |
                  choco install -y ninja
                  choco install -y png2ico
                  choco install -y innosetup

            - name: conan_and_ecm
              id: conan_and_ecm
              run: |
                  python -m pip install conan
                  conan user
                  conan create ./conan/ecm
            # === Windows Build =====================================
            - name: Win-${{ matrix.arch }} - ${{  matrix.qt_version }} - Generate Dependencies and Build
              shell: pwsh
              if: matrix.platform == 'windows-latest'
              env:
                  CC: cl.exe
                  CXX: cl.exe
              run: |
                  New-Item -Path "." -Name "build" -ItemType "directory"
                  Set-Location "build"
                  New-Item -Path "." -Name "deployment" -ItemType "directory"
                  if ($matrix.arch -EQ 'x64') {
                    $conan_arch = 'x86_64'
                  } else {
                    $conan_arch = 'x86'
                  }
                  conan install .. -s arch=$conan_arch
                  cmake .. -GNinja -DCMAKE_INSTALL_PREFIX:PATH=./program -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
                  cmake --build . --parallel $(nproc)
                  cmake --install .
            - name: Win-${{ matrix.arch }} - ${{  matrix.qt_version }} - Qt Deploy
              shell: pwsh
              if: matrix.platform == 'windows-latest'
              run: |
                  Set-Location "build/program"
                  Get-ChildItem $ENV
                  windeployqt --qmldir . bin/jmbde.exe bin/jmbdewidgets.dll bin/jmbdemodels.dll

            - name: Win-${{ matrix.arch }} - ${{  matrix.qt_version }} - Build MSI Installer
              shell: pwsh
              if: matrix.platform == 'windows-latest'
              run: |
                  Set-Location "build"
                  # iscc ./installer_${{ matrix.arch }}.iss -DMyAppVersion=${{ steps.get_version.outputs.VERSION }}

            - name: Release on Windows
              if: matrix.config.os == 'windows-latest' # && ( matrix.qt_version == '5.15.0') # && startsWith(github.ref, 'refs/tags')
              uses: softprops/action-gh-release@v1
              with:
                  draft: true
                  path: build/jmbde*.exe
                  prerelease: ${{ steps.get_version.outputs.ISBETA }}
                  files: jmbde-${{ steps.get_version.outputs.VERSION }}-${{ matrix.arch }}-setup.exe
                  name: JMBDE ${{ steps.get_version.outputs.VERSION }}
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
