---
name: Packaging(Windows)

on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'docker/**'
      - '**.md'
      - '!docs/building-cmake.md'
      - 'changelog.txt'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/windows-pack.yml'
      - 'snap/**'
      - 'build/**'
      - 'assets/**'
      - 'Docker/**'
      - 'report/**'
      - 'resources/**'
  pull_request:
    branches:
      - 'master'
    types: [opened, reopened]
    paths-ignore:
      - 'docs/**'
      - '.github/ISSUE_TEMPLATE/**'
      - 'docker/**'
      - '**.md'
      - '!docs/building-cmake.md'
      - 'changelog.txt'
      - 'LICENSE'
      - '.github/**'
      - '!.github/workflows/windows-pack.yml'
      - 'snap/**'
      - 'build/**'
      - 'assets/**'
      - 'Docker/**'
      - 'report/**'
      - 'resources/**'

env:
  PRODUCT: jmbde
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  windows-pack:
    name: VS 2019 ${{ matrix.config.arch }}-${{matrix.qt_version}}-${{ matrix.type}}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        qt_version: [5.15.2, 6.1.0]
        qt_target: [desktop]
        type: [portable, installer]
        config:
          - {
              name: 'Windows Latest MSVC',
              artifact: 'Windows-MSVC',
              os: windows-2019,
              arch: x64,
              generator: "-G'Visual Studio 16 2019' -A x64",
              qt_arch: win64_msvc2019_64,
              qt_arch_install: msvc2019_64,
              pak_arch: win64,
              cc: 'cl',
              cxx: 'cl',
            }
      fail-fast: false

    steps:
      - name: Checkout Source Code
        if: github.event_name == 'push'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      #          ref: master

      - name: Checkout Source Code
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set env & Print jmbde version
        shell: bash
        run: |
          last_committed_tag=$(git tag -l --sort=-v:refname | head -1)
          git_revno=$(git rev-list $(git describe --tags --abbrev=0)..HEAD --count)
          git_hash=$(git rev-parse --short HEAD)
          echo "=======jmbde VERSION========"
          echo ${last_committed_tag:1}
          echo "Details: ${last_committed_tag}+git${git_revno}.${git_hash}"
          echo "================================"
          # This will allow to build pre-preleases without git tag
          # echo "VERSION=${last_committed_tag:1}" >> $GITHUB_ENV
          echo "VERSION=$(cat CMakeLists.txt |grep 'set.*(.*jmbde_VERSION' | sed 's/[^0-9.]*//' |sed 's/)//g')" >> $GITHUB_ENV

      - name: Install MSVC compiler
        uses: ilammy/msvc-dev-cmd@v1.9.0
        with:
          # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build from Qv2ray-deps repo
          toolset: 14.2
          arch: ${{ matrix.config.pak_arch }}

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v2.1.6
        with:
          path: ./build/Qt/${{ matrix.qt_version }}/${{ matrix.config.qt_arch_install }}
          key: ${{ runner.os }}-QtCache/${{ matrix.qt_ver }}/${{ matrix.config.qt_arch }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.config.qt_arch }}
          dir: '${{ github.workspace }}/build/'
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Get conan
        id: conan
        uses: turtlebrowser/get-conan@v1.0

      - name: Install Build deps
        run: |
          cinst png2ico

      - name: Configure
        shell: pwsh
        working-directory: build
        run: |
          cmake $env:GITHUB_WORKSPACE `
            ${{matrix.config.generator}}  `
            -DCMAKE_BUILD_TYPE="$env:BUILD_TYPE"  `
            -DBUILD_TESTING=OFF  `
            -DBUILD_TRANSLATIONS=ON `
            -DCMAKE_INSTALL_PREFIX:PATH=./app `
            -DRUN_IN_PLACE=${{ contains(matrix.type, 'portable') }}

      - name: Compile
        shell: pwsh
        working-directory: build
        run: cmake --build . --config "$env:BUILD_TYPE" -j2 --target install

      - name: CPack
        env:
          TYPE: ${{matrix.type}}
          QT_MAIN_VER6: ${{ contains(matrix.config.qt_version, '[6]')}}
          CONFIG_ARCH: ${{matrix.config.arch}}
          ARCHIVE_NAME: $GITHUB_WORKSPACE/build/Package/$PRODUCT.$VERSION.Windows-$CONFIG_ARCH
        working-directory: build
        shell: bash
        run: |
          if [ ${TYPE} = "installer" ]; then
            # Use Innosetup for now
            #  cpack -G WIX -B "$env:GITHUB_WORKSPACE\build\Package"
            #
            ls
            mkdir -p $GITHUB_WORKSPACE/build/Package
            ls
            mkdir -p $GITHUB_WORKSPACE/build/Package/$PRODUCT.$VERSION.Windows-$CONFIG_ARCH
            ls Package
            cp -rv ./app/* ./Package/$PRODUCT.$VERSION.Windows-$CONFIG_ARCH
            windeployqt --qmldir . ./Package/$PRODUCT.$VERSION.Windows-$CONFIG_ARCH/bin/$PRODUCT.exe ./Package/$PRODUCT.$VERSION.Windows-$CONFIG_ARCH/bin/${PRODUCT}models.dll ./Package/$PRODUCT.$VERSION.Windows-$CONFIG_ARCH/bin/${PRODUCT}quick.dll ./Package/$PRODUCT.$VERSION.Windows-$CONFIG_ARCH/bin/${PRODUCT}widgets.dll
            if [Â ${QT_MAIN_VER6} = true ]; then
              iscc $GITHUB_WORKSPACE/packaging/win/installer_Qt6_x64.iss -DMyAppVersion=$VERSION -DMyProjectRoot=$(pwd) -DMyOutRoot=./Package/$PRODUCT.$VERSION.Windows-$CONFIG_ARCH
            else
              iscc $GITHUB_WORKSPACE/packaging/win/installer_Qt5_x64.iss -DMyAppVersion=$VERSION -DMyProjectRoot=$(pwd) -DMyOutRoot=./Package/$PRODUCT.$VERSION.Windows-$CONFIG_ARCH
            fi
          else
            cpack -G ZIP -B $GITHUB_WORKSPACE/build/Package
          fi

      - name: Package Clean
        env:
          TYPE: ${{matrix.type}}
        shell: pwsh
        run: |
          if ($env:TYPE -eq 'portable')
          {
            Remove-Item $env:GITHUB_WORKSPACE\build\Package\_CPack_Packages -Recurse
          }
          New-Item -Path $env:GITHUB_WORKSPACE\build\Package\installer -ItemType Directory
          New-Item -Path $env:GITHUB_WORKSPACE\build\Package\portable -ItemType Directory

      - name: Package Prepare (installer)
        if: matrix.type == 'installer'
        shell: pwsh
        run: |
          <#
          Move-Item -Path $env:GITHUB_WORKSPACE/build/Package/jmbde-*-${{ matrix.config.pak_arch }}.msi -Destination $env:GITHUB_WORKSPACE/build/Package/installer/jmbde-$env:VERSION-${{ matrix.config.pak_arch }}.msi
          #>
          Move-Item -Path $env:GITHUB_WORKSPACE/build/Package/jmbde-*-${{ matrix.config.pak_arch }}.exe -Destination $env:GITHUB_WORKSPACE/build/Package/installer/jmbde-$env:VERSION-${{ matrix.config.pak_arch }}.exe

      - name: Package Prepare (portable)
        if: matrix.type == 'portable'
        shell: pwsh
        run: |
          Move-Item -Path $env:GITHUB_WORKSPACE/build/Package/jmbde-*-${{ matrix.config.pak_arch }}.zip -Destination $env:GITHUB_WORKSPACE/build/Package/portable/jmbde-$env:VERSION-${{ matrix.config.pak_arch }}.zip

      - name: SHA256Sum of Windows installer(daily build)
        if: matrix.type == 'installer'
        shell: bash
        run: |
          sha256sum $GITHUB_WORKSPACE/build/Package/installer/jmbde-${VERSION}-${{ matrix.config.pak_arch }}.exe
          sha256sum $GITHUB_WORKSPACE/build/Package/installer/jmbde-${VERSION}-${{ matrix.config.pak_arch }}.exe > $GITHUB_WORKSPACE/build/Package/installer/jmbde-${VERSION}-${{ matrix.config.pak_arch }}.exe.sha256sum
          python -m pip install -U -q requests
          echo "============Windows installer sha256sum download link============"
          echo $(python $GITHUB_WORKSPACE/scripts/upload_services/transferwee.py upload $GITHUB_WORKSPACE/build/Package/installer/jmbde-${VERSION}-${{ matrix.config.pak_arch }}.exe.sha256sum)
          echo "=======no operation for you can see link in the log console====="

      - name: SHA256Sum of Windows portable(daily build)
        if: matrix.type == 'portable'
        shell: bash
        run: |
          sha256sum $GITHUB_WORKSPACE/build/Package/portable/jmbde-${VERSION}-${{ matrix.config.pak_arch }}.zip
          sha256sum $GITHUB_WORKSPACE/build/Package/portable/jmbde-${VERSION}-${{ matrix.config.pak_arch }}.zip > $GITHUB_WORKSPACE/build/Package/portable/jmbde-${VERSION}-${{ matrix.config.pak_arch }}.zip.sha256sum
          python -m pip install -U -q requests
          echo "===========Windows portable sha256sum download link============"
          echo $(python $GITHUB_WORKSPACE/scripts/upload_services/transferwee.py upload $GITHUB_WORKSPACE/build/Package/portable/jmbde-${VERSION}-${{ matrix.config.pak_arch }}.zip.sha256sum)
          echo "=====no operation for you can see link in the log console====="

      - name: Upload Windows installer(daily build)
        if: matrix.type == 'installer'
        shell: bash
        run: |
          python -m pip install -U -q requests
          echo "================Windows installer download link================"
          echo $(python $GITHUB_WORKSPACE/scripts/upload_services/transferwee.py upload $GITHUB_WORKSPACE/build/Package/installer/jmbde-${VERSION}-${{ matrix.config.pak_arch }}.msi)
          echo "=====no operation for you can see link in the log console====="

      - name: Upload Windows portable(daily build)
        if: matrix.type == 'portable'
        shell: bash
        run: |
          python -m pip install -U -q requests
          echo "=================Windows portable download link================"
          echo $(python $GITHUB_WORKSPACE/scripts/upload_services/transferwee.py upload $GITHUB_WORKSPACE/build/Package/portable/jmbde-${VERSION}-${{ matrix.config.pak_arch }}.zip)
          echo "=====no operation for you can see link in the log console====="

      - name: Artifact Upload
        uses: actions/upload-artifact@v2
        with:
          name: Windows-artifact
          path: ${{ github.workspace }}/build/Package/*
