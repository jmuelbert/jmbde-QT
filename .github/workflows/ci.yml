---
# SPDX-FileCopyrightText: ¬© 2016-2024 J√ºrgen M√ºlbert
#
# SPDX-License-Identifier: EUPL-1.2
#
name: "CI: Test, Build and create release"

on:
  push:
    branches:
      - main
      - develop
      - improve_build-workflow
    paths:
      - "**.{cpp,h,hpp,py,ts,qml}"
      - cmake/**
      - src/**
      - CMakeLists.txt
      - conanfile.py
      - ".github/workflows/ci.yml"
      - "snap/**"
      - "packaging/flatpak/*.yml"
    tags:
      - "*"
  pull_request:
    branches:
      - "main"
    types: [opened, reopened]
    paths:
      - "**.{cpp,h,hpp,py,ts,qml}"
      - cmake/**
      - src/**
      - CMakeLists.txt'
      - ".github/workflows/ci.yml"
      - "snap/**"
      - "packaging/flatpak/*.yml"
  release:
    types: [published]

  workflow_dispatch:

env:
  TARGET_NAME: "jmbde"
  QT_INSTALL_PREFIX: ${{ github.workspace }}/install
  QT_VERSION: 6.5.3

permissions:
  contents: read

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  tests:
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    name: ${{ matrix.toolchain }} ${{ matrix.build_type }} ${{ matrix.std }} ${{ matrix.formatting }}
    runs-on: ${{ matrix.os }}
    needs:
      - cmake-format
      - clang-format

    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        std: [20]
        formatting: ["std::format"]
        build_type: ["Debug"]
        toolchain:
          - linux-gcc12
          - linux-gcc13
          - linux-clang16
          - linux-clang17
          - windows-2019-msvc
          - windows-2022-msvc
          - macos-clang

        include:
          - toolchain: linux-gcc12
            os: ubuntu-22.04
            compiler: {type: GCC, version: 12, cc: "gcc-12", cxx: "g++-12"}
            cxx_modules: "False"
            conan_config: ""
            GCOV: gcovr
            CMAKE_GENERATOR: "Unix Makefiles"
            QT_ARCH: "gcc_64"
            QT_HOST: linux
            QT_ARCHIVES: ""
            QT_MODULES: ""
            QT_TOOLS: ""

          - toolchain: linux-gcc13
            os: ubuntu-22.04
            compiler: {type: GCC, version: 13, cc: "gcc-13", cxx: "g++-13"}
            cxx_modules: "False"
            conan_config: ""
            GCOV: gcovr
            CMAKE_GENERATOR: "Unix Makefiles"
            QT_ARCH: "gcc_64"
            QT_HOST: linux
            QT_ARCHIVES: ""
            QT_MODULES: ""
            QT_TOOLS: ""

          - toolchain: linux-clang16
            os: ubuntu-22.04
            compiler: {type: CLANG, version: 16, cc: "clang-16", cxx: "clang++-16"}
            lib: "libc++"
            cxx_modules: "False"
            conan_config: ""
            GCOV: "llvm-cov gcovr"
            CMAKE_GENERATOR: "Ninja Multi-Config"
            QT_ARCH: "gcc_64"
            QT_HOST: linux
            QT_ARCHIVES: ""
            QT_MODULES: ""
            QT_TOOLS: ""

          - toolchain: linux-clang17
            os: ubuntu-22.04,
            compiler: {type: CLANG, version: 17, cc: "clang-17", cxx: "clang++-17"}
            lib: "libc++"
            cxx_modules: "True"
            conan_config: ""
            GCOV: "llvm-cov gcovr"
            CMAKE_GENERATOR: "Ninja Multi-Config"
            QT_ARCH: "gcc_64"
            QT_HOST: linux
            QT_ARCHIVES: ""
            QT_MODULES: ""
            QT_TOOLS: ""

          - toolchain: windows-2019-msvc
            os: windows-2019
            arch: x64
            compiler: {type: VISUAL, version: 16, cc: "", cxx: ""}
            conan_config: ""
            msvc_toolset: "14.2"
            CMAKE_GENERATOR: "Visual Studio 16 2019"
            QT_ARCH: "win64_msvc2019_64"
            QT_HOST: windows
            QT_ARCHIVES: ""
            QT_MODULES: ""
            QT_TOOLS: ""

          - toolchain: windows-2022-msvc
            os: windows-2022
            arch: x64
            compiler: {type: MSVC, version: 193, cc: "", cxx: ""}
            conan_config: ""
            msvc_toolset: "14.3"
            CMAKE_GENERATOR: "Visual Studio 17 2022"
            QT_ARCH: "win64_msvc2019_64"
            QT_HOST: windows
            QT_ARCHIVES: ""
            QT_MODULES: ""
            QT_TOOLS: ""

          - toolchain: macos-clang
            os: macos-13,
            compiler: {type: APPLE_CLANG, version: "15.1", cc: "clang", cxx: "clang++"}
            cxx_modules: "False"
            conan_config: ""
            CMAKE_GENERATOR: "Ninja Multi-Config"
            QT_ARCH: "clang_64"
            QT_HOST: mac
            QT_ARCHIVES: ""
            QT_MODULES: ""
            QT_TOOLS: ""

    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
      CMAKE_GENERATOR: ${{ matrix.CMAKE_GENERATOR }}
      CMAKE_BUILD_TYPE: ${{ matrix.build_type }}

      # Skip any PR created by dependabot to avoid permission issues:
      if: (github.actor != 'dependabot[bot]')

    steps:
      - name: "üß∞ Checkout Source Code"
        uses: actions/checkout@v4

      - name: "‚öôÔ∏è Get the version"
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: "üß∞ Setup Cache-ID with date for unix-like systems"
        if: startsWith(matrix.os, 'ubuntu') || startsWith(matrix.os,'macos')
        run: echo "cache_id=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_ENV

      - name: "üß∞ Setup Cache-ID with date for windows systems"
        if: startsWith(matrix.os, 'windows')
        run: echo "cache_id=$(Get-Date -Format "%yyyy%m%d")" >> $GITHUB_ENV

      - name: "‚öôÔ∏èÔ∏è Cache conan data"
        uses: actions/cache@v4
        if: always()
        env:
          cache-name: cache-conan-data
        with:
          path: ~/.conan2/p
          key: build-${{ matrix.os }}-${{ matrix.formatting }}-${{ matrix.compiler.type }}-${{ matrix.lib }}-${{ matrix.build_type }}-${{ matrix.compiler.version }}-${{ matrix.std }}-${{ env.cache_id }}
          restore-keys: |
            build-${{ matrix.os }}-${{ matrix.formatting }}-${{ matrix.compiler.type }}-${{ matrix.lib }}-${{ matrix.build_type }}-${{ matrix.compiler.version }}-${{ matrix.std }}-
            build-${{ matrix.os }}-${{ matrix.formatting }}-${{ matrix.compiler.type }}-${{ matrix.lib }}-${{ matrix.build_type }}-${{ matrix.compiler.version }}-
            build-${{ matrix.os }}-${{ matrix.formatting }}-${{ matrix.compiler.type }}-${{ matrix.lib }}-${{ matrix.build_type }}-
            build-${{ matrix.os }}-${{ matrix.formatting }}-${{ matrix.compiler.type }}-${{ matrix.lib }}-
            build-${{ matrix.os }}-${{ matrix.formatting }}-${{ matrix.compiler.type }}-
            build-${{ matrix.os }}-${{ matrix.formatting }}-
            build-${{ matrix.os }}-

      - name: "Setup CCache for Linux"
        if: runner.os == 'Linux'
        uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ matrix.os }}--{{matrix.CMAKE_BUILD_TYPE}}
          max-size: 50M

      - name: "üß∞ Install gcc-13"
        if: runner.os == 'Linux' && matrix.compiler.type == 'GCC' && matrix.compiler.version == '13'
        shell: bash
        run: |
          sudo apt-get update && DEBIAN_FRONTEND=--noninteractive \
          sudo apt-get --no-install-recommends --assume-yes install \
          g++-${{ matrix.compiler.version }}

      - name: "üß∞ Install Clang"
        if: runner.os == 'Linux' && matrix.compiler.type == 'CLANG'
        shell: bash
        working-directory: ${{ env.HOME }}
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{ matrix.compiler.version }}        
          sudo apt-get update && DEBIAN_FRONTEND=--noninteractive \
          sudo apt-get --no-install-recommends --assume-yes install \
          clang-tools-${{ matrix.compiler.version }}

      - name: "üß∞ libc++"
        if: runner.os == 'Linux' && matrix.compiler.type == 'CLANG'  && matrix.lib == 'libc++'
        shell: bash
        run: |
          sudo apt-get update && DEBIAN_FRONTEND=--noninteractive \
          sudo apt-get --no-install-recommends --assume-yes install \
          libc++-${{ matrix.compiler.version }}-dev \
          libc++abi-${{ matrix.compiler.version }}-dev \
          libunwind-${{ matrix.compiler.version }}-dev

      - name: "üêß ‚öôÔ∏è Install go-appimage tool for ubuntu"
        if: startsWith(matrix.os, 'ubuntu') && matrix.build_type == 'Release'
        run: |
          pip3 install appimage-builder

      - name: "üêß ‚öôÔ∏è Select Xcode version"
        if: matrix.compiler.type == 'APPLE_CLANG'
        shell: bash
        run: |
          sudo xcode-select -s /Applications/Xcode_${{ matrix.compiler.version }}.app && /usr/bin/xcodebuild -version

      - name: Setup MSVC (${{ matrix.arch }})
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}
          toolset: ${{ matrix.msvc_toolset }}

      - name: "üçé ‚öôÔ∏è Install dependencies for macos"
        if: startsWith(matrix.os,'macos')
        run: |
          brew install ccache

      - name: "üßä ‚öôÔ∏è Install dependencies for windows"
        if: startsWith(matrix.os,'windows')
        run: |
          choco install png2ico

      - name: "üü® Setup Python"
        uses: actions/setup-python@v5
        with:
          # Read python version from a file .python-version
          python-version-file: ".python-version"
          # check-latest: true
          cache: pip

      - name: "Update pip"
        shell: bash
        run: |
          pip install --upgrade pip

      - name: "üß∞ Install Ninja"
        shell: bash
        run: |
          pip install --upgrade ninja

      - name: "üß∞ Setup Conan"
        run: |
          pip install --upgrade conan

      - name: "Configure Conan"
        shell: bash
        run: |
          conan profile detect --force
          if [[ "${{ matrix.compiler.type }}" == "CLANG" ]]; then
            sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler.libcxx=.*/compiler.libcxx=${{ matrix.lib }}/' ~/.conan2/profiles/default
          fi
          sed -i.backup '/^\[settings\]$/,/^\[/ s/^compiler.cppstd=.*/compiler.cppstd=${{ matrix.std }}/' ~/.conan2/profiles/default
          sed -i.backup '/^\[settings\]$/,/^\[/ s/^build_type=.*/build_type=${{ matrix.build_type }}/' ~/.conan2/profiles/default
          conan profile show -pr default

      - name: "üß∞ Install Qt Version ${{ env.QT_VERSION }}"
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          host: ${{ matrix.QT_HOST}}
          target: "desktop"
          arch: ${{ matrix.QT_ARCH }}
          dir: "${{ env.QT_INSTALL_PREFIX}}"
          install-deps: "true"
          modules: ${{ matrix.QT_MODULES }}
          archives: ${{ matrix.QT_ARCHIVES }}
          cache: "true"
          cache-key-prefix: "${{ runner.os }}-install-qt-action"
          setup-python: "true"
          tools: ${{ matrix.QT_TOOLS }}
          set-env: "true"
          tools-only: "false"

      - name: restore ccache
        if: runner.os == 'Linux' || runner.os =='macOS'
        uses: pat-s/always-upload-cache@v3.0.11
        with:
          path: ${{ github.workspace }}/ccache
          key: ccache-${{matrix.os}}-${{matrix.compiler}}-${{ env.QT_VERSION }}-${{ github.sha }}
          restore-keys: ccache-${{matrix.os}}-${{matrix.compiler}}-${{ env.QT_VERSION }}

      - name: check ccache stats prior to build
        if: runner.os == 'Linux' || runner.os =='macOS'
        run: ccache --zero-stats --show-stats

      - name: "Add GCC problem matcher"
        if: runner.os == 'Linux' && matrix.compiler.type == 'GCC'
        uses: ammaraskar/gcc-problem-matcher@master

      - name: Setup MSVC problem matcher
        if: runner.os == 'Windows'
        uses: ammaraskar/msvc-problem-matcher@0.3.0

      - name: "üß∞ Let Conan generate Deps"
        run: |
          conan install . --build=missing --settings=build_type=${{matrix.build_type}}
        env:
          CMAKE_GENERATOR: ${{matrix.CMAKE_GENERATOR}}
          CMAKE_PREFIX_PATH: "${{ env.Qt6_DIR }}/lib/cmake"

      - name: "Configure CMake"
        if: runner.os == 'Linux' || runner.os =='macOS'
        shell: bash
        run: |
          cmake -S . -B build/${{matrix.build_type}} -DCMAKE_TOOLCHAIN_FILE=generators/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

        env:
          CMAKE_GENERATOR: ${{matrix.CMAKE_GENERATOR}}
          CMAKE_PREFIX_PATH: "${{ env.Qt6_DIR }}/lib/cmake"
          FEATURE_TESTS: ON

      - name: "Configure CMake"
        if: runner.os = 'Windows'
        shell: pwsh
        run: |
          cmake -S . -B build\${{matrix.build_type}} -DCMAKE_TOOLCHAIN_FILE=generators\conan_toolchain.cmake -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

        env:
          CMAKE_GENERATOR: ${{matrix.CMAKE_GENERATOR}}
          CMAKE_PREFIX_PATH: "${{ env.Qt6_DIR }}\lib\cmake"
          FEATURE_TESTS: ON

      - name: "üöß Build"
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build build/${{matrix.build_type}}  --config ${{matrix.build_type}}

      - name: check ccache stats prior to build
        if: runner.os == 'Linux' || runner.os =='macOS'
        run: ccache --zero-stats --show-stats

      - name: "üêß üß™ Test and coverage"
        working-directory: build/${{matrix.build_type}}
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{matrix.build_type}}

      - name: "üêß üß™ Coverage"
        if: runner.os == 'Linux' && matrix.compiler.type == 'GCC' && matrix.compiler.version == 13 && matrix.build_type == 'Debug'
        working-directory: build/${{matrix.build_type}}
        run: |
          ${{matrix.GCOV}} -j ${{env.nproc}} --delete --root ../ \
          --filter "jmbde" --filter "jmbdewidgets/" --filter "jmbdemodels/" \
          --print-summary --xml-pretty --xml coverage.xml
        env:
          GCOV: ${{matrix.GCOV}}
          FEATURE_TESTS: ON

      - name: "Publish to codecov"
        if: runner.os == 'Linux' && matrix.compiler.type == 'GCC' && matrix.compiler.version == 13 && matrix.build_type == 'Debug'
        uses: codecov/codecov-action@v3
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml

      - name: Publish Tagged Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/') && matrix.CPACK_GENERATOR != ''
        with:
          files: |
            build/*-*Release*-*.*

      - name: Publish to codecov
        if: runner.os == 'Linux' && matrix.compiler.type == 'GCC' && matrix.compiler.version == 13 && matrix.build_type == 'Debug'
        uses: codecov/codecov-action@v4
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/coverage.xml

  build:
    # if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    name: "${{ matrix.formatting }} C++${{ matrix.std }} ${{ matrix.name }} ${{ matrix.build_type }}"
    runs-on: ${{ matrix.os }}
    needs: [tests]
    strategy:
      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built
      #
      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        std: [20, 23]
        formatting: ["std::format", "fmtlib"]
        config:
          - {
              name: "MSVC 2019",
              os: windows-2019,
              compiler: {type: VISUAL, version: 16, cc: "", cxx: ""},
              conan_config: "",
            }

    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')

    steps:
      - name: "üß∞ Checkout Source Code"
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 10

      - name: "‚öôÔ∏è Get the version"
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: "‚öôÔ∏è Cache CMake Files"
        uses: actions/cache@v3
        env:
          cache-name: cache-cmake-files
        with:
          path: ~/.ccache
          key: ${{ matrix.os }}-cmake-build-${{ hashFiles('CMakeLists.txt', '**/CMakeLists.txt', '**/*.cmake') }}
          restore-keys: |
            ${{ matrix.os }}-cmake-build
            ${{ matrix.os }}

      # Check if GitHub Cache has it, because that's free
      - name: "‚öôÔ∏è Using the builtin GitHub Cache Action for .conan"
        id: github-cache-conan
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-index-modules
        with:
          path: ${{ env.CONAN_USER_HOME }}
          key: host-${{ runner.os }}-target-${{ runner.os }}-${{ matrix.os }}-${{ hashFiles('conanfile.py') }}

      - name: "üçé ‚öôÔ∏è Install dependencies for macos"
        if: startsWith(matrix.os,'macos')
        run: |
          brew install ccache ninja

      - name: "üßä ‚öôÔ∏è Install dependencies for windows"
        if: startsWith(matrix.os,'windows')
        run: |
          choco install png2ico ninja

      - name: "üêß ‚öôÔ∏è Install dependencies for ubuntu"
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install ccache ninja-build

      - name: "üêß ‚öôÔ∏è Install go-appimage tool for ubuntu"
        if: startsWith(matrix.os, 'ubuntu')
        # Will not use linuxdeployqt anymore, because it suopprts currently still-supported mainstream distribution,
        # which is glibc 2.23. For more information, please see https://github.com/probonopd/linuxdeployqt/issues/340.
        # Will try new tool https://github.com/probonopd/go-appimage written in golang by probonopd.
        run: |
          wget -c https://github.com/$(wget -q https://github.com/probonopd/go-appimage/releases -O - \
          | grep "appimagetool-.*-${APPIMAGETOOL_ARCH}.AppImage" | head -n 1 | cut -d '"' -f 2) -O appimagetool
          chmod +x appimagetool
        env:
          APPIMAGETOOL_ARCH: x86_64

      # MacOS 10.15 - XCode version 11.7
      # MacOS 11.1  - XCode version 12.4
      # MacOS 11.3  - XCode version 12.5
      # MacOS 12.0  - XCode version 13.0
      - name: "üçé ‚öôÔ∏è Get right SDK for MacOS 11"
        if: startsWith(matrix.os, 'macos')
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "12.5"

      - name: "üßä ‚öôÔ∏è Configure MSVC"
        if: startsWith(matrix.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1
        with:
          # 14.1 is for vs2017, 14.2 is vs2019, following the upstream vcpkg build
          toolset: 14.2
          arch: ${{ matrix.pak_arch }}

      - name: "‚öôÔ∏è Install Conan"
        uses: turtlebrowser/get-conan@main

      - name: "üêß ‚öôÔ∏è Configure Conan for ubuntu"
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          conan profile update settings.compiler.libcxx=libstdc++11 default

      - name: "‚öôÔ∏è Check Tool Versions"
        run: |
          echo "${{ steps.conan.outputs.version }}"
          conan    --version
          cmake    --version
          c++      --version

      - name: "‚öôÔ∏è Cache Qt"
        id: cache-qt
        uses: actions/cache@v1 # not v2!
        with:
          path: "${{ github.workspace }}/Qt"
          key: QtCache-${{ matrix.platform }}-${{ matrix.qt_arch }}-${{ matrix.qt_version }}

      - name: "‚öôÔ∏è Install Qt"
        uses: jurplel/install-qt-action@v2
        with:
          version: ${{ matrix.qt_version }}
          target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          # modules: 'qtscript'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: "‚öôÔ∏è CMake Configure"
        run: cmake --preset=default

      - name: "‚öôÔ∏è Create Build Environment"
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: "üçé üöß Configure cmake build"
        if: startsWith(matrix.os, 'macos')
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: |
          cmake $GITHUB_WORKSPACE \
            -G ${{matrix.cmake_generator}} \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${{ matrix.macos_target }} \
            -DCMAKE_INSTALL_PREFIX:PATH=./app \
            -DBUILD_TESTING=OFF  \
            -DBUILD_TRANSLATIONS=ON \

      - name: "üßä üöß Configure cmake build"
        if: startsWith(matrix.os, 'windows')
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake $GITHUB_WORKSPACE \
            -G ${{ matrix.cmake_generator }} \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}  \
            -DCMAKE_INSTALL_PREFIX:PATH=./programs \
            -DBUILD_TESTING=OFF  \
            -DBUILD_TRANSLATIONS=ON

      - name: "üêß üöß Configure cmake build"
        if: startsWith(matrix.os, 'ubuntu')
        working-directory: ${{runner.workspace}}/build
        shell: bash
        env:
          CC: ${{ matrix.cc}}
          CXX: ${{ matrix.cxx}}
        run: |
          APPIMAGE_DST_PATH=$GITHUB_WORKSPACE/${TARGET_NAME}.AppDir
          mkdir -p ${APPIMAGE_DST_PATH}
          cmake $GITHUB_WORKSPACE \
              -G ${{matrix.cmake_generator}} \
              -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} \
              -DCMAKE_INSTALL_PREFIX:PATH="${APPIMAGE_DST_PATH}/usr" \
              -DBUILD_TESTING=OFF \
              -DBUILD_TRANSLATIONS=ON

      - name: "üçé üêß üöß Build and Install"
        if: startsWith(matrix.os,'macos') || startsWith(matrix.os, 'ubuntu')
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build . --target install 
          # --parallel $(sysctl -n hw.logicalcpu)

      - name: "üßä üöß Build and Install"
        if: startsWith(matrix.os,'windows')
        shell: pwsh
        working-directory: ${{runner.workspace}}/build
        run: cmake --build . --config ${{ env.BUILD_TYPE }} --target install --parallel $(nproc)

      - name: "üçé üì¶ Package application (macdeployqt and zipfile)"
        if: startsWith(matrix.os,'macos')
        working-directory: ${{runner.workspace}}/build
        run: |
          macdeployqt ${{runner.workspace}}/build/app/bin/jmbde  -qmldir=. -appstore-compliant -libpath=./app/${{env.TARGET_NAME}}.app/Contents/Frameworks -verbose=1 -dmg
          #  cp ${{runner.workspace}}/build/app/${{env.TARGET_NAME}}.dmg ${{runner.workspace}}/${{env.TARGET_NAME}}.dmg

          # ZIP application "%AppName%-%Version%-macOS.zip"
          #  ditto -c -k --sequesterRsrc --keepParent "bin/${{env.TARGET_NAME}}.app" ${{env.TARGET_NAME}}.zip
          # cp ./${{env.TARGET_NAME}}.zip ${{runner.workspace}}/${{env.TARGET_NAME}}.zip

      - name: "üçé üì§ Upload dmg artifact for macOS - ${{ matrix.qt_version }}"
        if: startsWith(matrix.os,'macos')
        uses: actions/upload-artifact@v2
        with:
          name: ${env.TARGET_NAME}-dmg
          path: ${{runner.workspace}}/${{ env.TARGET_NAME }}.dmg

      - name: "üçé üì§ Upload zip artifact for macOS - ${{ matrix.qt_version }}-${env.BUILD_TYPE}}"
        if: startsWith(matrix.os,'macos')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TARGET_NAME }}-macos-zip
          path: ${{runner.workspace}}/${{ env.TARGET_NAME }}*.zip

      # Copy Qt DLLs, compiler runtime & application icon
      - name: "üßä üì¶ Package application (windeployqt)"
        if: startsWith(matrix.os, 'windows')
        working-directory: ${{runner.workspace}}/build
        shell: pwsh
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.qt_arch }}
        run: |
          New-Item -ItemType Directory ${{ env.archiveName }}
          Copy-Item -PATH ./programs/* -Destination ${{ env.archiveName }} -Recurse
          Get-ChildItem ${{ env.archiveName }}/bin
          windeployqt --qmldir . ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}.exe ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}models.dll ${{ env.archiveName }}/bin/${{ env.TARGET_NAME}}widgets.dll

      - name: "üßä Compress Zip Archive"
        if: startsWith(matrix.os,'windows')
        working-directory: ${{runner.workspace}}/build
        shell: pwsh
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.qt_arch }}
        run: |
          Compress-Archive -Path ${{ env.archiveName}}/bin -DestinationPath ${{runner.workspace}}/${{ env.archiveName}}.'zip'

      - name: "üßä üì§ Upload Zip archive"
        if: startsWith(matrix.os,'windows')
        uses: actions/upload-artifact@v2
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.qt_arch }}
        with:
          name: ${{ env.TARGET_NAME}}-win-zip
          path: ${{ runner.workspace}}/${{ env.archiveName}}.zip

      - name: "üßä üì¶ Make ISS-Installer for ${{ matrix.qt_version }}"
        if: startsWith(matrix.os,'windows')
        shell: bash
        working-directory: ${{runner.workspace}}/build
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.qt_arch }}
        run: |
          cp $GITHUB_WORKSPACE/packaging/win/installer_Qt6_x64.iss .
          cp $GITHUB_WORKSPACE/packaging/win/License.rtf .
          cp $GITHUB_WORKSPACE/assets/jmbde-icon.ico .
          cp $GITHUB_WORKSPACE/README.md .
          cp $GITHUB_WORKSPACE/README_en.md .
          cp $GITHUB_WORKSPACE/AUTHORS .
          cp $GITHUB_WORKSPACE/LICENSE .
          ls -la
          ls -la ${archiveName}
          iscc ./installer_Qt6_x64.iss -DMyAppVersion=${{ steps.get_version.outputs.VERSION }} -DMyProjectRoot=$(pwd) -DMyOutRoot=${archiveName}/bin

      - name: "üßä üì§ Upload artifact: ISS Installer"
        if: startsWith(matrix.os,'windows' )
        uses: actions/upload-artifact@v2
        env:
          archiveName: ${{ env.TARGET_NAME}}.${{ steps.get_version.outputs.VERSION }}.Windows-${{ matrix.qt_arch }}
        with:
          name: ${{ env.TARGET_NAME}}-win
          path: ${{runner.workspace}}/${{ env.archiveName}}.exe

      - name: "üêß üì¶ Create AppImage"
        if: startsWith(matrix.os, 'ubuntu')
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: |
          APPIMAGE_DST_PATH=$GITHUB_WORKSPACE/${TARGET_NAME}.AppDir
          cd $GITHUB_WORKSPACE

          $GITHUB_WORKSPACE/appimagetool -s deploy ${APPIMAGE_DST_PATH}/usr/share/applications/io.github.jmuelbert.jmbde.desktop
          mkdir -p ${APPIMAGE_DST_PATH}/usr/plugins/platforminputcontexts
          # cp $GITHUB_WORKSPACE/assets/icons/256-apps-jmbde.png ${APPIMAGE_DST_PATH}
          if [ -f "${APPIMAGE_DST_PATH}/lib/x86_64-linux-gnu/libxcb-glx.so.0" ]; then
            rm ${APPIMAGE_DST_PATH}/lib/x86_64-linux-gnu/libxcb-glx.so.0
          fi
          chmod +x ${APPIMAGE_DST_PATH}/usr/lib64/ld-*.so.*
          $GITHUB_WORKSPACE/appimagetool ${APPIMAGE_DST_PATH}
          mv $GITHUB_WORKSPACE/jmbde-*-x86_64.AppImage $GITHUB_WORKSPACE/${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}}.x86_64.AppImage

      - name: "üêß üì§ Upload artifact: AppImage"
        if: startsWith(matrix.os, 'ubuntu')
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.TARGET_NAME}}.AppImage
          path: |
            ${{runner.workspace}}/${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.x86_64.AppImage

  flatpak-build:
    name: "üêß Build flatpak on ubuntu-20.04"
    runs-on: ubuntu-20.04
    needs: [tests]

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: "üß∞ Checkout Source Code"
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: master

      - name: "üß∞ Checkout Source Code"
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: "‚öôÔ∏è Setup flatpak"
        run: |
          sudo apt-get -y -qq update
          sudo apt-get -y --no-install-recommends install \
              elfutils flatpak flatpak-builder ccache

      - name: "‚öôÔ∏è Setup Flathub"
        run: |
          flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          flatpak install -y --noninteractive flathub org.kde.Sdk//5.15 org.kde.Platform//5.15

      - name: "üì¶ Create flatpak"
        run: |
          BUNDLE="org.jmuelbert.jmbde-QT.flatpak"
          MANIFEST_PATH=$GITHUB_WORKSPACE/packaging/flatpak/org.jmuelbert.jmbde-QT.yml
          RUNTIME_REPO="https://flathub.org/repo/flathub.flatpakrepo"
          APP_ID="org.jmuelbert.jmbde_QT"
          BRANCH="master"

          flatpak-builder --user --disable-rofiles-fuse --repo=repo --force-clean flatpak_app ${MANIFEST_PATH} --install-deps-from=flathub
          flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${APP_ID} ${BRANCH}
          cp $GITHUB_WORKSPACE/org.jmuelbert.jmbde-QT.flatpak ${{runner.workspace}}/org.jmuelbert.jmbde-QT_${{ steps.get_version.outputs.VERSION }}.x86_64.flatpak

      - name: "üì§ Upload artifact: FlatPak"
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TARGET_NAME }}.flatpak
          path: |
            ${{runner.workspace}}/org.jmuelbert.jmbde-QT_${{ steps.get_version.outputs.VERSION }}.x86_64.flatpak

  snap-build:
    name: "üêß Build snap on ubuntu-20.04"
    runs-on: ubuntu-20.04
    needs: [tests]

    steps:
      - name: "‚öôÔ∏è Get the version"
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: "üß∞ Checkout Source Code"
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: master

      - name: "üß∞ Checkout Source Code"
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: "üì¶ Create snap"
        uses: snapcore/action-build@v1
        id: snapcraft
        with:
          snapcraft-args: --enable-experimental-extensions

      - name: "‚öôÔ∏è Rename snap name"
        shell: bash
        run: |
          ls
          mkdir -p $GITHUB_WORKSPACE/build
          cp ${{ steps.snapcraft.outputs.snap }} ${{runner.workspace}}/${{ env.TARGET_NAME }}-${{ steps.get_version.outputs.VERSION }}.amd64.snap
          pwd
          ls ${{runner.workspace}}

      - name: "üì§ Upload artifact: SnapPack"
        uses: actions/upload-artifact@v3
        with:
          name: ${{env.TARGET_NAME}}.snap
          path: |
            ${{runner.workspace}}/${{ env.TARGET_NAME }}-${{ steps.get_version.outputs.VERSION }}.amd64.snap

  releaseNotes:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: Build Releasenotes
        id: github_releasenotes
        uses: release-drafter/release-drafter@v5
        with:
          publish: "${{ steps.check-version.outputs.tag != '' }}"
          tag: "${{ steps.check-version.outputs.tag }}"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  changeLog:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: Build ChangeLog
        id: github_changelog
        uses: mikepenz/release-changelog-builder-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{ steps.check-version.outputs }}
        env:
          GITHUB_TOKEN: $${{ secrets.GITHUB_TOKEN }}

  clang-format:
    name: "üíé Auto-Clang-Format"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - name: "üß∞ Checkout"
        uses: actions/checkout@v4
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0

      - name: "üü® Use clang-format"
        uses: DoozyX/clang-format-lint-action@v0.16.2
        with:
          source: "."
          exclude: "./third_party ./external"
          extensions: "h,cpp,hpp"
          clangFormatVersion: 16
          inplace: True

      - uses: EndBug/add-and-commit@v9
        with:
          author_name: Clang Robot
          author_email: robot@example.com
          message: ":art: Committing clang-format changes"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cmake-format:
    name: "üíé CMake-Format"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    strategy:
      fail-fast: false

    steps:
      - name: "üß∞ Checkout"
        uses: actions/checkout@v4
        with:
          # Full git history is needed to get a proper
          # list of changed files within `super-linter`
          fetch-depth: 0

      - name: "üü® Setup Python"
        uses: actions/setup-python@v5
        with:
          # Read python version from a file .python-version
          python-version-file: ".python-version"
          # check-latest: true
          cache: pip

      - name: "üü® Install cmakelang"
        uses: BSFishy/pip-action@v1
        with:
          packages: cmakelang pyyaml jinja2

      - name: "üü® Use cmake-format"
        run: find . \( -name '*.cmake' -o -name 'CMakeLists.txt' \) -exec cmake-format -i {} \;

      - name: "üì® Use Commit"
        uses: EndBug/add-and-commit@v9
        with:
          author_name: github_actions
          message: ":art: Committing format changes"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build_GH_Pages:
    name: Build GH Pages
    runs-on: ubuntu-latest
    needs: upload
    steps:
      - name: "üß∞ Checkout Source Code"
        uses: actions/checkout@v2
        with:
          fetch-depth: 2

      - name: "üß∞ Fetch all history for all tags and branches"
        run: git fetch --prune --unshallow

      - name: Install sphinx
        run: |
          pip3 install -r docs/requirements.txt
      - name: Running the Sphinx to gh-pages Action
        run: |
          sphinx-build docs docs/_build

      - name: Upload documentation
        uses: actions/upload-artifact@v2
        with:
          name: docs
          path: docs/_build

  deployGHPages:
    runs-on: ubuntu-latest
    needs: build_GH_Pages
    steps:
      - name: Download Artifact with Pages
        uses: actions/download-artifact@v2
        with:
          name: docs
          path: docs/_build

      - name: Deploy to GitHub Pages
        uses: Cecilapp/GitHub-Pages-deploy@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          email: juergen.muelbert@gmail.com
          build_dir: docs/_build

  # Upload continous build
  upload-prereleases:
    name: "üóÇ Create pre-release and upload artifacts"
    environment: PreRelease
    needs:
      - flatpak-build
      - snap-build
      - build

    runs-on: ubuntu-latest

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: "üì• Download artifacts"
        uses: actions/download-artifact@v2

      - name: "üóÇ Inspect directory after downloading artifacts"
        run: ls -alFR

      - name: "üì§ Upload Release: AppImage"
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.appimage
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.appimage
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: FlatPak"
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.flatpak
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.flatpak
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: snap"
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.amd64.snap
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.amd64.snap
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: macOS-zip"
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}${env.TARGET_NAME}-zip/${{env.TARGET_NAME}}.zip
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}-macos.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: macOS"
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}${env.TARGET_NAME}-dmg/${{env.TARGET_NAME}}.dmg
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: windows"
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.TARGET_NAME }}.exe
          asset_name: ${{ env.TARGET_NAME}}${{ steps.get_version.outputs.VERSION }}-win64.exe
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: zip for windows"
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.archiveName }}-win.zip
          asset_name: ${{ env.TARGET_NAME}}-win-${{ steps.get_version.outputs.VERSION }}-win.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: Upload source archive
        if: github.ref == 'refs/heads/master'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z
          asset_name: jmbde-qt-${{ steps.get_version.outputs.VERSION }}-source-all.7z
          tag: ${{ github.ref }}
          overwrite: true

  translate-ReadMe:
    name: "üåê Translate ReadMe"
    # needs: [tests, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 16.x
      # ISO Langusge

      - name: Adding README - German
        uses: dephraiim/translate-readme@main
        with:
          LANG: de

      - name: Adding README - Italian
        uses: dephraiim/translate-readme@main
        with:
          LANG: it

      - name: Adding README - Spanish
        uses: dephraiim/translate-readme@main
        with:
          LANG: es

  # Upload continous build
  upload:
    name: "üóÇ Create release and upload artifacts"
    environment: Release
    needs:
      - flatpak-build
      - snap-build
      - build

    runs-on: ubuntu-latest
    steps:
      - name: "üì• Download artifacts"
        uses: actions/download-artifact@v3
      - name: "üóÇ Inspect directory after downloading artifacts"
        run: ls -alFR

      - name: "üì§ Upload Release: AppImage"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.appimage
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.appimage
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: FlatPak"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.flatpak
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.flatpak
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: snap"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}/${{env.TARGET_NAME}}.amd64.snap
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.amd64.snap
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: macOS-zip"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}${env.TARGET_NAME}-zip/${{env.TARGET_NAME}}.zip
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}-macos.zip
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: macOS"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{runner.workspace}}${env.TARGET_NAME}-dmg/${{env.TARGET_NAME}}.dmg
          asset_name: ${{env.TARGET_NAME}}-${{ steps.get_version.outputs.VERSION }}.dmg
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: windows"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.TARGET_NAME }}.exe
          asset_name: ${{ env.TARGET_NAME}}${{ steps.get_version.outputs.VERSION }}-win64.exe
          tag: ${{ github.ref }}
          overwrite: true

      - name: "üì§ Upload Release: zip for windows"
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./${{ env.archiveName }}-win.zip
          asset_name: ${{ env.TARGET_NAME}}-win-${{ steps.get_version.outputs.VERSION }}-win.zip
          tag: ${{ github.ref }}
          overwrite: true
