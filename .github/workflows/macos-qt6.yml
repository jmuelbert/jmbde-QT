---
name: "CD: MacOS Qt6"

on:
    push:
        paths-ignore:
            - '.github/ISSUE_TEMPLATE/**'
            - 'docker/**'
            - 'CONTRIBUTING.md'
            - "README.md"
            - "LICENSE"
            - "BUILD.md"

    pull_request:
        types: [opened, reopened]
        paths-ignore:
            - '.github/ISSUE_TEMPLATE/**'
            - 'docker/**'
            - 'CONTRIBUTING.md'
            - "README.md"
            - "LICENSE"
            - "BUILD.md"
    release:
        types: [published]

    workflow_dispatch:

env:
    PRODUCT: jmbde
    targetName: jmbde

jobs:
    check_commit_msg:
        outputs:
            commit_message: ${{ steps.get_message.outputs.message }}
        name: Check if the workflow has been disabled.
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
            - name: Get commit message
              id: get_message
              run: |
                  echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"

    build:
        needs: check_commit_msg
        if: ${{ !contains( needs.check_commit_msg.outputs.commit_message, 'NO_MAIN') }}

        name: Build

        strategy:
            matrix:
                os: [macos-latest]
                build_type: [Release, RelWithDebInfo]
                qt_version: [6.0.1]
                qt_arch: [clang_64]
                arch: [clang_64]
                generator: ["-G 'Ninja'"]

            fail-fast: false

        runs-on: ${{ matrix.os }}

        steps:
            - name: Get the version
              id: get_version
              shell: bash
              run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

            - name: Checkout Source code
              if: github.event_name == 'push'
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0
            #          ref: master

            - name: Checkout Source code
              if: github.event_name == 'pull_request'
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0
                  ref: ${{ github.event.pull_request.head.sha }}

            - name: Set env & Print jmbde-QT version
              shell: bash
              run: |
                  last_committed_tag=$(git tag -l --sort=-v:refname | head -1)
                  git_revno=$(git rev-list $(git describe --tags --abbrev=0)..HEAD --count)
                  git_hash=$(git rev-parse --short HEAD)
                  echo "=======jmbde-QT VERSION========"
                  echo ${last_committed_tag:1}
                  echo "Details: ${last_committed_tag}+git${git_revno}.${git_hash}"
                  echo "================================"
                  # This will allow to build pre-preleases without git tag
                  # echo "VERSION=${last_committed_tag:1}" >> $GITHUB_ENV
                  echo "VERSION=$(cat CMakeLists.txt |grep 'set.*(.*JMBDE_QT_VERSION' | sed 's/[^0-9.]*//' |sed 's/)//g')" >> $GITHUB_ENV

            - name: Cache Qt
              id: cache-qt
              uses: actions/cache@v2.1.5
              with:
                  path: ../Qt/${{matrix.qt_version}}/${{matrix.qt_arch}}
                  key: ${{ runner.os }}-Qt/${{matrix.qt_version}}/${{matrix.qt_arch}}

            - name: Installing Q${{ matrix.qt_version }} -  ${{ matrix.arch }}
              uses: jurplel/install-qt-action@v2
              with:
                  version: ${{ matrix.qt_version }}
                  arch: ${{ matrix.arch }}
                  cached: ${{ steps.cache-qt.outputs.cache-hit }}
                  setup-python: "false"

            - name:
                  macOS - ${{ matrix.qt_version }} - Build preparation - Install
                  Packages
              run: |
                  brew install ninja pkg-config

            - name: Install conan
              id: conan
              run: |
                  pip3 install --upgrade pip
                  pip3 install conan
                  conan user

            - name: Create Build Environment
              # Some projects don't allow in-source building, so create a separate build directory
              # We'll use this as our working directory for all subsequent commands
              run: cmake -E make_directory ${{runner.workspace}}/build

            - name: Configure CMake
              # Use a bash shell so we can use the same syntax for environment variable
              # access regardless of the host operating system
              shell: bash
              working-directory: ${{runner.workspace}}/build
              # Note the current convention is to use the -S and -B options here to specify source
              # and build directories, but this is only available with CMake 3.13 and higher.
              # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
              env:
                  Qt6_DIR: ../Qt/${{ matrix.qt_version }}/${{matrix.qt_arch}}
              run: |
                  cmake $GITHUB_WORKSPACE \
                    ${{matrix.generator}} \
                    -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                    -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15 \
                    -DBUILD_TRANSLATIONS=ON \
                    -DCMAKE_INSTALL_PREFIX:PATH=./app

            - name: Build
              working-directory: ${{runner.workspace}}/build
              shell: bash
              # Execute the build.  You can specify a specific target with "--target <NAME>"
              env:
                  Qt6_DIR: ../Qt/${{ matrix.qt_version }}/${{matrix.qt_arch}}
              # Execute the build.  You can specify a specific target with "--target <NAME>"
              run:
                  cmake --build . --config ${{ matrix.build_type }} -j2 --target install

            - name: Package
              env:
                  Qt6_DIR: ../Qt/${{ matrix.qt_version }}/${{matrix.qt_arch}}
              working-directory: ${{runner.workspace}}/build
              run: |
                  export PATH=$Qt6_DIR/bin:$PATH
                  macdeployqt ./app/${{env.targetName}}.app -qmldir=. -appstore-compliant -libpath=./app/jmbde.app/Contents/Frameworks -verbose=1 -dmg
                  cp ./app/${{env.targetName}}.dmg ${{env.targetName}}-Qt${{ matrix.qt_version }}.dmg

            - name: macOS - ${{ matrix.qt_version }} - Uploading artifact
              uses: actions/upload-artifact@v2.2.3
              with:
                  name:
                      ${{env.targetName}}-Qt${{ matrix.qt_version
                      }}-${{matrix.build_type}}.dmg
                  path:
                      ${{runner.workspace}}/build/${{ env.targetName }}-Qt${{
                      matrix.qt_version }}.dmg

            - name: macOS - ${{ matrix.qt_version }} - Upload binaries to release
              uses: svenstaro/upload-release-action@v2
              with:
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  file:
                      ${{runner.workspace}}/build/${{ env.targetName }}-Qt${{
                      matrix.qt_version }}.dmg
                  asset_name:
                      ${{ env.targetName }}-${{
                      steps.get_version.outputs.VERSION}}-Qt${{ matrix.qt_version
                      }}-${{matrix.build_type}}.dmg
                  tag: ${{ github.ref }}
                  overwrite: true
