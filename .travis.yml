language: cpp

matrix:
  include:
    - name: "Linux (gcc)"
      os: linux
      dist: bionic
      sudo: required
      compiler: clang
      services:
        - docker
      env:
        - CMAKE_BUILD_TYPE: Release
        - QT_PPA: beineri/opt-qt5.12.6-bionic
        - QT_VER: 512

    - name: "macOS (xcode 11.2)"
      os: osx
      osx_image: xcode11.2
      env:
        - CMAKE_BUILD_TYPE: Release
    - name: Windows (VS2017 Win32)
      os: windows
      env:
        - PLATFORM: Win32
        - CMAKE_BUILD_TYPE: Release
        - PYTHON_BASE_DIR: "'/c/Python37'"
        - PYTHON_PACKAGE: "'python3 --version 3.7.0 --forcex86'"
        - QT5_BASE_DIR: "'/c/Qt/5.13/msvc2017'"
        - WIX_PATH: "'/c/Program Files (x86)/WiX Toolset v3.11/bin'"
        - MSBUILD_PATH: "'/c/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/MSBuild/15.0/Bin'"

    - name: Windows (VS2017 x64)
      os: windows
      env:
        - PLATFORM: x64
        - CMAKE_BUILD_TYPE: Release
        - PYTHON_BASE_DIR: "'/c/Python37'"
        - PYTHON_PACKAGE: "'python3 --version 3.7.0'"
        - QT5_BASE_DIR: "'/c/Qt/5.13/msvc2017_64'"
        - WIX_PATH: "'/c/Program Files (x86)/WiX Toolset v3.11/bin'"
        - MSBUILD_PATH: "'/c/Program Files (x86)/Microsoft Visual Studio/2017/BuildTools/MSBuild/15.0/Bin'"

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    sudo apt-get update -qq;
    sudo apt-get install apt-transport-https ca-certificates gnupg software-properties-common wget;
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -;
    sudo add-apt-repository --yes ppa:beineri/opt-qt-5.12.6-bionic;
    sudo apt-add-repository --yes 'deb https://apt.kitware.com/ubuntu/ bionic main';
    sudo apt-get update -qq;
    CMAKE_URL="https://cmake.org/files/v3.16/cmake-3.16.0-Linux-x86_64.sh";
    CMAKE_INSTALLER="cmake-3.5.2-Linux-x86_64.sh";
    wget --no-check-certificate --quiet -O ${CMAKE_INSTALLER} - ${CMAKE_URL};
    sh ${CMAKE_INSTALLER} --prefix=$HOME --exclude-subdir;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    brew update;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "x-windows" ]]; then
    export PLATFORM=${PLATFORM};
    export PATH=$PATH:${QT5_BASE_DIR}/bin:${MSBUILD_PATH}:${WIX_PATH};
    export PYTHON_PACKAGE=${PYTHON_PACKAGE};
    export CMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE};
    fi

install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    sudo apt-get install -y build-essential cmake ninja-build zlib1g-dev libssl-dev libffi-dev libx11-dev libgl1-mesa-dev mesa-common-dev;
    sudo apt-get install -y qt${QT_VER}-meta-minimal qt${QT_VER}declarative qt${QT_VER}imageformats qt${QT_VER}multimedia qt${QT_VER}tools qt${QT_VER}svg qt${QT_VER}x11extras qt${QT_VER}xmlpatterns;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    brew install qt quazip ccache;
    export PATH="$(brew --prefix qt)/bin:$PATH";
    fi
  - if [[ "$TRAVIS_OS_NAME" == "x-windows" ]]; then
    powershell Install-WindowsFeature Net-Framework-Core;
    cinst -y --no-progress ${PYTHON_PACKAGE};
    cinst -y --no-progress wixtoolset;
    export PATH="$(powershell -Command '("Process", "Machine" | % {
    [Environment]::GetEnvironmentVariable("PATH", $_) -Split ";" -Replace "\\$", ""
    } | Select -Unique | % { cygpath $_ }) -Join ":"')";
    echo "PATH=$PATH";
    scripts/travis-install-qt-windows.sh;
    cmake . -DCMAKE_INSTALL_PREFIX=$(pwd) -DCMAKE_GENERATOR_PLATFORM=${PLATFORM};
    cmake --build . --config $CMAKE_BUILD_TYPE --target install;
    fi

before_script:
  - git fetch --unshallow # restore repository depth to properly count commits in auto versioning
  - git checkout master # re-attach to master to satisfy auto versioning fi

script:
  - mkdir build
  - cd build
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    cmake ../ -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_SHARED_LIBS=ON;
    cmake --build . --config $CMAKE_BUILD_TYPE;
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    cmake ../ -DCMAKE_PREFIX_PATH="$(brew --prefix qt)" -DBUILD_SHARED_LIBS=ON;
    sudo cmake --build . --config $CMAKE_BUILD_TYPE --target install;
    elif [[ "$TRAVIS_OS_NAME" == "x-windows" ]]; then
    cmake ../ -DCMAKE_INSTALL_PREFIX=$(pwd) -DCMAKE_GENERATOR_PLATFORM=${PLATFORM} -DBUILD_SHARED_LIBS=ON;
    cmake --build . --config $CMAKE_BUILD_TYPE --target install;
    fi

after_success:
  - export VERSION=$TRAVIS_TAG
  - if [ -z "$VERSION" ]; then
    export VERSION=$(git rev-parse --short HEAD);
    fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    mkdir appbuild;
    mkdir appdir;
    cd appbuild;
    cmake -S ..-DCMAKE_INSTALL_PREFIX:PATH=../appdir/usr -Wno-dev
    make install
    cd ..
    git rev-list master --count
    wget -c "https://github.com/jimevins/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
    chmod a+x linuxdeployqt*.AppImage
    wget -c -nv "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage";
    chmod a+x appimagetool-x86_64.AppImage;
    unset QTDIR; unset QT_PLUGIN_PATH ; unset LD_LIBRARY_PATH;
    - ./linuxdeployqt*.AppImage ./appdir/Unix/io.github.jmuelbert.jmbde.desktop -bundle-non-qt-libs -extra-plugins=imageformats/libqsvg.so -exclude-libs=libpython3.54m.so.1.0 -verbose=2;
    unlink appdir/AppRun;
    rm -r appdir/usr/plugins/bearer;
    rm -r appdir/usr/plugins/platforminputcontexts;
    rm -r appdir/usr/plugins/printsupport;
    rm -r appdir/usr/plugins/sqldrivers;
    rm -r appdir/usr/plugins/xcbglintegrations;
    ./appimagetool-x86_64.AppImage appdir;
    mkdir .snapcraft;
    mkdir snap;
    cp ../packaging/snap/snapcraft.yaml snap/snapcraft.yaml;
    docker run -v $(pwd):$(pwd) -t ubuntu:18.04 sh -c "apt update -qq && apt install -y snapcraft && cd $(pwd) && snapcraft";
    curl -F file=@$(ls | grep jmbde | grep .snap) https://file.io;
    curl -F file=@$(ls | grep jmbde | grep .AppImage) https://file.io;
    export DEPLOYPATH=$(pwd);
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    sudo make install;
    sudo macdeployqt jmbde.app -verbose=3;
    sudo chown -R $(id -nu)jmbde.app;
    mkdir -p dmgdir/jmbde.app;
    cp -r jmbde.app/* dmgdir/jmbde.app/;
    ln -s /Applications dmgdir/Applications;
    hdiutil create -volname jmbde-$VERSION -srcfolder dmgdir -ov -format UDZO jmbde-$VERSION.dmg;
    curl -F file=jmbde-$VERSION.dmg https://file.io;
    curl --upload-file ./jmbde-$VERSION.dmg https://transfer.sh/jmbde.dmg;
    export DEPLOYPATH=$(pwd);
    elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
    cmake --build . --config $CMAKE_BUILD_TYPE --target install;
    curl --upload-file ./jmbde*.msi https://transfer.sh/jmbde.msi;
    export DEPLOYPATH=$(pwd);
    fi
#deploy:
#  provider: releases
#  api_key:
#    secure: xY0hOHsO6oztTs/fyKAl4FrA+6ylke3QXsAHzntIEHOt7sgVGQW/4QzJQYPwmAQAkVOssjZWdaJrFXQMFw+lYUpwZGSycPB+fDnosKYlxXFHG4rIliyG+az6ODzA0YeugFwlYAcHXx1qzBJ8gh3tHhB16ur7OQ62VdunCpG7NDtaINGMojzL4DmSfyiyOMPM4p6EcD+qaKd6dxBePXkmZ5J+YOvgfLcd1mJ94V7+WnQ66KltIaFZPewaansw/p6KAUxPXcTMyMepjcjQFQyucs4rN+9EmAaA5d0rzaucbTra1nJbJel0qWC+hcH8WF86ez8nTPFY1MGjRPZmfFGesvwUkzc3IH2w5j82BmP5x7IP+TZQ4qddM/eeWIX4WeTUKoVHHt/+iZNe6kZ7Qv8ZEzQS8/G0WHz0AyoWCKSztMFBs2XZvLPjEjhCr1HKH8ueX2zXFVRf9mpp23kjGyLzacTzSC+6xjrcp27s/fY+NH3kXw67c2tB815BqtYvWMoEZVNF1+7v0nbBOs6SaDAErLqRKOP4GKgEG+J3GvokuVmQpSzwk+v4EX4ixJm3pI6C+yFaDRc7CEtkXRFIPxesMeP2w8thIuWWNaNzRAKlxR4Dx9h4bLunsx5HDfwA9h0CszcOU2ewvrR60QExZ7fjTrIoqC/UWwjoCqFv+TlyGLU=
#  file_glob: true
#  file: $DEPLOYPATH/*.{dmg,snap,AppImage,msi}
#  skip_cleanup: true
#  on:
#    repo: olav-st/screencloud
#    tags: true

git:
  depth: 5

services:
  # Virtual X is needed for the test
  - xvfb

addons:
  homebrew:
    update: true
    packages:
      - qt5
      - cmake
      - ninja
