option(APPIMAGE_BUILD "configure build for bundling in an appimage" OFF)

include_directories(${CMAKE_CURRENT_BINARY_DIR})
include_directories(../libjmbde)

if (APPLE)
  set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY         ${CMAKE_BINARY_DIR}/lib) # static libs, dll's import lib/exp
  set( CMAKE_LIBRARY_OUTPUT_DIRECTORY         ${APP_BINARY_DIR}/${PROJECT_NAME}.app/Contents/Frameworks )
  set( CMAKE_RUNTIME_OUTPUT_DIRECTORY         ${APP_BINARY_DIR}/${PROJECT_NAME}.app/Contents/MacOS )
  set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${APP_BINARY_DIR}/${PROJECT_NAME}.app/Contents/MacOS )
  set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${APP_BINARY_DIR}/${PROJECT_NAME}.app/Contents/MacOS )
  set( CMAKE_SHARED_MODULE_SUFFIX ".dylib")
  set( CMAKE_MACOSX_RPATH 1)
  set( CMAKE_SKIP_BUILD_RPATH FALSE)
  set( APP_PLUGIN_DIRECTORY ${APP_BINARY_DIR}/${PROJECT}.app/Contens/PlugIns)
  set( APP_PLUGIN_DESTINATION ${PROJECT_NAME}.app/Contents/PlugIns)
else()
  set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY         ${CMAKE_BINARY_DIR}/lib) # static libs, dll's import lib/exp  
  set( CMAKE_LIBRARY_OUTPUT_DIRECTORY         ${APP_BINARY_DIR}/lib//${PROJECT_NAME} ) # plugins
  set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG   ${APP_BINARY_DIR}/lib//${PROJECT_NAME} ) # plugins
  set( CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${APP_BINARY_DIR}/lib//${PROJECT_NAME} ) # plugins
  set( CMAKE_RUNTIME_OUTPUT_DIRECTORY         ${APP_BINARY_DIR}/bin) # .exe | *.dll
  set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${APP_BINARY_DIR}/bin)
  set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${APP_BINARY_DIR}/bin)

  set ( APP_PLUGIN_DIRECTORY ${APP_BINARY_DIR}/lib/${PROJECT_NAME}/plugins)
  set ( APP_PLUGIN_DESTINATION lib/${PROJECT_NAME}/plugins)

  set ( CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib/${PROJECT_NAME}:${CMAKE_INSTALL_PREFIX}/lib")
  set ( CMAKE_INSTALL_RPATH_USE_LINK_PATH FALSE)

  if (CMAKE_CROSSCOMPILING AND WITH QT5)
    set ( CMAKE_PREFIX_PATH /usr/local/qt5)
  endif()  
endif()

file(GLOB ${PROJECT_NAME}_Resources *.qrc)

set(TS_FILES
    ${CMAKE_SOURCE_DIR}/translations/app_ar_DZ.ts
    ${CMAKE_SOURCE_DIR}/translations/app_bg.ts
    ${CMAKE_SOURCE_DIR}/translations/app_cs.ts
    ${CMAKE_SOURCE_DIR}/translations/app_de.ts
    ${CMAKE_SOURCE_DIR}/translations/app_en.ts
    ${CMAKE_SOURCE_DIR}/translations/app_es.ts
    ${CMAKE_SOURCE_DIR}/translations/app_fi.ts
    ${CMAKE_SOURCE_DIR}/translations/app_fr.ts
    ${CMAKE_SOURCE_DIR}/translations/app_he.ts
    ${CMAKE_SOURCE_DIR}/translations/app_hu.ts
    ${CMAKE_SOURCE_DIR}/translations/app_it.ts
    ${CMAKE_SOURCE_DIR}/translations/app_ja.ts
    ${CMAKE_SOURCE_DIR}/translations/app_nb.ts
    ${CMAKE_SOURCE_DIR}/translations/app_nl.ts
    ${CMAKE_SOURCE_DIR}/translations/app_pl.ts
    ${CMAKE_SOURCE_DIR}/translations/app_pt_PT.ts
    ${CMAKE_SOURCE_DIR}/translations/app_ru.ts
    ${CMAKE_SOURCE_DIR}/translations/app_tr.ts
    ${CMAKE_SOURCE_DIR}/translations/app_uk.ts
    ${CMAKE_SOURCE_DIR}/translations/app_zh_TW.ts
    ${CMAKE_SOURCE_DIR}/translations/app_zh.ts
 )

add_custom_target(translations)
foreach(_ts_file ${TS_FILES})
    # generate a sensible name for this translation file
    get_filename_component(_ts_name ${_ts_file} NAME_WE)
    # call lupdate ourselves
    add_custom_command(
        OUTPUT "${_ts_file}"
        DEPENDS ${TS_SOURCES}
        COMMAND ${Qt5_LUPDATE_EXECUTABLE} -recursive ${CMAKE_SOURCE_DIR} -ts ${_ts_file}
    )
    # create a target that depends on the generated files
    add_custom_target(translate_${_ts_name} DEPENDS ${_ts_file})
    # attach the custom target for this ts file to the parent target
    add_dependencies(translations translate_${_ts_name})
endforeach()

# generate qm files
qt5_add_translation(QM_FILES ${TS_FILES})
configure_file(translations.qrc ${CMAKE_CURRENT_BINARY_DIR} COPYONLY)

include_directories(
  ${CMAKE_SOURCE_DIR}/src/3rd-party/src/qtsingleapplication
  ${CMAKE_SOURCE_DIR}/src/3rd-party/src/qtlockedfile
  ${CMAKE_SOURCE_DIR}/src
  ${Qt5Sql_INCLUDE_DIRS}
  ${Qt5Widgets_INCLUDE_DIRS}  
  ${Qt5Network_INCLUDE_DIRS}
  ${Qt5Core_INCLUDE_DIRS}
  )

if (WIN32 )
  set( lockedfile_SOURCES
    ../3rd-party/qtlockedfile/src/qtlockedfile_win.cpp
    )
else()
  set( lockedfile_SOURCES
    ../3rd-party/qtlockedfile/src/qtlockedfile_unix.cpp
    )
endif()

set( SOURCES
    main.cpp
    ../3rd-party/qtsingleapplication/src/qtsingleapplication.cpp
    ../3rd-party/qtsingleapplication/src/qtlocalpeer.cpp
    ../3rd-party/qtlockedfile/src/qtlockedfile.cpp
)

add_executable(${PROJECT_NAME}
    ${SOURCES}
    ${lockedfile_SOURCES}
    ${${PROJECT_NAME}_Resources}
    ${QM_FILES}
    ${CMAKE_CURRENT_BINARY_DIR}/translations.qrc
)

target_compile_definitions(${PROJECT_NAME} PRIVATE $<$<OR:$<CONFIG:Debug>,$<CONFIG:RelWithDebInfo>>:QT_QML_DEBUG>)
target_link_libraries(${PROJECT_NAME} PRIVATE
    Qt5::Core
    Qt5::Gui
    Qt5::Widgets
    Qt5::Sql
    Qt5::Network
    Qt5::PrintSupport
    Qt5::Help
    Qt5::Qml
    Qt5::Quick
    Qt5::QuickWidgets
    libjmbde
    )

install( TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin COMPONENT applications)
install( FILES ${PROJECT_NAME}.ico DESTINATION share/${PROJECT_NAME} COMPONENT applications)
