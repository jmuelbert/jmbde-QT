---
# NOTE: customize `example-project-image` name below before deploying to a new
# project.

include:
  - template: Security/License-Scanning.gitlab-ci.yml
# Include the DAST template
  - template: DAST.gitlab-ci.yml
stages:
  # - build_docker_images
  # - push_docker_images
  - source
  - analysis
  - build
  - test
  - deploy
  # Add `dast` to your `stages:` configuration
  - dast

cmake-format Check:
    image: stabletec/build-core:fedora
    stage: analysis
    # tags:
    #   - docker-linux
    allow_failure: true
    script:
        - pip install cmakelang[YAML]
        - cmake-format --version
        - cmake-format -i $(find . -name "*.cmake")
        - cmake-format -i $(find . -name "CMakeLists.txt")
        - git diff --exit-code

clang-format Check:
    image: stabletec/build-core:fedora
    stage: analysis
    # tags:
    #   - docker-linux
    allow_failure: true
    script:
        - clang-format --version
        - clang-format -i $(find . -name "*.c")
        - clang-format -i $(find . -name "*.cpp")
        - clang-format -i $(find . -name "*.h")
        - clang-format -i $(find . -name "*.hpp")
        - git diff --exit-code

cppcheck:
    image: ubuntu:bionic
    stage: analysis
    before_script:
        - apt update
        - apt install -y --no-install-recommends cppcheck=1.82-1 python3-pygments python-pygments
        - cppcheck --version
    script:
        - mkdir cppcheck
        #- cppcheck . -I include/ --verbose --enable=all --inconclusive --language=c++ --error-exitcode=1
        - cppcheck . -I include/ --enable=all --inconclusive --xml-version=2 --force --library=windows,posix,gnu . 2> cppcheck/result.xml
        - cppcheck-htmlreport --source-encoding="iso8859-1" --title="my project name" --source-dir . --report-dir=cppcheck --file=cppcheck/result.xml
    artifacts:
        paths:
            - cppcheck/
        expire_in: 1 week

build-job:
    stage: build
    script:
        - echo "Hello, $GITLAB_USER_LOGIN!"

test-job1:
    stage: test
    script:
        - echo "This job tests something"

test-job2:
    stage: test
    script:
        - echo "This job tests something, but takes more time than test-job1."
        - echo "After the echo commands complete, it runs the sleep command for 20 seconds"
        - echo "which simulates a test that runs 20 seconds longer than test-job1"
        - sleep 20

test-pages:
    image: python:3.7-alpine
    stage: test
    script:
        - pip install -U sphinx sphinx-rtd-theme breathe
        - sphinx-build -b html . public
    only:
        - branches
    except:
        - master

code_intelligence_go:
  stage: test
  needs: []
  allow_failure: true
  image: sourcegraph/lsif-go:v1
  rules:
    - if: $CODE_INTELLIGENCE_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.go'
  script:
    - lsif-go
  artifacts:
    reports:
      lsif: dump.lsif

code_quality:
  stage: test
  image: docker:19.03.12
  allow_failure: true
  services:
    - docker:19.03.12-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.24"
  needs: []
  script:
    - export SOURCE_CODE=$PWD
    - |
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
    - | # this is required to avoid undesirable reset of Docker image ENV variables being set on build stage
      function propagate_env_vars() {
        CURRENT_ENV=$(printenv)

        for VAR_NAME; do
          echo $CURRENT_ENV | grep "${VAR_NAME}=" > /dev/null && echo "--env $VAR_NAME "
        done
      }
    - docker pull --quiet "$CODE_QUALITY_IMAGE"
    - |
      docker run \
        $(propagate_env_vars \
          SOURCE_CODE \
          TIMEOUT_SECONDS \
          CODECLIMATE_DEBUG \
          CODECLIMATE_DEV \
          REPORT_STDOUT \
          REPORT_FORMAT \
          ENGINE_MEMORY_LIMIT_BYTES \
          CODECLIMATE_PREFIX \
        ) \
        --volume "$PWD":/code \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        "$CODE_QUALITY_IMAGE" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    expire_in: 1 week
  dependencies: []
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'


deploy-prod:
    stage: deploy
    script:
        - echo "This job deploys something from the $CI_COMMIT_BRANCH branch."

pages:
    image: python:3.7-alpine
    stage: deploy
    script:
        - pip install -U sphinx sphinx-rtd-theme breathe
        - sphinx-build -b html ./docs/manual public
    artifacts:
        paths:
            - public
    only:
        - master

# Your selected site and scanner profiles:
dast:
  stage: dast
  dast_configuration:
    site_profile: "security-site-profile"
    scanner_profile: "dast-profile"

